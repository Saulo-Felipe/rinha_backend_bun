{
  "version": 3,
  "sources": ["../../node_modules/eventemitter3/index.js", "../../node_modules/fast-decode-uri-component/index.js", "../../node_modules/fast-querystring/lib/parse.js", "../../node_modules/fast-querystring/lib/internals/querystring.js", "../../node_modules/fast-querystring/lib/stringify.js", "../../node_modules/fast-querystring/lib/index.js", "../../node_modules/memoirist/dist/bun/index.js", "../../node_modules/eventemitter3/index.mjs", "../../node_modules/eventemitter3/index.mjs", "../../src/trace.ts", "../../src/error.ts", "../../src/utils.ts", "../../node_modules/cookie/index.js", "../../src/cookie.ts", "../../src/handler.ts", "../../src/utils.ts", "../../src/utils.ts", "../../src/error.ts", "../../src/ws/index.ts", "../../src/compose.ts", "../../src/compose.ts", "../../src/dynamic-handle.ts", "../../src/dynamic-handle.ts", "../../src/type-system.ts", "../../src/type-system.ts", "../../src/index.ts"],
  "sourcesContent": [
    "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",
  "'use strict'\n\nvar UTF8_ACCEPT = 12\nvar UTF8_REJECT = 0\nvar UTF8_DATA = [\n  // The first part of the table maps bytes to character to a transition.\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n  4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n  6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7,\n  10, 9, 9, 9, 11, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n\n  // The second part of the table maps a state to a new state when adding a\n  // transition.\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  12, 0, 0, 0, 0, 24, 36, 48, 60, 72, 84, 96,\n  0, 12, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 48, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 48, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\n  // The third part maps the current transition to a mask that needs to apply\n  // to the byte.\n  0x7F, 0x3F, 0x3F, 0x3F, 0x00, 0x1F, 0x0F, 0x0F, 0x0F, 0x07, 0x07, 0x07\n]\n\nfunction decodeURIComponent (uri) {\n  var percentPosition = uri.indexOf('%')\n  if (percentPosition === -1) return uri\n\n  var length = uri.length\n  var decoded = ''\n  var last = 0\n  var codepoint = 0\n  var startOfOctets = percentPosition\n  var state = UTF8_ACCEPT\n\n  while (percentPosition > -1 && percentPosition < length) {\n    var high = hexCodeToInt(uri[percentPosition + 1], 4)\n    var low = hexCodeToInt(uri[percentPosition + 2], 0)\n    var byte = high | low\n    var type = UTF8_DATA[byte]\n    state = UTF8_DATA[256 + state + type]\n    codepoint = (codepoint << 6) | (byte & UTF8_DATA[364 + type])\n\n    if (state === UTF8_ACCEPT) {\n      decoded += uri.slice(last, startOfOctets)\n\n      decoded += (codepoint <= 0xFFFF)\n        ? String.fromCharCode(codepoint)\n        : String.fromCharCode(\n          (0xD7C0 + (codepoint >> 10)),\n          (0xDC00 + (codepoint & 0x3FF))\n        )\n\n      codepoint = 0\n      last = percentPosition + 3\n      percentPosition = startOfOctets = uri.indexOf('%', last)\n    } else if (state === UTF8_REJECT) {\n      return null\n    } else {\n      percentPosition += 3\n      if (percentPosition < length && uri.charCodeAt(percentPosition) === 37) continue\n      return null\n    }\n  }\n\n  return decoded + uri.slice(last)\n}\n\nvar HEX = {\n  '0': 0,\n  '1': 1,\n  '2': 2,\n  '3': 3,\n  '4': 4,\n  '5': 5,\n  '6': 6,\n  '7': 7,\n  '8': 8,\n  '9': 9,\n  'a': 10,\n  'A': 10,\n  'b': 11,\n  'B': 11,\n  'c': 12,\n  'C': 12,\n  'd': 13,\n  'D': 13,\n  'e': 14,\n  'E': 14,\n  'f': 15,\n  'F': 15\n}\n\nfunction hexCodeToInt (c, shift) {\n  var i = HEX[c]\n  return i === undefined ? 255 : i << shift\n}\n\nmodule.exports = decodeURIComponent\n",
  "\"use strict\";\n\nconst fastDecode = require(\"fast-decode-uri-component\");\n\nconst plusRegex = /\\+/g;\nconst Empty = function () {};\nEmpty.prototype = Object.create(null);\n\n/**\n * @callback parse\n * @param {string} input\n */\nfunction parse(input) {\n  // Optimization: Use new Empty() instead of Object.create(null) for performance\n  // v8 has a better optimization for initializing functions compared to Object\n  const result = new Empty();\n\n  if (typeof input !== \"string\") {\n    return result;\n  }\n\n  let inputLength = input.length;\n  let key = \"\";\n  let value = \"\";\n  let startingIndex = -1;\n  let equalityIndex = -1;\n  let shouldDecodeKey = false;\n  let shouldDecodeValue = false;\n  let keyHasPlus = false;\n  let valueHasPlus = false;\n  let hasBothKeyValuePair = false;\n  let c = 0;\n\n  // Have a boundary of input.length + 1 to access last pair inside the loop.\n  for (let i = 0; i < inputLength + 1; i++) {\n    c = i !== inputLength ? input.charCodeAt(i) : 38;\n\n    // Handle '&' and end of line to pass the current values to result\n    if (c === 38) {\n      hasBothKeyValuePair = equalityIndex > startingIndex;\n\n      // Optimization: Reuse equality index to store the end of key\n      if (!hasBothKeyValuePair) {\n        equalityIndex = i;\n      }\n\n      key = input.slice(startingIndex + 1, equalityIndex);\n\n      // Add key/value pair only if the range size is greater than 1; a.k.a. contains at least \"=\"\n      if (hasBothKeyValuePair || key.length > 0) {\n        // Optimization: Replace '+' with space\n        if (keyHasPlus) {\n          key = key.replace(plusRegex, \" \");\n        }\n\n        // Optimization: Do not decode if it's not necessary.\n        if (shouldDecodeKey) {\n          key = fastDecode(key) || key;\n        }\n\n        if (hasBothKeyValuePair) {\n          value = input.slice(equalityIndex + 1, i);\n\n          if (valueHasPlus) {\n            value = value.replace(plusRegex, \" \");\n          }\n\n          if (shouldDecodeValue) {\n            value = fastDecode(value) || value;\n          }\n        }\n        const currentValue = result[key];\n\n        if (currentValue === undefined) {\n          result[key] = value;\n        } else {\n          // Optimization: value.pop is faster than Array.isArray(value)\n          if (currentValue.pop) {\n            currentValue.push(value);\n          } else {\n            result[key] = [currentValue, value];\n          }\n        }\n      }\n\n      // Reset reading key value pairs\n      value = \"\";\n      startingIndex = i;\n      equalityIndex = i;\n      shouldDecodeKey = false;\n      shouldDecodeValue = false;\n      keyHasPlus = false;\n      valueHasPlus = false;\n    }\n    // Check '='\n    else if (c === 61) {\n      if (equalityIndex <= startingIndex) {\n        equalityIndex = i;\n      }\n      // If '=' character occurs again, we should decode the input.\n      else {\n        shouldDecodeValue = true;\n      }\n    }\n    // Check '+', and remember to replace it with empty space.\n    else if (c === 43) {\n      if (equalityIndex > startingIndex) {\n        valueHasPlus = true;\n      } else {\n        keyHasPlus = true;\n      }\n    }\n    // Check '%' character for encoding\n    else if (c === 37) {\n      if (equalityIndex > startingIndex) {\n        shouldDecodeValue = true;\n      } else {\n        shouldDecodeKey = true;\n      }\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = parse;\n",
  "// This file is taken from Node.js project.\n// Full implementation can be found from https://github.com/nodejs/node/blob/main/lib/internal/querystring.js\n\nconst hexTable = Array.from(\n  { length: 256 },\n  (_, i) => \"%\" + ((i < 16 ? \"0\" : \"\") + i.toString(16)).toUpperCase(),\n);\n\n// These characters do not need escaping when generating query strings:\n// ! - . _ ~\n// ' ( ) *\n// digits\n// alpha (uppercase)\n// alpha (lowercase)\n// rome-ignore format: the array should not be formatted\nconst noEscape = new Int8Array([\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 0 - 15\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, // 16 - 31\n  0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, // 32 - 47\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, // 48 - 63\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 64 - 79\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, // 80 - 95\n  0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // 96 - 111\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, // 112 - 127\n]);\n\n/**\n * @param {string} str\n * @returns {string}\n */\nfunction encodeString(str) {\n  const len = str.length;\n  if (len === 0) return \"\";\n\n  let out = \"\";\n  let lastPos = 0;\n  let i = 0;\n\n  outer: for (; i < len; i++) {\n    let c = str.charCodeAt(i);\n\n    // ASCII\n    while (c < 0x80) {\n      if (noEscape[c] !== 1) {\n        if (lastPos < i) out += str.slice(lastPos, i);\n        lastPos = i + 1;\n        out += hexTable[c];\n      }\n\n      if (++i === len) break outer;\n\n      c = str.charCodeAt(i);\n    }\n\n    if (lastPos < i) out += str.slice(lastPos, i);\n\n    // Multi-byte characters ...\n    if (c < 0x800) {\n      lastPos = i + 1;\n      out += hexTable[0xc0 | (c >> 6)] + hexTable[0x80 | (c & 0x3f)];\n      continue;\n    }\n    if (c < 0xd800 || c >= 0xe000) {\n      lastPos = i + 1;\n      out +=\n        hexTable[0xe0 | (c >> 12)] +\n        hexTable[0x80 | ((c >> 6) & 0x3f)] +\n        hexTable[0x80 | (c & 0x3f)];\n      continue;\n    }\n    // Surrogate pair\n    ++i;\n\n    // This branch should never happen because all URLSearchParams entries\n    // should already be converted to USVString. But, included for\n    // completion's sake anyway.\n    if (i >= len) {\n      throw new Error(\"URI malformed\");\n    }\n\n    const c2 = str.charCodeAt(i) & 0x3ff;\n\n    lastPos = i + 1;\n    c = 0x10000 + (((c & 0x3ff) << 10) | c2);\n    out +=\n      hexTable[0xf0 | (c >> 18)] +\n      hexTable[0x80 | ((c >> 12) & 0x3f)] +\n      hexTable[0x80 | ((c >> 6) & 0x3f)] +\n      hexTable[0x80 | (c & 0x3f)];\n  }\n  if (lastPos === 0) return str;\n  if (lastPos < len) return out + str.slice(lastPos);\n  return out;\n}\n\nmodule.exports = { encodeString };\n",
  "\"use strict\";\n\nconst { encodeString } = require(\"./internals/querystring\");\n\nfunction getAsPrimitive(value) {\n  const type = typeof value;\n\n  if (type === \"string\") {\n    // Length check is handled inside encodeString function\n    return encodeString(value);\n  } else if (type === \"bigint\") {\n    return value.toString();\n  } else if (type === \"boolean\") {\n    return value ? \"true\" : \"false\";\n  } else if (type === \"number\" && Number.isFinite(value)) {\n    return value < 1e21 ? \"\" + value : encodeString(\"\" + value);\n  }\n\n  return \"\";\n}\n\n/**\n * @param {Record<string, string | number | boolean\n * | ReadonlyArray<string | number | boolean> | null>} input\n * @returns {string}\n */\nfunction stringify(input) {\n  let result = \"\";\n\n  if (input === null || typeof input !== \"object\") {\n    return result;\n  }\n\n  const separator = \"&\";\n  const keys = Object.keys(input);\n  const keyLength = keys.length;\n  let valueLength = 0;\n\n  for (let i = 0; i < keyLength; i++) {\n    const key = keys[i];\n    const value = input[key];\n    const encodedKey = encodeString(key) + \"=\";\n\n    if (i) {\n      result += separator;\n    }\n\n    if (Array.isArray(value)) {\n      valueLength = value.length;\n      for (let j = 0; j < valueLength; j++) {\n        if (j) {\n          result += separator;\n        }\n\n        // Optimization: Dividing into multiple lines improves the performance.\n        // Since v8 does not need to care about the '+' character if it was one-liner.\n        result += encodedKey;\n        result += getAsPrimitive(value[j]);\n      }\n    } else {\n      result += encodedKey;\n      result += getAsPrimitive(value);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = stringify;\n",
  "\"use strict\";\n\nconst parse = require(\"./parse\");\nconst stringify = require(\"./stringify\");\n\nconst fastQuerystring = {\n  parse,\n  stringify,\n};\n\n/**\n * Enable TS and JS support\n *\n * - `const qs = require('fast-querystring')`\n * - `import qs from 'fast-querystring'`\n */\nmodule.exports = fastQuerystring;\nmodule.exports.default = fastQuerystring;\nmodule.exports.parse = parse;\nmodule.exports.stringify = stringify;\n",
  "// @bun\nvar F=(b,T)=>({part:b,store:null,inert:T!==void 0?new Map(T.map((k)=>[k.part.charCodeAt(0),k])):null,params:null,wildcardStore:null}),K=(b,T)=>({...b,part:T}),O=(b)=>({paramName:b,store:null,inert:null});class G{root={};history=[];static regex={static:/:.+?(?=\\/|$)/,params:/:.+?(?=\\/|$)/g};add(b,T,k){if(typeof T!==\"string\")throw new TypeError(\"Route path must be a string\");if(T===\"\")T=\"/\";else if(T[0]!==\"/\")T=`/${T}`;this.history.push([b,T,k]);const E=T[T.length-1]===\"*\";if(E)T=T.slice(0,-1);const A=T.split(G.regex.static),z=T.match(G.regex.params)||[];if(A[A.length-1]===\"\")A.pop();let f;if(!this.root[b])f=this.root[b]=F(\"/\");else f=this.root[b];let v=0;for(let B=0;B<A.length;++B){let y=A[B];if(B>0){const q=z[v++].slice(1);if(f.params===null)f.params=O(q);else if(f.params.paramName!==q)throw new Error(`Cannot create route \"${T}\" with parameter \"${q}\" `+\"because a route already exists with a different parameter name \"+`(\"${f.params.paramName}\") in the same location`);const D=f.params;if(D.inert===null){f=D.inert=F(y);continue}f=D.inert}for(let q=0;;){if(q===y.length){if(q<f.part.length){const D=K(f,f.part.slice(q));Object.assign(f,F(y,[D]))}break}if(q===f.part.length){if(f.inert===null)f.inert=new Map;else if(f.inert.has(y.charCodeAt(q))){f=f.inert.get(y.charCodeAt(q)),y=y.slice(q),q=0;continue}const D=F(y.slice(q));f.inert.set(y.charCodeAt(q),D),f=D;break}if(y[q]!==f.part[q]){const D=K(f,f.part.slice(q)),J=F(y.slice(q));Object.assign(f,F(f.part.slice(0,q),[D,J])),f=J;break}++q}}if(v<z.length){const y=z[v].slice(1);if(f.params===null)f.params=O(y);else if(f.params.paramName!==y)throw new Error(`Cannot create route \"${T}\" with parameter \"${y}\" `+\"because a route already exists with a different parameter name \"+`(\"${f.params.paramName}\") in the same location`);if(f.params.store===null)f.params.store=k;return f.params.store}if(E){if(f.wildcardStore===null)f.wildcardStore=k;return f.wildcardStore}if(f.store===null)f.store=k;return f.store}find(b,T){const k=this.root[b];if(!k)return null;return H(T,T.length,k,0)}}var H=(b,T,k,E)=>{const A=k?.part,z=E+A.length;if(A.length>1){if(z>T)return null;if(A.length<15){for(let f=1,v=E+1;f<A.length;++f,++v)if(A.charCodeAt(f)!==b.charCodeAt(v))return null}else if(b.substring(E,z)!==A)return null}if(z===T){if(k.store!==null)return{store:k.store,params:{}};if(k.wildcardStore!==null)return{store:k.wildcardStore,params:{\"*\":\"\"}};return null}if(k.inert!==null){const f=k.inert.get(b.charCodeAt(z));if(f!==void 0){const v=H(b,T,f,z);if(v!==null)return v}}if(k.params!==null){const f=k.params,v=b.indexOf(\"/\",z);if(v!==z){if(v===-1||v>=T){if(f.store!==null){const B={};return B[f.paramName]=b.substring(z,T),{store:f.store,params:B}}}else if(f.inert!==null){const B=H(b,T,f.inert,v);if(B!==null)return B.params[f.paramName]=b.substring(z,v),B}}}if(k.wildcardStore!==null)return{store:k.wildcardStore,params:{\"*\":b.substring(z,T)}};return null},S=G;export{S as default,G as Memoirist};\n\n//# debugId=9F5E991AE891E51664756e2164756e21\n",
  "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n",
  "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n",
  "import type {\n\tTraceHandler,\n\tTraceProcess,\n\tTraceReporter,\n\tTraceStream\n} from './types'\n\nconst resolver = <T>() => {\n\tlet resolve: (a: T) => any\n\tconst promise = new Promise<T>((r) => {\n\t\tresolve = r\n\t})\n\n\treturn [promise, resolve!] as const\n}\n\ntype TraceResolver = [\n\tstart: (value: TraceProcess<'begin'>) => any,\n\tend: (value: TraceProcess<'end'>) => any\n]\n\nconst createSignal = () => {\n\tconst [start, resolveStart] = resolver<TraceProcess<'begin'>>()\n\tconst [end, resolveEnd] = resolver<TraceProcess<'end'>>()\n\n\tconst children: Promise<TraceProcess<'begin'>>[] = []\n\tconst resolvers: TraceResolver[] = []\n\n\treturn {\n\t\tsignal: start,\n\t\tconsume: (trace: TraceStream) => {\n\t\t\tswitch (trace.type) {\n\t\t\t\tcase 'begin':\n\t\t\t\t\tif (trace.unit && children.length === 0)\n\t\t\t\t\t\tfor (let i = 0; i < trace.unit; i++) {\n\t\t\t\t\t\t\tconst [start, resolveStart] =\n\t\t\t\t\t\t\t\tresolver<TraceProcess<'begin'>>()\n\t\t\t\t\t\t\tconst [end, resolveEnd] =\n\t\t\t\t\t\t\t\tresolver<TraceProcess<'end'>>()\n\n\t\t\t\t\t\t\tchildren.push(start)\n\t\t\t\t\t\t\tresolvers.push([\n\t\t\t\t\t\t\t\t(trace) => {\n\t\t\t\t\t\t\t\t\tresolveStart({\n\t\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t\t\tend,\n\t\t\t\t\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t(time) => {\n\t\t\t\t\t\t\t\t\tresolveEnd(time)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\n\t\t\t\t\tresolveStart({\n\t\t\t\t\t\tchildren,\n\t\t\t\t\t\tend,\n\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t})\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'end':\n\t\t\t\t\tresolveEnd(trace.time)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t},\n\t\tconsumeChild(trace: TraceStream) {\n\t\t\tswitch (trace.type) {\n\t\t\t\tcase 'begin':\n\t\t\t\t\tif (!resolvers[0]) return\n\t\t\t\t\tconst [resolveStart] = resolvers[0]\n\n\t\t\t\t\tresolveStart({\n\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\tend,\n\t\t\t\t\t\tname: trace.name ?? '',\n\t\t\t\t\t\tskip: false,\n\t\t\t\t\t\ttime: trace.time\n\t\t\t\t\t})\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'end':\n\t\t\t\t\tconst child = resolvers.shift()\n\t\t\t\t\tif (!child) return\n\n\t\t\t\t\tchild[1](trace.time)\n\t\t\t}\n\t\t},\n\t\tresolve() {\n\t\t\tresolveStart({\n\t\t\t\tchildren: [],\n\t\t\t\tend: new Promise((resolve) => resolve(0)),\n\t\t\t\tname: '',\n\t\t\t\tskip: true,\n\t\t\t\ttime: 0\n\t\t\t})\n\n\t\t\tfor (const [resolveStart, resolveEnd] of resolvers) {\n\t\t\t\tresolveStart({\n\t\t\t\t\tchildren: [],\n\t\t\t\t\tend: new Promise((resolve) => resolve(0)),\n\t\t\t\t\tname: '',\n\t\t\t\t\tskip: true,\n\t\t\t\t\ttime: 0\n\t\t\t\t})\n\n\t\t\t\tresolveEnd(0)\n\t\t\t}\n\n\t\t\tresolveEnd(0)\n\t\t}\n\t}\n}\n\nexport const createTraceListener = (\n\tgetReporter: () => TraceReporter,\n\ttotalListener: number,\n\thandler: TraceHandler<any, any>\n) => {\n\treturn async function trace(trace: TraceStream) {\n\t\tif (trace.event !== 'request' || trace.type !== 'begin') return\n\n\t\tconst id = trace.id\n\t\tconst reporter = getReporter()\n\n\t\tconst request = createSignal()\n\t\tconst parse = createSignal()\n\t\tconst transform = createSignal()\n\t\tconst beforeHandle = createSignal()\n\t\tconst handle = createSignal()\n\t\tconst afterHandle = createSignal()\n\t\tconst error = createSignal()\n\t\tconst response = createSignal()\n\n\t\trequest.consume(trace)\n\n\t\tconst reducer = (event: TraceStream) => {\n\t\t\tif (event.id === id)\n\t\t\t\tswitch (event.event) {\n\t\t\t\t\tcase 'request':\n\t\t\t\t\t\trequest.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'request.unit':\n\t\t\t\t\t\trequest.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'parse':\n\t\t\t\t\t\tparse.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'parse.unit':\n\t\t\t\t\t\tparse.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'transform':\n\t\t\t\t\t\ttransform.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'transform.unit':\n\t\t\t\t\t\ttransform.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'beforeHandle':\n\t\t\t\t\t\tbeforeHandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'beforeHandle.unit':\n\t\t\t\t\t\tbeforeHandle.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'handle':\n\t\t\t\t\t\thandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'afterHandle':\n\t\t\t\t\t\tafterHandle.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'afterHandle.unit':\n\t\t\t\t\t\tafterHandle.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\terror.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'error.unit':\n\t\t\t\t\t\terror.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\tif (event.type === 'begin') {\n\t\t\t\t\t\t\trequest.resolve()\n\t\t\t\t\t\t\tparse.resolve()\n\t\t\t\t\t\t\ttransform.resolve()\n\t\t\t\t\t\t\tbeforeHandle.resolve()\n\t\t\t\t\t\t\thandle.resolve()\n\t\t\t\t\t\t\tafterHandle.resolve()\n\t\t\t\t\t\t\terror.resolve()\n\t\t\t\t\t\t} else reporter.off('event', reducer)\n\n\t\t\t\t\t\tresponse.consume(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'response.unit':\n\t\t\t\t\t\tresponse.consumeChild(event)\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'exit':\n\t\t\t\t\t\trequest.resolve()\n\t\t\t\t\t\tparse.resolve()\n\t\t\t\t\t\ttransform.resolve()\n\t\t\t\t\t\tbeforeHandle.resolve()\n\t\t\t\t\t\thandle.resolve()\n\t\t\t\t\t\tafterHandle.resolve()\n\t\t\t\t\t\terror.resolve()\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t}\n\n\t\treporter.on('event', reducer)\n\n\t\tawait handler({\n\t\t\tid,\n\t\t\t// @ts-ignore\n\t\t\tcontext: trace.ctx,\n\t\t\t// @ts-ignore\n\t\t\tset: trace.ctx?.set,\n\t\t\t// @ts-ignore\n\t\t\tstore: trace.ctx?.store,\n\t\t\ttime: trace.time,\n\t\t\trequest: request.signal as any,\n\t\t\tparse: parse.signal as any,\n\t\t\ttransform: transform.signal as any,\n\t\t\tbeforeHandle: beforeHandle.signal as any,\n\t\t\thandle: handle.signal as any,\n\t\t\tafterHandle: afterHandle.signal as any,\n\t\t\terror: error.signal,\n\t\t\tresponse: response.signal as any\n\t\t})\n\n\t\treporter.emit(`res${id}.${totalListener}`, undefined)\n\t}\n}\n",
  "import { Value } from '@sinclair/typebox/value'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\nimport { TSchema } from '@sinclair/typebox'\n\nimport { StatusMap } from './utils'\n\n// ? Cloudflare worker support\nconst env =\n\ttypeof Bun !== 'undefined'\n\t\t? Bun.env\n\t\t: typeof process !== 'undefined'\n\t\t  ? process?.env\n\t\t  : undefined\n\nexport const ERROR_CODE = Symbol('ElysiaErrorCode')\nexport const ELYSIA_RESPONSE = Symbol('ElysiaResponse')\n\nexport const isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production'\n\nexport type ElysiaErrors =\n\t| InternalServerError\n\t| NotFoundError\n\t| ParseError\n\t| ValidationError\n\t| InvalidCookieSignature\n\n\nexport const error = <\n\tconst Code extends number | keyof typeof StatusMap,\n\tconst T\n>(\n\tcode: Code,\n\tresponse: T\n): {\n\t[ELYSIA_RESPONSE]: Code extends keyof typeof StatusMap\n\t\t? (typeof StatusMap)[Code]\n\t\t: Code\n\tresponse: T\n} =>\n\t({\n\t\t// @ts-ignore\n\t\t[ELYSIA_RESPONSE]: StatusMap[code] ?? code,\n\t\tresponse\n\t}) as const\n\nexport class InternalServerError extends Error {\n\tcode = 'INTERNAL_SERVER_ERROR'\n\tstatus = 500\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'INTERNAL_SERVER_ERROR')\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tcode = 'NOT_FOUND'\n\tstatus = 404\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'NOT_FOUND')\n\t}\n}\n\nexport class ParseError extends Error {\n\tcode = 'PARSE'\n\tstatus = 400\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'PARSE')\n\t}\n}\n\nexport class InvalidCookieSignature extends Error {\n\tcode = 'INVALID_COOKIE_SIGNATURE'\n\tstatus = 400\n\n\tconstructor(\n\t\tpublic key: string,\n\t\tmessage?: string\n\t) {\n\t\tsuper(message ?? `\"${key}\" has invalid cookie signature`)\n\t}\n}\n\nexport class ValidationError extends Error {\n\tcode = 'VALIDATION'\n\tstatus = 400\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic validator: TSchema | TypeCheck<any>,\n\t\tpublic value: unknown\n\t) {\n\t\tconst error = isProduction\n\t\t\t? undefined\n\t\t\t: 'Errors' in validator\n\t\t\t? validator.Errors(value).First()\n\t\t\t: Value.Errors(validator, value).First()\n\n\t\tconst customError = error?.schema.error\n\t\t\t? typeof error.schema.error === 'function'\n\t\t\t\t? error.schema.error(type, validator, value)\n\t\t\t\t: error.schema.error\n\t\t\t: undefined\n\n\t\tconst accessor = error?.path?.slice(1) || 'root'\n\t\tlet message = ''\n\n\t\tif (customError) {\n\t\t\tmessage =\n\t\t\t\ttypeof customError === 'object'\n\t\t\t\t\t? JSON.stringify(customError)\n\t\t\t\t\t: customError + ''\n\t\t} else if (isProduction) {\n\t\t\tmessage = JSON.stringify({\n\t\t\t\ttype,\n\t\t\t\tmessage: error?.message\n\t\t\t})\n\t\t} else {\n\t\t\tmessage = JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\ttype,\n\t\t\t\t\tat: accessor,\n\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\texpected: Value.Create(\n\t\t\t\t\t\t// @ts-ignore private field\n\t\t\t\t\t\tvalidator.schema\n\t\t\t\t\t),\n\t\t\t\t\tfound: value,\n\t\t\t\t\terrors: [...validator.Errors(value)]\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t2\n\t\t\t)\n\t\t}\n\n\t\tsuper(message)\n\n\t\tObject.setPrototypeOf(this, ValidationError.prototype)\n\t}\n\n\tget all() {\n\t\treturn [...this.validator.Errors(this.value)]\n\t}\n\n\tstatic simplifyModel(validator: TSchema | TypeCheck<any>) {\n\t\t// @ts-ignore\n\t\tconst model = 'schema' in validator ? validator.schema : validator\n\n\t\ttry {\n\t\t\treturn Value.Create(model)\n\t\t} catch {\n\t\t\treturn model\n\t\t}\n\t}\n\n\tget model() {\n\t\treturn ValidationError.simplifyModel(this.validator)\n\t}\n\n\ttoResponse(headers?: Record<string, any>) {\n\t\treturn new Response(this.message, {\n\t\t\tstatus: 400,\n\t\t\theaders\n\t\t})\n\t}\n}\n",
  "import { Kind, TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck, TypeCompiler } from '@sinclair/typebox/compiler'\n\nimport { isNotEmpty } from './handler'\n\nimport type {\n\tLifeCycleStore,\n\tLocalHook,\n\tMaybeArray,\n\tInputSchema,\n\tBaseMacro\n} from './types'\n\nconst isObject = (item: any): item is Object =>\n\titem && typeof item === 'object' && !Array.isArray(item)\n\nexport const replaceUrlPath = (url: string, pathname: string) => {\n\tconst urlObject = new URL(url)\n\turlObject.pathname = pathname\n\treturn urlObject.toString()\n}\n\nconst isClass = (v: Object) =>\n\t(typeof v === 'function' && /^\\s*class\\s+/.test(v.toString())) ||\n\t// Handle import * as Sentry from '@sentry/bun'\n\t// This also handle [object Date], [object Array]\n\t// and FFI value like [object Prisma]\n\tv.toString().startsWith('[object ') ||\n\t// If object prototype is not pure, then probably a class-like object\n\tisNotEmpty(Object.getPrototypeOf(v))\n\nexport const mergeDeep = <\n\tconst A extends Record<string, any>,\n\tconst B extends Record<string, any>\n>(\n\ttarget: A,\n\tsource: B,\n\t{\n\t\tskipKeys\n\t}: {\n\t\tskipKeys?: string[]\n\t} = {}\n): A & B => {\n\tif (isObject(target) && isObject(source))\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tif (skipKeys?.includes(key)) continue\n\n\t\t\tif (!isObject(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!(key in target)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (isClass(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttarget[key as keyof typeof target] = mergeDeep(\n\t\t\t\t(target as any)[key] as any,\n\t\t\t\tvalue\n\t\t\t)\n\t\t}\n\n\treturn target as A & B\n}\n\nexport const mergeCookie = <const A extends Object, const B extends Object>(\n\ttarget: A,\n\tsource: B\n): A & B =>\n\tmergeDeep(target, source, {\n\t\tskipKeys: ['properties']\n\t})\n\nexport const mergeObjectArray = <T>(a: T | T[], b: T | T[]): T[] => {\n\tif (!a) return []\n\n\t// ! Must copy to remove side-effect\n\tconst array = [...(Array.isArray(a) ? a : [a])]\n\tconst checksums = []\n\n\tfor (const item of array) {\n\t\t// @ts-ignore\n\t\tif (item.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tchecksums.push(item.$elysiaChecksum)\n\t}\n\n\tfor (const item of Array.isArray(b) ? b : [b]) {\n\t\t// @ts-ignore\n\t\tif (!checksums.includes(item?.$elysiaChecksum)) {\n\t\t\tarray.push(item)\n\t\t}\n\t}\n\n\treturn array\n}\n\nexport const primitiveHooks = [\n\t'start',\n\t'request',\n\t'parse',\n\t'transform',\n\t'resolve',\n\t'beforeHandle',\n\t'afterHandle',\n\t'onResponse',\n\t'mapResponse',\n\t'trace',\n\t'error',\n\t'stop',\n\t'body',\n\t'headers',\n\t'params',\n\t'query',\n\t'response',\n\t'type',\n\t'detail'\n] as const\n\nexport const mergeHook = (\n\ta?: LocalHook<any, any, any, any> | LifeCycleStore,\n\tb?: LocalHook<any, any, any, any>\n): LifeCycleStore => {\n\t// In case if merging union is need\n\t// const customAStore: Record<string, unknown> = {}\n\t// const customBStore: Record<string, unknown> = {}\n\n\t// for (const [key, value] of Object.entries(a)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomAStore[key] = value\n\t// }\n\n\t// for (const [key, value] of Object.entries(b)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomBStore[key] = value\n\t// }\n\n\t// const unioned = Object.keys(customAStore).filter((x) =>\n\t// \tObject.keys(customBStore).includes(x)\n\t// )\n\n\t// // Must provide empty object to prevent reference side-effect\n\t// const customStore = Object.assign({}, customAStore, customBStore)\n\n\t// for (const union of unioned)\n\t// \tcustomStore[union] = mergeObjectArray(\n\t// \t\tcustomAStore[union],\n\t// \t\tcustomBStore[union]\n\t// \t)\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\t// Merge local hook first\n\t\t// @ts-ignore\n\t\tbody: b?.body ?? a?.body,\n\t\t// @ts-ignore\n\t\theaders: b?.headers ?? a?.headers,\n\t\t// @ts-ignore\n\t\tparams: b?.params ?? a?.params,\n\t\t// @ts-ignore\n\t\tquery: b?.query ?? a?.query,\n\t\t// @ts-ignore\n\t\tresponse: b?.response ?? a?.response,\n\t\ttype: a?.type || b?.type,\n\t\tdetail: mergeDeep(\n\t\t\t// @ts-ignore\n\t\t\tb?.detail ?? {},\n\t\t\t// @ts-ignore\n\t\t\ta?.detail ?? {}\n\t\t),\n\t\tparse: mergeObjectArray((a?.parse as any) ?? [], b?.parse ?? []),\n\t\ttransform: mergeObjectArray(\n\t\t\ta?.transform ?? [],\n\t\t\tb?.transform ?? []\n\t\t) as any,\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta?.beforeHandle ?? [],\n\t\t\tb?.beforeHandle ?? []\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta?.afterHandle ?? [],\n\t\t\tb?.afterHandle ?? []\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta?.onResponse ?? [],\n\t\t\tb?.onResponse ?? []\n\t\t) as any,\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta?.mapResponse ?? [],\n\t\t\tb?.mapResponse ?? []\n\t\t) as any,\n\t\ttrace: mergeObjectArray(a?.trace ?? [], b?.trace ?? []) as any,\n\t\terror: mergeObjectArray(a?.error ?? [], b?.error ?? [])\n\t}\n}\n\nexport const getSchemaValidator = (\n\ts: TSchema | string | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n) => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst schema: TSchema = typeof s === 'string' ? models[s] : s\n\n\t// @ts-ignore\n\tif (schema.type === 'object' && 'additionalProperties' in schema === false)\n\t\tschema.additionalProperties = additionalProperties\n\n\tif (dynamic)\n\t\treturn {\n\t\t\tschema,\n\t\t\treferences: '',\n\t\t\tcheckFunc: () => {},\n\t\t\tcode: '',\n\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\tCode: () => ''\n\t\t} as unknown as TypeCheck<TSchema>\n\n\treturn TypeCompiler.Compile(schema, Object.values(models))\n}\n\nexport const getResponseSchemaValidator = (\n\ts: InputSchema['response'] | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n): Record<number, TypeCheck<any>> | undefined => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst maybeSchemaOrRecord = typeof s === 'string' ? models[s] : s\n\n\tconst compile = (schema: TSchema, references?: TSchema[]) => {\n\t\tif (dynamic)\n\t\t\treturn {\n\t\t\t\tschema,\n\t\t\t\treferences: '',\n\t\t\t\tcheckFunc: () => {},\n\t\t\t\tcode: '',\n\t\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\t\tCode: () => ''\n\t\t\t} as unknown as TypeCheck<TSchema>\n\n\t\treturn TypeCompiler.Compile(schema, references)\n\t}\n\n\tif (Kind in maybeSchemaOrRecord) {\n\t\tif ('additionalProperties' in maybeSchemaOrRecord === false)\n\t\t\tmaybeSchemaOrRecord.additionalProperties = additionalProperties\n\n\t\treturn {\n\t\t\t200: compile(maybeSchemaOrRecord, Object.values(models))\n\t\t}\n\t}\n\n\tconst record: Record<number, TypeCheck<any>> = {}\n\n\tObject.keys(maybeSchemaOrRecord).forEach((status): TSchema | undefined => {\n\t\tconst maybeNameOrSchema = maybeSchemaOrRecord[+status]\n\n\t\tif (typeof maybeNameOrSchema === 'string') {\n\t\t\tif (maybeNameOrSchema in models) {\n\t\t\t\tconst schema = models[maybeNameOrSchema]\n\t\t\t\tschema.type === 'object' &&\n\t\t\t\t\t'additionalProperties' in schema === false\n\n\t\t\t\t// Inherits model maybe already compiled\n\t\t\t\trecord[+status] =\n\t\t\t\t\tKind in schema\n\t\t\t\t\t\t? compile(schema, Object.values(models))\n\t\t\t\t\t\t: schema\n\t\t\t}\n\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (\n\t\t\tmaybeNameOrSchema.type === 'object' &&\n\t\t\t'additionalProperties' in maybeNameOrSchema === false\n\t\t)\n\t\t\tmaybeNameOrSchema.additionalProperties = additionalProperties\n\n\t\t// Inherits model maybe already compiled\n\t\trecord[+status] =\n\t\t\tKind in maybeNameOrSchema\n\t\t\t\t? compile(maybeNameOrSchema, Object.values(models))\n\t\t\t\t: maybeNameOrSchema\n\t})\n\n\treturn record\n}\n\nconst isBun = typeof Bun !== 'undefined'\nconst hasHash = isBun && typeof Bun.hash === 'function'\n\n// https://stackoverflow.com/a/52171480\nexport const checksum = (s: string) => {\n\tif (hasHash) return Bun.hash(s) as number\n\n\tlet h = 9\n\n\tfor (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9)\n\n\treturn (h = h ^ (h >>> 9))\n}\n\nexport const mergeLifeCycle = (\n\ta: LifeCycleStore,\n\tb: LifeCycleStore | LocalHook,\n\tchecksum?: number\n): LifeCycleStore => {\n\tconst injectChecksum = <T>(x: T): T => {\n\t\t// @ts-ignore\n\t\tif (checksum && !x.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaChecksum = checksum\n\n\t\treturn x\n\t}\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\tstart: mergeObjectArray(\n\t\t\ta.start as any,\n\t\t\t('start' in b ? b.start ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\trequest: mergeObjectArray(\n\t\t\ta.request as any,\n\t\t\t('request' in b ? b.request ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\tparse: mergeObjectArray(\n\t\t\ta.parse as any,\n\t\t\t'parse' in b ? b?.parse ?? [] : undefined ?? ([] as any)\n\t\t).map(injectChecksum),\n\t\ttransform: mergeObjectArray(\n\t\t\ta.transform as any,\n\t\t\t(b?.transform ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta.beforeHandle as any,\n\t\t\t(b?.beforeHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta.afterHandle as any,\n\t\t\t(b?.afterHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta.mapResponse as any,\n\t\t\t(b?.mapResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta.onResponse as any,\n\t\t\t(b?.onResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\ttrace: a.trace,\n\t\terror: mergeObjectArray(\n\t\t\ta.error as any,\n\t\t\t(b?.error ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tstop: mergeObjectArray(\n\t\t\ta.stop as any,\n\t\t\t('stop' in b ? b.stop ?? [] : ([] as any)).map(injectChecksum)\n\t\t)\n\t}\n}\n\nexport const asGlobalHook = (\n\thook: LocalHook<any, any>,\n\tinject = true\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: asGlobal(hook?.parse, inject),\n\t\ttransform: asGlobal(hook?.transform, inject),\n\t\tbeforeHandle: asGlobal(hook?.beforeHandle, inject),\n\t\tafterHandle: asGlobal(hook?.afterHandle, inject),\n\t\tonResponse: asGlobal(hook?.onResponse, inject),\n\t\terror: asGlobal(hook?.error, inject)\n\t} as LocalHook<any, any>\n}\n\nexport const asGlobal = <T extends MaybeArray<Function> | undefined>(\n\tfn: T,\n\tinject = true\n): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tfn.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse fn.$elysiaHookType = undefined\n\n\t\treturn fn\n\t}\n\n\treturn fn.map((x) => {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse x.$elysiaHookType = undefined\n\n\t\treturn x\n\t}) as T\n}\n\nconst filterGlobal = <T extends MaybeArray<Function> | undefined>(fn: T): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\t// @ts-ignore\n\t\treturn fn.$elysiaHookType === 'global' ? fn : undefined\n\t}\n\n\t// @ts-ignore\n\treturn fn.filter((x) => x.$elysiaHookType === 'global') as T\n}\n\nexport const filterGlobalHook = (\n\thook: LocalHook<any, any>\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: filterGlobal(hook?.parse),\n\t\ttransform: filterGlobal(hook?.transform),\n\t\tbeforeHandle: filterGlobal(hook?.beforeHandle),\n\t\tafterHandle: filterGlobal(hook?.afterHandle),\n\t\tonResponse: filterGlobal(hook?.onResponse),\n\t\terror: filterGlobal(hook?.error)\n\t} as LocalHook<any, any>\n}\n\nexport const StatusMap = {\n\tContinue: 100,\n\t'Switching Protocols': 101,\n\tProcessing: 102,\n\t'Early Hints': 103,\n\tOK: 200,\n\tCreated: 201,\n\tAccepted: 202,\n\t'Non-Authoritative Information': 203,\n\t'No Content': 204,\n\t'Reset Content': 205,\n\t'Partial Content': 206,\n\t'Multi-Status': 207,\n\t'Already Reported': 208,\n\t'Multiple Choices': 300,\n\t'Moved Permanently': 301,\n\tFound: 302,\n\t'See Other': 303,\n\t'Not Modified': 304,\n\t'Temporary Redirect': 307,\n\t'Permanent Redirect': 308,\n\t'Bad Request': 400,\n\tUnauthorized: 401,\n\t'Payment Required': 402,\n\tForbidden: 403,\n\t'Not Found': 404,\n\t'Method Not Allowed': 405,\n\t'Not Acceptable': 406,\n\t'Proxy Authentication Required': 407,\n\t'Request Timeout': 408,\n\tConflict: 409,\n\tGone: 410,\n\t'Length Required': 411,\n\t'Precondition Failed': 412,\n\t'Payload Too Large': 413,\n\t'URI Too Long': 414,\n\t'Unsupported Media Type': 415,\n\t'Range Not Satisfiable': 416,\n\t'Expectation Failed': 417,\n\t\"I'm a teapot\": 418,\n\t'Misdirected Request': 421,\n\t'Unprocessable Content': 422,\n\tLocked: 423,\n\t'Failed Dependency': 424,\n\t'Too Early': 425,\n\t'Upgrade Required': 426,\n\t'Precondition Required': 428,\n\t'Too Many Requests': 429,\n\t'Request Header Fields Too Large': 431,\n\t'Unavailable For Legal Reasons': 451,\n\t'Internal Server Error': 500,\n\t'Not Implemented': 501,\n\t'Bad Gateway': 502,\n\t'Service Unavailable': 503,\n\t'Gateway Timeout': 504,\n\t'HTTP Version Not Supported': 505,\n\t'Variant Also Negotiates': 506,\n\t'Insufficient Storage': 507,\n\t'Loop Detected': 508,\n\t'Not Extended': 510,\n\t'Network Authentication Required': 511\n} as const\n\nexport type HTTPStatusName = keyof typeof StatusMap\n\nexport const signCookie = async (val: string, secret: string | null) => {\n\tif (typeof val !== 'string')\n\t\tthrow new TypeError('Cookie value must be provided as a string.')\n\n\tif (secret === null) throw new TypeError('Secret key must be provided.')\n\n\tconst encoder = new TextEncoder()\n\tconst secretKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tencoder.encode(secret),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t)\n\tconst hmacBuffer = await crypto.subtle.sign(\n\t\t'HMAC',\n\t\tsecretKey,\n\t\tencoder.encode(val)\n\t)\n\n\tconst hmacArray = Array.from(new Uint8Array(hmacBuffer))\n\tconst digest = btoa(String.fromCharCode(...hmacArray))\n\treturn `${val}.${digest.replace(/=+$/, '')}`\n}\n\nexport const unsignCookie = async (input: string, secret: string | null) => {\n\tif (typeof input !== 'string')\n\t\tthrow new TypeError('Signed cookie string must be provided.')\n\n\tif (null === secret) throw new TypeError('Secret key must be provided.')\n\n\tconst tentativeValue = input.slice(0, input.lastIndexOf('.'))\n\tconst expectedInput = await signCookie(tentativeValue, secret)\n\n\treturn expectedInput === input ? tentativeValue : false\n}\n\nexport const traceBackMacro = (\n\textension: BaseMacro,\n\tproperty: Record<string, unknown>,\n\thooks = property\n) => {\n\tfor (const [key, value] of Object.entries(property ?? {})) {\n\t\tif (primitiveHooks.includes(key as any) || !(key in extension)) continue\n\n\t\tif (typeof extension[key] === 'function') {\n\t\t\textension[key](value)\n\t\t} else if (typeof extension[key] === 'object')\n\t\t\ttraceBackMacro(extension[key], value as any, hooks)\n\t}\n}\n\nexport const isNumericString = (message: string) => message.trim().length !== 0 && !Number.isNaN(Number(message))\n",
  "/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned'\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n",
  "// @ts-ignore\nimport { parse } from 'cookie'\nimport type { Context } from './context'\n\nimport { isNumericString, unsignCookie } from './utils'\nimport { InvalidCookieSignature } from './error'\n\nexport interface CookieOptions {\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute}. By default, no\n\t * domain is set, and most clients will consider the cookie to apply to only\n\t * the current domain.\n\t */\n\tdomain?: string | undefined\n\n\t/**\n\t * Specifies the `Date` object to be the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute}. By default,\n\t * no expiration is set, and most clients will consider this a \"non-persistent cookie\" and will delete\n\t * it on a condition like exiting a web browser application.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\texpires?: Date | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute}.\n\t * When truthy, the `HttpOnly` attribute is set, otherwise it is not. By\n\t * default, the `HttpOnly` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to true, as compliant clients will\n\t * not allow client-side JavaScript to see the cookie in `document.cookie`.\n\t */\n\thttpOnly?: boolean | undefined\n\t/**\n\t * Specifies the number (in seconds) to be the value for the `Max-Age`\n\t * `Set-Cookie` attribute. The given number will be converted to an integer\n\t * by rounding down. By default, no maximum age is set.\n\t *\n\t * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}\n\t * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is\n\t * possible not all clients by obey this, so if both are set, they should\n\t * point to the same date and time.\n\t */\n\tmaxAge?: number | undefined\n\t/**\n\t * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.\n\t * By default, the path is considered the \"default path\".\n\t */\n\tpath?: string | undefined\n\t/**\n\t * Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * - `'low'` will set the `Priority` attribute to `Low`.\n\t * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.\n\t * - `'high'` will set the `Priority` attribute to `High`.\n\t *\n\t * More information about the different priority levels can be found in\n\t * [the specification][rfc-west-cookie-priority-00-4.1].\n\t *\n\t * **note** This is an attribute that has not yet been fully standardized, and may change in the future.\n\t * This also means many clients may ignore this attribute until they understand it.\n\t */\n\tpriority?: 'low' | 'medium' | 'high' | undefined\n\t/**\n\t * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.\n\t *\n\t * - `true` will set the `SameSite` attribute to `Strict` for strict same\n\t * site enforcement.\n\t * - `false` will not set the `SameSite` attribute.\n\t * - `'lax'` will set the `SameSite` attribute to Lax for lax same site\n\t * enforcement.\n\t * - `'strict'` will set the `SameSite` attribute to Strict for strict same\n\t * site enforcement.\n\t *  - `'none'` will set the SameSite attribute to None for an explicit\n\t *  cross-site cookie.\n\t *\n\t * More information about the different enforcement levels can be found in {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification}.\n\t *\n\t * *note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.\n\t */\n\tsameSite?: true | false | 'lax' | 'strict' | 'none' | undefined\n\t/**\n\t * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}. When truthy, the\n\t * `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.\n\t *\n\t * *Note* be careful when setting this to `true`, as compliant clients will\n\t * not send the cookie back to the server in the future if the browser does\n\t * not have an HTTPS connection.\n\t */\n\tsecure?: boolean | undefined\n\n\t/**\n\t * Secret key for signing cookie\n\t *\n\t * If array is passed, will use Key Rotation.\n\t *\n\t * Key rotation is when an encryption key is retired\n\t * and replaced by generating a new cryptographic key.\n\t */\n\tsecrets?: string | string[]\n}\n\ntype MutateCookie<T = unknown> = CookieOptions & {\n\tvalue?: T\n} extends infer A\n\t? A | ((previous: A) => A)\n\t: never\n\ntype CookieJar = Record<string, Cookie>\n\nexport class Cookie<T = unknown> implements CookieOptions {\n\tpublic name: string | undefined\n\tprivate setter: Context['set'] | undefined\n\n\tconstructor(\n\t\tprivate _value: T,\n\t\tpublic property: Readonly<CookieOptions> = {}\n\t) {}\n\n\tget() {\n\t\treturn this._value\n\t}\n\n\tget value(): T {\n\t\treturn this._value as any\n\t}\n\n\tset value(value: T) {\n\t\tif (typeof value === 'object') {\n\t\t\tif (JSON.stringify(this.value) === JSON.stringify(value)) return\n\t\t} else if (this.value === value) return\n\n\t\tthis._value = value as any\n\n\t\tthis.sync()\n\t}\n\n\tadd<T>(config: MutateCookie<T>): Cookie<T> {\n\t\tconst updated = Object.assign(\n\t\t\tthis.property,\n\t\t\ttypeof config === 'function'\n\t\t\t\t? config(Object.assign(this.property, this.value) as any)\n\t\t\t\t: config\n\t\t)\n\n\t\tif ('value' in updated) {\n\t\t\tthis._value = updated.value as any\n\n\t\t\tdelete updated.value\n\t\t}\n\n\t\tthis.property = updated\n\t\treturn this.sync() as any\n\t}\n\n\tset<T>(config: MutateCookie): Cookie<T> {\n\t\tconst updated =\n\t\t\ttypeof config === 'function'\n\t\t\t\t? config(Object.assign(this.property, this.value) as any)\n\t\t\t\t: config\n\n\t\tif ('value' in updated) {\n\t\t\tthis._value = updated.value as any\n\n\t\t\tdelete updated.value\n\t\t}\n\n\t\tthis.property = updated\n\t\treturn this.sync() as any\n\t}\n\n\tremove(\n\t\toptions?: Pick<CookieOptions, 'domain' | 'path' | 'sameSite' | 'secure'>\n\t) {\n\t\tif (this.value === undefined) return\n\n\t\tthis.set({\n\t\t\tdomain: options?.domain,\n\t\t\texpires: new Date(0),\n\t\t\tmaxAge: 0,\n\t\t\tpath: options?.path,\n\t\t\tsameSite: options?.sameSite,\n\t\t\tsecure: options?.secure,\n\t\t\tvalue: '' as any\n\t\t})\n\t}\n\n\tget domain() {\n\t\treturn this.property.domain\n\t}\n\n\tset domain(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.domain === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.domain = value\n\n\t\tthis.sync()\n\t}\n\n\tget expires() {\n\t\treturn this.property.expires\n\t}\n\n\tset expires(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.expires?.getTime() === value?.getTime()) return\n\n\t\t// @ts-ignore\n\t\tthis.property.expires = value\n\n\t\tthis.sync()\n\t}\n\n\tget httpOnly() {\n\t\treturn this.property.httpOnly\n\t}\n\n\tset httpOnly(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.domain === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.httpOnly = value\n\n\t\tthis.sync()\n\t}\n\n\tget maxAge() {\n\t\treturn this.property.maxAge\n\t}\n\n\tset maxAge(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.maxAge === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.maxAge = value\n\n\t\tthis.sync()\n\t}\n\n\tget path() {\n\t\treturn this.property.path\n\t}\n\n\tset path(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.path === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.path = value\n\n\t\tthis.sync()\n\t}\n\n\tget priority() {\n\t\treturn this.property.priority\n\t}\n\n\tset priority(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.priority === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.priority = value\n\n\t\tthis.sync()\n\t}\n\n\tget sameSite() {\n\t\treturn this.property.sameSite\n\t}\n\n\tset sameSite(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.sameSite === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.sameSite = value\n\n\t\tthis.sync()\n\t}\n\n\tget secure() {\n\t\treturn this.property.secure\n\t}\n\n\tset secure(value) {\n\t\t// @ts-ignore\n\t\tif (this.property.secure === value) return\n\n\t\t// @ts-ignore\n\t\tthis.property.secure = value\n\n\t\tthis.sync()\n\t}\n\n\ttoString() {\n\t\treturn typeof this.value === 'object'\n\t\t\t? JSON.stringify(this.value)\n\t\t\t: this.value?.toString() ?? ''\n\t}\n\n\tprivate sync() {\n\t\tif (!this.name || !this.setter) return this\n\n\t\tif (!this.setter.cookie)\n\t\t\tthis.setter.cookie = {\n\t\t\t\t[this.name]: Object.assign(this.property, {\n\t\t\t\t\tvalue: this.toString()\n\t\t\t\t})\n\t\t\t}\n\t\telse\n\t\t\tthis.setter.cookie[this.name] = Object.assign(this.property, {\n\t\t\t\tvalue: this.toString()\n\t\t\t})\n\n\t\treturn this\n\t}\n}\n\nexport const createCookieJar = (\n\tinitial: CookieJar,\n\tset: Context['set'],\n\tproperties?: CookieOptions\n) =>\n\tnew Proxy(initial as CookieJar, {\n\t\tget(target, key: string) {\n\t\t\tif (key in target) return target[key]\n\n\t\t\t// @ts-ignore\n\t\t\tconst cookie = new Cookie(\n\t\t\t\tundefined,\n\t\t\t\tproperties ? { ...properties } : undefined\n\t\t\t)\n\t\t\t// @ts-ignore\n\t\t\tcookie.setter = set\n\t\t\tcookie.name = key\n\n\t\t\t// @ts-ignore\n\t\t\treturn cookie\n\t\t},\n\t\tset(target, key: string, value) {\n\t\t\tif (!(value instanceof Cookie)) return false\n\n\t\t\tif (!set.cookie) set.cookie = {}\n\n\t\t\t// @ts-ignore\n\t\t\tvalue.setter = set\n\t\t\tvalue.name = key\n\n\t\t\t// @ts-ignore\n\t\t\tvalue.sync()\n\n\t\t\ttarget[key] = value\n\n\t\t\treturn true\n\t\t}\n\t})\n\nexport const parseCookie = async (\n\tset: Context['set'],\n\tcookieString?: string | null,\n\t{\n\t\tsecret,\n\t\tsign,\n\t\t...properties\n\t}: CookieOptions & {\n\t\tsecret?: string | string[]\n\t\tsign?: true | string | string[]\n\t} = {}\n) => {\n\tif (!cookieString) return createCookieJar({}, set, properties)\n\n\tconst jar: CookieJar = {}\n\tconst isStringKey = typeof secret === 'string'\n\n\tif (sign && sign !== true && !Array.isArray(sign)) sign = [sign]\n\n\tconst cookieKeys = Object.keys(parse(cookieString))\n\tfor (let i = 0; i < cookieKeys.length; i++) {\n\t\tconst key = cookieKeys[i]\n\t\tlet value = parse(cookieString)[key]\n\n\t\tif (sign === true || sign?.includes(key)) {\n\t\t\tif (!secret)\n\t\t\t\tthrow new Error('No secret is provided to cookie plugin')\n\n\t\t\tif (isStringKey) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tvalue = await unsignCookie(value as string, secret)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (value === false) throw new InvalidCookieSignature(key)\n\t\t\t} else {\n\t\t\t\tlet fail = true\n\t\t\t\tfor (let i = 0; i < secret.length; i++) {\n\t\t\t\t\tconst temp = await unsignCookie(value as string, secret[i])\n\n\t\t\t\t\tif (temp !== false) {\n\t\t\t\t\t\tvalue = temp\n\t\t\t\t\t\tfail = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (fail) throw new InvalidCookieSignature(key)\n\t\t\t}\n\t\t}\n\n\t\tif (value === undefined) continue\n\n\t\tconst start = (value as string).charCodeAt(0)\n\t\tif (start === 123 || start === 91)\n\t\t\ttry {\n\t\t\t\tconst cookie = new Cookie(JSON.parse(value as string))\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tcookie.setter = set\n\t\t\t\tcookie.name = key\n\n\t\t\t\tjar[key] = cookie\n\n\t\t\t\tcontinue\n\t\t\t} catch {\n\t\t\t\t// Not empty\n\t\t\t}\n\n\t\t// @ts-ignore\n\t\tif (isNumericString(value)) value = +value\n\t\t// @ts-ignore\n\t\telse if (value === 'true') value = true\n\t\t// @ts-ignore\n\t\telse if (value === 'false') value = false\n\n\t\tconst cookie = new Cookie(value, properties)\n\n\t\t// @ts-ignore\n\t\tcookie.setter = set\n\t\tcookie.name = key\n\n\t\tjar[key] = cookie\n\t}\n\n\treturn createCookieJar(jar, set)\n}\n",
  "// @ts-ignore\nimport { serialize } from 'cookie'\nimport { StatusMap } from './utils'\n\nimport type { Context } from './context'\nimport { Cookie } from './cookie'\nimport { ELYSIA_RESPONSE } from './error'\n\nconst hasHeaderShorthand = 'toJSON' in new Headers()\n\ntype SetResponse = Omit<Context['set'], 'status'> & {\n\tstatus: number\n}\n\nexport const isNotEmpty = (obj: Object) => {\n\tfor (const x in obj) return true\n\n\treturn false\n}\n\nconst handleFile = (response: File | Blob, set?: Context['set']) => {\n\tconst size = response.size\n\n\tif (\n\t\t(size &&\n\t\t\tset &&\n\t\t\tset.status !== 206 &&\n\t\t\tset.status !== 304 &&\n\t\t\tset.status !== 412 &&\n\t\t\tset.status !== 416) ||\n\t\t(!set && size)\n\t) {\n\t\tif (set) {\n\t\t\tif (set.headers instanceof Headers)\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\tset.headers = (set.headers as unknown as Headers).toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of set.headers.entries())\n\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\treturn new Response(response as Blob, {\n\t\t\t\tstatus: set.status as number,\n\t\t\t\theaders: Object.assign(\n\t\t\t\t\t{\n\t\t\t\t\t\t'accept-ranges': 'bytes',\n\t\t\t\t\t\t'content-range': `bytes 0-${size - 1}/${size}`\n\t\t\t\t\t},\n\t\t\t\t\tset.headers\n\t\t\t\t)\n\t\t\t})\n\t\t}\n\n\t\treturn new Response(response as Blob, {\n\t\t\theaders: {\n\t\t\t\t'accept-ranges': 'bytes',\n\t\t\t\t'content-range': `bytes 0-${size - 1}/${size}`\n\t\t\t}\n\t\t})\n\t}\n\n\treturn new Response(response as Blob)\n}\n\nexport const parseSetCookies = (headers: Headers, setCookie: string[]) => {\n\tif (!headers || !Array.isArray(setCookie)) return headers\n\n\theaders.delete('Set-Cookie')\n\n\tfor (let i = 0; i < setCookie.length; i++) {\n\t\tconst index = setCookie[i].indexOf('=')\n\n\t\theaders.append(\n\t\t\t'Set-Cookie',\n\t\t\t`${setCookie[i].slice(0, index)}=${setCookie[i].slice(index + 1)}`\n\t\t)\n\t}\n\n\treturn headers\n}\n\nexport const cookieToHeader = (cookies: Context['set']['cookie']) => {\n\tif (!cookies || typeof cookies !== 'object' || !isNotEmpty(cookies))\n\t\treturn undefined\n\n\tconst set: string[] = []\n\n\tfor (const [key, property] of Object.entries(cookies)) {\n\t\tif (!key || !property) continue\n\n\t\tif (Array.isArray(property.value)) {\n\t\t\tfor (let i = 0; i < property.value.length; i++) {\n\t\t\t\tlet value = property.value[i]\n\t\t\t\tif (value === undefined || value === null) continue\n\n\t\t\t\tif (typeof value === 'object') value = JSON.stringify(value)\n\n\t\t\t\tset.push(serialize(key, value, property))\n\t\t\t}\n\t\t} else {\n\t\t\tlet value = property.value\n\t\t\tif (value === undefined || value === null) continue\n\n\t\t\tif (typeof value === 'object') value = JSON.stringify(value)\n\n\t\t\tset.push(serialize(key, property.value, property))\n\t\t}\n\t}\n\n\tif (set.length === 0) return undefined\n\tif (set.length === 1) return set[0]\n\n\treturn set\n}\n\nexport const mapResponse = (\n\tresponse: unknown,\n\tset: Context['set']\n): Response => {\n\t// @ts-ignore\n\tif (response?.[response.$passthrough])\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE]) {\n\t\t// @ts-ignore\n\t\tset.status = response[ELYSIA_RESPONSE]\n\t\t// @ts-ignore\n\t\tresponse = response.response\n\t}\n\n\tif (\n\t\tisNotEmpty(set.headers) ||\n\t\tset.status !== 200 ||\n\t\tset.redirect ||\n\t\tset.cookie\n\t) {\n\t\tif (typeof set.status === 'string') set.status = StatusMap[set.status]\n\n\t\tif (set.redirect) {\n\t\t\tset.headers.Location = set.redirect\n\t\t\tif (!set.status || set.status < 300 || set.status >= 400)\n\t\t\t\tset.status = 302\n\t\t}\n\n\t\tif (set.cookie && isNotEmpty(set.cookie))\n\t\t\tset.headers['Set-Cookie'] = cookieToHeader(set.cookie)\n\n\t\tif (\n\t\t\tset.headers['Set-Cookie'] &&\n\t\t\tArray.isArray(set.headers['Set-Cookie'])\n\t\t)\n\t\t\tset.headers = parseSetCookies(\n\t\t\t\tnew Headers(set.headers) as Headers,\n\t\t\t\tset.headers['Set-Cookie']\n\t\t\t) as any\n\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string, set as SetResponse)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\tif (\n\t\t\t\t\t!set.headers['content-type']?.startsWith(\n\t\t\t\t\t\t'text/event-stream'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tset.headers['content-type'] =\n\t\t\t\t\t\t'text/event-stream; charset=utf-8'\n\n\t\t\t\treturn new Response(\n\t\t\t\t\tresponse as ReadableStream,\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('', set as SetResponse)\n\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'Response':\n\t\t\t\tconst inherits = { ...set.headers }\n\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\tset.headers = (\n\t\t\t\t\t\t(response as Response).headers as Headers\n\t\t\t\t\t).toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t(response as Response).headers.append(key, inherits[key])\n\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Promise':\n\t\t\t\treturn (response as Promise<any>).then((x) =>\n\t\t\t\t\tmapResponse(x, set)\n\t\t\t\t) as any\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapResponse((response as Function)(), set)\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response(\n\t\t\t\t\t(response as number | boolean).toString(),\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response) {\n\t\t\t\t\tconst inherits = { ...set.headers }\n\n\t\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t\tset.headers = ((response as Response).headers as Headers).toJSON()\n\t\t\t\t\telse\n\t\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t\t(response as Response).headers.append(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tinherits[key]\n\t\t\t\t\t\t)\n\n\t\t\t\t\treturn response as Response\n\t\t\t\t}\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tconst r = JSON.stringify(response)\n\n\t\t\t\tif (r.charCodeAt(0) === 123) {\n\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t) as any\n\t\t\t\t}\n\n\t\t\t\treturn new Response(r, set as SetResponse)\n\t\t}\n\t} else\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('')\n\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'Response':\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as any as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapCompactResponse(x)\n\n\t\t\t\t\tif (r !== undefined) return r\n\n\t\t\t\t\treturn new Response('')\n\t\t\t\t})\n\n\t\t\t// ? Maybe response or Blob\n\t\t\tcase 'Function':\n\t\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response)\n\t\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tconst r = JSON.stringify(response)\n\n\t\t\t\tif (r.charCodeAt(0) === 123)\n\t\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as any\n\n\t\t\t\treturn new Response(r)\n\t\t}\n}\n\nexport const mapEarlyResponse = (\n\tresponse: unknown,\n\tset: Context['set']\n): Response | undefined => {\n\tif (response === undefined || response === null) return\n\n\tif (\n\t\t// @ts-ignore\n\t\tresponse?.$passthrough\n\t)\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE]) {\n\t\t// @ts-ignore\n\t\tset.status = response[ELYSIA_RESPONSE]\n\t\t// @ts-ignore\n\t\tresponse = response.response\n\t}\n\n\tif (\n\t\tisNotEmpty(set.headers) ||\n\t\tset.status !== 200 ||\n\t\tset.redirect ||\n\t\tset.cookie\n\t) {\n\t\tif (typeof set.status === 'string') set.status = StatusMap[set.status]\n\n\t\tif (set.redirect) {\n\t\t\tset.headers.Location = set.redirect\n\n\t\t\tif (!set.status || set.status < 300 || set.status >= 400)\n\t\t\t\tset.status = 302\n\t\t}\n\n\t\tif (set.cookie && isNotEmpty(set.cookie))\n\t\t\tset.headers['Set-Cookie'] = cookieToHeader(set.cookie)\n\n\t\tif (\n\t\t\tset.headers['Set-Cookie'] &&\n\t\t\tArray.isArray(set.headers['Set-Cookie'])\n\t\t)\n\t\t\tset.headers = parseSetCookies(\n\t\t\t\t(new Headers(set.headers)) as Headers,\n\t\t\t\tset.headers['Set-Cookie']\n\t\t\t) as any\n\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string, set as SetResponse)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\tif (\n\t\t\t\t\t!set.headers['content-type']?.startsWith(\n\t\t\t\t\t\t'text/event-stream'\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tset.headers['content-type'] =\n\t\t\t\t\t\t'text/event-stream; charset=utf-8'\n\n\t\t\t\treturn new Response(\n\t\t\t\t\tresponse as ReadableStream,\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return\n\n\t\t\t\treturn Response.json(response, set as SetResponse)\n\n\t\t\tcase 'Response':\n\t\t\t\tconst inherits = Object.assign({}, set.headers)\n\n\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tset.headers = (response as Response).headers.toJSON()\n\t\t\t\telse\n\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\tif (!(key in set.headers)) set.headers[key] = value\n\n\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t(response as Response).headers.append(key, inherits[key])\n\n\t\t\t\tif ((response as Response).status !== set.status)\n\t\t\t\t\tset.status = (response as Response).status\n\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapEarlyResponse(x, set)\n\n\t\t\t\t\tif (r !== undefined) return r\n\n\t\t\t\t\treturn\n\t\t\t\t})\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapEarlyResponse((response as Function)(), set)\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response(\n\t\t\t\t\t(response as number | boolean).toString(),\n\t\t\t\t\tset as SetResponse\n\t\t\t\t)\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response) {\n\t\t\t\t\tconst inherits = { ...set.headers }\n\n\t\t\t\t\tif (hasHeaderShorthand)\n\t\t\t\t\t\tset.headers = ((response as Response).headers as Headers).toJSON()\n\t\t\t\t\telse\n\t\t\t\t\t\tfor (const [key, value] of (\n\t\t\t\t\t\t\tresponse as Response\n\t\t\t\t\t\t).headers.entries())\n\t\t\t\t\t\t\tif (key in set.headers) set.headers[key] = value\n\n\t\t\t\t\tfor (const key in inherits)\n\t\t\t\t\t\t(response as Response).headers.append(\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tinherits[key]\n\t\t\t\t\t\t)\n\n\t\t\t\t\treturn response as Response\n\t\t\t\t}\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapEarlyResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tconst r = JSON.stringify(response)\n\t\t\t\tif (r.charCodeAt(0) === 123) {\n\t\t\t\t\tif (!set.headers['Content-Type'])\n\t\t\t\t\t\tset.headers['Content-Type'] = 'application/json'\n\n\t\t\t\t\treturn new Response(\n\t\t\t\t\t\tJSON.stringify(response),\n\t\t\t\t\t\tset as SetResponse\n\t\t\t\t\t) as any\n\t\t\t\t}\n\n\t\t\t\treturn new Response(r, set as SetResponse)\n\t\t}\n\t} else\n\t\tswitch (response?.constructor?.name) {\n\t\t\tcase 'String':\n\t\t\t\treturn new Response(response as string)\n\n\t\t\tcase 'Blob':\n\t\t\t\treturn handleFile(response as File | Blob, set)\n\n\t\t\tcase 'Object':\n\t\t\tcase 'Array':\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'ReadableStream':\n\t\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase undefined:\n\t\t\t\tif (!response) return new Response('')\n\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tcase 'Response':\n\t\t\t\treturn response as Response\n\n\t\t\tcase 'Promise':\n\t\t\t\t// @ts-ignore\n\t\t\t\treturn (response as Promise<unknown>).then((x) => {\n\t\t\t\t\tconst r = mapEarlyResponse(x, set)\n\n\t\t\t\t\tif (r !== undefined) return r\n\n\t\t\t\t\treturn\n\t\t\t\t})\n\n\t\t\tcase 'Error':\n\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\tcase 'Function':\n\t\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\t\tcase 'Number':\n\t\t\tcase 'Boolean':\n\t\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\t\tcase 'Cookie':\n\t\t\t\tif (response instanceof Cookie)\n\t\t\t\t\treturn new Response(response.value, set as SetResponse)\n\n\t\t\t\treturn new Response(response?.toString(), set as SetResponse)\n\n\t\t\tdefault:\n\t\t\t\tif (response instanceof Response)\n\t\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\tif (response instanceof Promise)\n\t\t\t\t\treturn response.then((x) => mapEarlyResponse(x, set)) as any\n\n\t\t\t\tif (response instanceof Error)\n\t\t\t\t\treturn errorToResponse(response as Error, set)\n\n\t\t\t\tconst r = JSON.stringify(response)\n\t\t\t\tif (r.charCodeAt(0) === 123)\n\t\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t\t}\n\t\t\t\t\t}) as any\n\n\t\t\t\treturn new Response(r)\n\t\t}\n}\n\nexport const mapCompactResponse = (response: unknown): Response => {\n\tif (\n\t\t// @ts-ignore\n\t\tresponse?.$passthrough\n\t)\n\t\t// @ts-ignore\n\t\tresponse = response[response.$passthrough]\n\n\t// @ts-ignore\n\tif (response?.[ELYSIA_RESPONSE])\n\t\t// @ts-ignore\n\t\treturn mapResponse(response.response, {\n\t\t\t// @ts-ignore\n\t\t\tstatus: response[ELYSIA_RESPONSE],\n\t\t\theaders: {}\n\t\t})\n\n\tswitch (response?.constructor?.name) {\n\t\tcase 'String':\n\t\t\treturn new Response(response as string)\n\n\t\tcase 'Blob':\n\t\t\treturn handleFile(response as File | Blob)\n\n\t\tcase 'Object':\n\t\tcase 'Array':\n\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase 'ReadableStream':\n\t\t\treturn new Response(response as ReadableStream, {\n\t\t\t\theaders: {\n\t\t\t\t\t'Content-Type': 'text/event-stream; charset=utf-8'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase undefined:\n\t\t\tif (!response) return new Response('')\n\n\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\theaders: {\n\t\t\t\t\t'content-type': 'application/json'\n\t\t\t\t}\n\t\t\t})\n\n\t\tcase 'Response':\n\t\t\treturn response as Response\n\n\t\tcase 'Error':\n\t\t\treturn errorToResponse(response as Error)\n\n\t\tcase 'Promise':\n\t\t\t// @ts-ignore\n\t\t\treturn (response as any as Promise<unknown>).then(\n\t\t\t\tmapCompactResponse\n\t\t\t)\n\n\t\t// ? Maybe response or Blob\n\t\tcase 'Function':\n\t\t\treturn mapCompactResponse((response as Function)())\n\n\t\tcase 'Number':\n\t\tcase 'Boolean':\n\t\t\treturn new Response((response as number | boolean).toString())\n\n\t\tdefault:\n\t\t\tif (response instanceof Response)\n\t\t\t\treturn new Response(response.body, {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\tif (response instanceof Promise)\n\t\t\t\treturn response.then(mapCompactResponse) as any\n\n\t\t\tif (response instanceof Error)\n\t\t\t\treturn errorToResponse(response as Error)\n\n\t\t\tconst r = JSON.stringify(response)\n\t\t\tif (r.charCodeAt(0) === 123)\n\t\t\t\treturn new Response(JSON.stringify(response), {\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json'\n\t\t\t\t\t}\n\t\t\t\t}) as any\n\n\t\t\treturn new Response(r)\n\t}\n}\n\nexport const errorToResponse = (error: Error, set?: Context['set']) =>\n\tnew Response(\n\t\tJSON.stringify({\n\t\t\tname: error?.name,\n\t\t\tmessage: error?.message,\n\t\t\tcause: error?.cause\n\t\t}),\n\t\t{\n\t\t\tstatus: set?.status !== 200 ? (set?.status as number) ?? 500 : 500,\n\t\t\theaders: set?.headers\n\t\t}\n\t)\n",
  "import { Kind, TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck, TypeCompiler } from '@sinclair/typebox/compiler'\n\nimport { isNotEmpty } from './handler'\n\nimport type {\n\tLifeCycleStore,\n\tLocalHook,\n\tMaybeArray,\n\tInputSchema,\n\tBaseMacro\n} from './types'\n\nconst isObject = (item: any): item is Object =>\n\titem && typeof item === 'object' && !Array.isArray(item)\n\nexport const replaceUrlPath = (url: string, pathname: string) => {\n\tconst urlObject = new URL(url)\n\turlObject.pathname = pathname\n\treturn urlObject.toString()\n}\n\nconst isClass = (v: Object) =>\n\t(typeof v === 'function' && /^\\s*class\\s+/.test(v.toString())) ||\n\t// Handle import * as Sentry from '@sentry/bun'\n\t// This also handle [object Date], [object Array]\n\t// and FFI value like [object Prisma]\n\tv.toString().startsWith('[object ') ||\n\t// If object prototype is not pure, then probably a class-like object\n\tisNotEmpty(Object.getPrototypeOf(v))\n\nexport const mergeDeep = <\n\tconst A extends Record<string, any>,\n\tconst B extends Record<string, any>\n>(\n\ttarget: A,\n\tsource: B,\n\t{\n\t\tskipKeys\n\t}: {\n\t\tskipKeys?: string[]\n\t} = {}\n): A & B => {\n\tif (isObject(target) && isObject(source))\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tif (skipKeys?.includes(key)) continue\n\n\t\t\tif (!isObject(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!(key in target)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (isClass(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttarget[key as keyof typeof target] = mergeDeep(\n\t\t\t\t(target as any)[key] as any,\n\t\t\t\tvalue\n\t\t\t)\n\t\t}\n\n\treturn target as A & B\n}\n\nexport const mergeCookie = <const A extends Object, const B extends Object>(\n\ttarget: A,\n\tsource: B\n): A & B =>\n\tmergeDeep(target, source, {\n\t\tskipKeys: ['properties']\n\t})\n\nexport const mergeObjectArray = <T>(a: T | T[], b: T | T[]): T[] => {\n\tif (!a) return []\n\n\t// ! Must copy to remove side-effect\n\tconst array = [...(Array.isArray(a) ? a : [a])]\n\tconst checksums = []\n\n\tfor (const item of array) {\n\t\t// @ts-ignore\n\t\tif (item.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tchecksums.push(item.$elysiaChecksum)\n\t}\n\n\tfor (const item of Array.isArray(b) ? b : [b]) {\n\t\t// @ts-ignore\n\t\tif (!checksums.includes(item?.$elysiaChecksum)) {\n\t\t\tarray.push(item)\n\t\t}\n\t}\n\n\treturn array\n}\n\nexport const primitiveHooks = [\n\t'start',\n\t'request',\n\t'parse',\n\t'transform',\n\t'resolve',\n\t'beforeHandle',\n\t'afterHandle',\n\t'onResponse',\n\t'mapResponse',\n\t'trace',\n\t'error',\n\t'stop',\n\t'body',\n\t'headers',\n\t'params',\n\t'query',\n\t'response',\n\t'type',\n\t'detail'\n] as const\n\nexport const mergeHook = (\n\ta?: LocalHook<any, any, any, any> | LifeCycleStore,\n\tb?: LocalHook<any, any, any, any>\n): LifeCycleStore => {\n\t// In case if merging union is need\n\t// const customAStore: Record<string, unknown> = {}\n\t// const customBStore: Record<string, unknown> = {}\n\n\t// for (const [key, value] of Object.entries(a)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomAStore[key] = value\n\t// }\n\n\t// for (const [key, value] of Object.entries(b)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomBStore[key] = value\n\t// }\n\n\t// const unioned = Object.keys(customAStore).filter((x) =>\n\t// \tObject.keys(customBStore).includes(x)\n\t// )\n\n\t// // Must provide empty object to prevent reference side-effect\n\t// const customStore = Object.assign({}, customAStore, customBStore)\n\n\t// for (const union of unioned)\n\t// \tcustomStore[union] = mergeObjectArray(\n\t// \t\tcustomAStore[union],\n\t// \t\tcustomBStore[union]\n\t// \t)\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\t// Merge local hook first\n\t\t// @ts-ignore\n\t\tbody: b?.body ?? a?.body,\n\t\t// @ts-ignore\n\t\theaders: b?.headers ?? a?.headers,\n\t\t// @ts-ignore\n\t\tparams: b?.params ?? a?.params,\n\t\t// @ts-ignore\n\t\tquery: b?.query ?? a?.query,\n\t\t// @ts-ignore\n\t\tresponse: b?.response ?? a?.response,\n\t\ttype: a?.type || b?.type,\n\t\tdetail: mergeDeep(\n\t\t\t// @ts-ignore\n\t\t\tb?.detail ?? {},\n\t\t\t// @ts-ignore\n\t\t\ta?.detail ?? {}\n\t\t),\n\t\tparse: mergeObjectArray((a?.parse as any) ?? [], b?.parse ?? []),\n\t\ttransform: mergeObjectArray(\n\t\t\ta?.transform ?? [],\n\t\t\tb?.transform ?? []\n\t\t) as any,\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta?.beforeHandle ?? [],\n\t\t\tb?.beforeHandle ?? []\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta?.afterHandle ?? [],\n\t\t\tb?.afterHandle ?? []\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta?.onResponse ?? [],\n\t\t\tb?.onResponse ?? []\n\t\t) as any,\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta?.mapResponse ?? [],\n\t\t\tb?.mapResponse ?? []\n\t\t) as any,\n\t\ttrace: mergeObjectArray(a?.trace ?? [], b?.trace ?? []) as any,\n\t\terror: mergeObjectArray(a?.error ?? [], b?.error ?? [])\n\t}\n}\n\nexport const getSchemaValidator = (\n\ts: TSchema | string | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n) => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst schema: TSchema = typeof s === 'string' ? models[s] : s\n\n\t// @ts-ignore\n\tif (schema.type === 'object' && 'additionalProperties' in schema === false)\n\t\tschema.additionalProperties = additionalProperties\n\n\tif (dynamic)\n\t\treturn {\n\t\t\tschema,\n\t\t\treferences: '',\n\t\t\tcheckFunc: () => {},\n\t\t\tcode: '',\n\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\tCode: () => ''\n\t\t} as unknown as TypeCheck<TSchema>\n\n\treturn TypeCompiler.Compile(schema, Object.values(models))\n}\n\nexport const getResponseSchemaValidator = (\n\ts: InputSchema['response'] | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n): Record<number, TypeCheck<any>> | undefined => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst maybeSchemaOrRecord = typeof s === 'string' ? models[s] : s\n\n\tconst compile = (schema: TSchema, references?: TSchema[]) => {\n\t\tif (dynamic)\n\t\t\treturn {\n\t\t\t\tschema,\n\t\t\t\treferences: '',\n\t\t\t\tcheckFunc: () => {},\n\t\t\t\tcode: '',\n\t\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\t\tCode: () => ''\n\t\t\t} as unknown as TypeCheck<TSchema>\n\n\t\treturn TypeCompiler.Compile(schema, references)\n\t}\n\n\tif (Kind in maybeSchemaOrRecord) {\n\t\tif ('additionalProperties' in maybeSchemaOrRecord === false)\n\t\t\tmaybeSchemaOrRecord.additionalProperties = additionalProperties\n\n\t\treturn {\n\t\t\t200: compile(maybeSchemaOrRecord, Object.values(models))\n\t\t}\n\t}\n\n\tconst record: Record<number, TypeCheck<any>> = {}\n\n\tObject.keys(maybeSchemaOrRecord).forEach((status): TSchema | undefined => {\n\t\tconst maybeNameOrSchema = maybeSchemaOrRecord[+status]\n\n\t\tif (typeof maybeNameOrSchema === 'string') {\n\t\t\tif (maybeNameOrSchema in models) {\n\t\t\t\tconst schema = models[maybeNameOrSchema]\n\t\t\t\tschema.type === 'object' &&\n\t\t\t\t\t'additionalProperties' in schema === false\n\n\t\t\t\t// Inherits model maybe already compiled\n\t\t\t\trecord[+status] =\n\t\t\t\t\tKind in schema\n\t\t\t\t\t\t? compile(schema, Object.values(models))\n\t\t\t\t\t\t: schema\n\t\t\t}\n\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (\n\t\t\tmaybeNameOrSchema.type === 'object' &&\n\t\t\t'additionalProperties' in maybeNameOrSchema === false\n\t\t)\n\t\t\tmaybeNameOrSchema.additionalProperties = additionalProperties\n\n\t\t// Inherits model maybe already compiled\n\t\trecord[+status] =\n\t\t\tKind in maybeNameOrSchema\n\t\t\t\t? compile(maybeNameOrSchema, Object.values(models))\n\t\t\t\t: maybeNameOrSchema\n\t})\n\n\treturn record\n}\n\nconst isBun = typeof Bun !== 'undefined'\nconst hasHash = isBun && typeof Bun.hash === 'function'\n\n// https://stackoverflow.com/a/52171480\nexport const checksum = (s: string) => {\n\tif (hasHash) return Bun.hash(s) as number\n\n\tlet h = 9\n\n\tfor (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9)\n\n\treturn (h = h ^ (h >>> 9))\n}\n\nexport const mergeLifeCycle = (\n\ta: LifeCycleStore,\n\tb: LifeCycleStore | LocalHook,\n\tchecksum?: number\n): LifeCycleStore => {\n\tconst injectChecksum = <T>(x: T): T => {\n\t\t// @ts-ignore\n\t\tif (checksum && !x.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaChecksum = checksum\n\n\t\treturn x\n\t}\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\tstart: mergeObjectArray(\n\t\t\ta.start as any,\n\t\t\t('start' in b ? b.start ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\trequest: mergeObjectArray(\n\t\t\ta.request as any,\n\t\t\t('request' in b ? b.request ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\tparse: mergeObjectArray(\n\t\t\ta.parse as any,\n\t\t\t'parse' in b ? b?.parse ?? [] : undefined ?? ([] as any)\n\t\t).map(injectChecksum),\n\t\ttransform: mergeObjectArray(\n\t\t\ta.transform as any,\n\t\t\t(b?.transform ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta.beforeHandle as any,\n\t\t\t(b?.beforeHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta.afterHandle as any,\n\t\t\t(b?.afterHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta.mapResponse as any,\n\t\t\t(b?.mapResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta.onResponse as any,\n\t\t\t(b?.onResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\ttrace: a.trace,\n\t\terror: mergeObjectArray(\n\t\t\ta.error as any,\n\t\t\t(b?.error ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tstop: mergeObjectArray(\n\t\t\ta.stop as any,\n\t\t\t('stop' in b ? b.stop ?? [] : ([] as any)).map(injectChecksum)\n\t\t)\n\t}\n}\n\nexport const asGlobalHook = (\n\thook: LocalHook<any, any>,\n\tinject = true\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: asGlobal(hook?.parse, inject),\n\t\ttransform: asGlobal(hook?.transform, inject),\n\t\tbeforeHandle: asGlobal(hook?.beforeHandle, inject),\n\t\tafterHandle: asGlobal(hook?.afterHandle, inject),\n\t\tonResponse: asGlobal(hook?.onResponse, inject),\n\t\terror: asGlobal(hook?.error, inject)\n\t} as LocalHook<any, any>\n}\n\nexport const asGlobal = <T extends MaybeArray<Function> | undefined>(\n\tfn: T,\n\tinject = true\n): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tfn.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse fn.$elysiaHookType = undefined\n\n\t\treturn fn\n\t}\n\n\treturn fn.map((x) => {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse x.$elysiaHookType = undefined\n\n\t\treturn x\n\t}) as T\n}\n\nconst filterGlobal = <T extends MaybeArray<Function> | undefined>(fn: T): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\t// @ts-ignore\n\t\treturn fn.$elysiaHookType === 'global' ? fn : undefined\n\t}\n\n\t// @ts-ignore\n\treturn fn.filter((x) => x.$elysiaHookType === 'global') as T\n}\n\nexport const filterGlobalHook = (\n\thook: LocalHook<any, any>\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: filterGlobal(hook?.parse),\n\t\ttransform: filterGlobal(hook?.transform),\n\t\tbeforeHandle: filterGlobal(hook?.beforeHandle),\n\t\tafterHandle: filterGlobal(hook?.afterHandle),\n\t\tonResponse: filterGlobal(hook?.onResponse),\n\t\terror: filterGlobal(hook?.error)\n\t} as LocalHook<any, any>\n}\n\nexport const StatusMap = {\n\tContinue: 100,\n\t'Switching Protocols': 101,\n\tProcessing: 102,\n\t'Early Hints': 103,\n\tOK: 200,\n\tCreated: 201,\n\tAccepted: 202,\n\t'Non-Authoritative Information': 203,\n\t'No Content': 204,\n\t'Reset Content': 205,\n\t'Partial Content': 206,\n\t'Multi-Status': 207,\n\t'Already Reported': 208,\n\t'Multiple Choices': 300,\n\t'Moved Permanently': 301,\n\tFound: 302,\n\t'See Other': 303,\n\t'Not Modified': 304,\n\t'Temporary Redirect': 307,\n\t'Permanent Redirect': 308,\n\t'Bad Request': 400,\n\tUnauthorized: 401,\n\t'Payment Required': 402,\n\tForbidden: 403,\n\t'Not Found': 404,\n\t'Method Not Allowed': 405,\n\t'Not Acceptable': 406,\n\t'Proxy Authentication Required': 407,\n\t'Request Timeout': 408,\n\tConflict: 409,\n\tGone: 410,\n\t'Length Required': 411,\n\t'Precondition Failed': 412,\n\t'Payload Too Large': 413,\n\t'URI Too Long': 414,\n\t'Unsupported Media Type': 415,\n\t'Range Not Satisfiable': 416,\n\t'Expectation Failed': 417,\n\t\"I'm a teapot\": 418,\n\t'Misdirected Request': 421,\n\t'Unprocessable Content': 422,\n\tLocked: 423,\n\t'Failed Dependency': 424,\n\t'Too Early': 425,\n\t'Upgrade Required': 426,\n\t'Precondition Required': 428,\n\t'Too Many Requests': 429,\n\t'Request Header Fields Too Large': 431,\n\t'Unavailable For Legal Reasons': 451,\n\t'Internal Server Error': 500,\n\t'Not Implemented': 501,\n\t'Bad Gateway': 502,\n\t'Service Unavailable': 503,\n\t'Gateway Timeout': 504,\n\t'HTTP Version Not Supported': 505,\n\t'Variant Also Negotiates': 506,\n\t'Insufficient Storage': 507,\n\t'Loop Detected': 508,\n\t'Not Extended': 510,\n\t'Network Authentication Required': 511\n} as const\n\nexport type HTTPStatusName = keyof typeof StatusMap\n\nexport const signCookie = async (val: string, secret: string | null) => {\n\tif (typeof val !== 'string')\n\t\tthrow new TypeError('Cookie value must be provided as a string.')\n\n\tif (secret === null) throw new TypeError('Secret key must be provided.')\n\n\tconst encoder = new TextEncoder()\n\tconst secretKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tencoder.encode(secret),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t)\n\tconst hmacBuffer = await crypto.subtle.sign(\n\t\t'HMAC',\n\t\tsecretKey,\n\t\tencoder.encode(val)\n\t)\n\n\tconst hmacArray = Array.from(new Uint8Array(hmacBuffer))\n\tconst digest = btoa(String.fromCharCode(...hmacArray))\n\treturn `${val}.${digest.replace(/=+$/, '')}`\n}\n\nexport const unsignCookie = async (input: string, secret: string | null) => {\n\tif (typeof input !== 'string')\n\t\tthrow new TypeError('Signed cookie string must be provided.')\n\n\tif (null === secret) throw new TypeError('Secret key must be provided.')\n\n\tconst tentativeValue = input.slice(0, input.lastIndexOf('.'))\n\tconst expectedInput = await signCookie(tentativeValue, secret)\n\n\treturn expectedInput === input ? tentativeValue : false\n}\n\nexport const traceBackMacro = (\n\textension: BaseMacro,\n\tproperty: Record<string, unknown>,\n\thooks = property\n) => {\n\tfor (const [key, value] of Object.entries(property ?? {})) {\n\t\tif (primitiveHooks.includes(key as any) || !(key in extension)) continue\n\n\t\tif (typeof extension[key] === 'function') {\n\t\t\textension[key](value)\n\t\t} else if (typeof extension[key] === 'object')\n\t\t\ttraceBackMacro(extension[key], value as any, hooks)\n\t}\n}\n\nexport const isNumericString = (message: string) => message.trim().length !== 0 && !Number.isNaN(Number(message))\n",
  "import { Kind, TSchema } from '@sinclair/typebox'\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck, TypeCompiler } from '@sinclair/typebox/compiler'\n\nimport { isNotEmpty } from './handler'\n\nimport type {\n\tLifeCycleStore,\n\tLocalHook,\n\tMaybeArray,\n\tInputSchema,\n\tBaseMacro\n} from './types'\n\nconst isObject = (item: any): item is Object =>\n\titem && typeof item === 'object' && !Array.isArray(item)\n\nexport const replaceUrlPath = (url: string, pathname: string) => {\n\tconst urlObject = new URL(url)\n\turlObject.pathname = pathname\n\treturn urlObject.toString()\n}\n\nconst isClass = (v: Object) =>\n\t(typeof v === 'function' && /^\\s*class\\s+/.test(v.toString())) ||\n\t// Handle import * as Sentry from '@sentry/bun'\n\t// This also handle [object Date], [object Array]\n\t// and FFI value like [object Prisma]\n\tv.toString().startsWith('[object ') ||\n\t// If object prototype is not pure, then probably a class-like object\n\tisNotEmpty(Object.getPrototypeOf(v))\n\nexport const mergeDeep = <\n\tconst A extends Record<string, any>,\n\tconst B extends Record<string, any>\n>(\n\ttarget: A,\n\tsource: B,\n\t{\n\t\tskipKeys\n\t}: {\n\t\tskipKeys?: string[]\n\t} = {}\n): A & B => {\n\tif (isObject(target) && isObject(source))\n\t\tfor (const [key, value] of Object.entries(source)) {\n\t\t\tif (skipKeys?.includes(key)) continue\n\n\t\t\tif (!isObject(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (!(key in target)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tif (isClass(value)) {\n\t\t\t\ttarget[key as keyof typeof target] = value\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\ttarget[key as keyof typeof target] = mergeDeep(\n\t\t\t\t(target as any)[key] as any,\n\t\t\t\tvalue\n\t\t\t)\n\t\t}\n\n\treturn target as A & B\n}\n\nexport const mergeCookie = <const A extends Object, const B extends Object>(\n\ttarget: A,\n\tsource: B\n): A & B =>\n\tmergeDeep(target, source, {\n\t\tskipKeys: ['properties']\n\t})\n\nexport const mergeObjectArray = <T>(a: T | T[], b: T | T[]): T[] => {\n\tif (!a) return []\n\n\t// ! Must copy to remove side-effect\n\tconst array = [...(Array.isArray(a) ? a : [a])]\n\tconst checksums = []\n\n\tfor (const item of array) {\n\t\t// @ts-ignore\n\t\tif (item.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tchecksums.push(item.$elysiaChecksum)\n\t}\n\n\tfor (const item of Array.isArray(b) ? b : [b]) {\n\t\t// @ts-ignore\n\t\tif (!checksums.includes(item?.$elysiaChecksum)) {\n\t\t\tarray.push(item)\n\t\t}\n\t}\n\n\treturn array\n}\n\nexport const primitiveHooks = [\n\t'start',\n\t'request',\n\t'parse',\n\t'transform',\n\t'resolve',\n\t'beforeHandle',\n\t'afterHandle',\n\t'onResponse',\n\t'mapResponse',\n\t'trace',\n\t'error',\n\t'stop',\n\t'body',\n\t'headers',\n\t'params',\n\t'query',\n\t'response',\n\t'type',\n\t'detail'\n] as const\n\nexport const mergeHook = (\n\ta?: LocalHook<any, any, any, any> | LifeCycleStore,\n\tb?: LocalHook<any, any, any, any>\n): LifeCycleStore => {\n\t// In case if merging union is need\n\t// const customAStore: Record<string, unknown> = {}\n\t// const customBStore: Record<string, unknown> = {}\n\n\t// for (const [key, value] of Object.entries(a)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomAStore[key] = value\n\t// }\n\n\t// for (const [key, value] of Object.entries(b)) {\n\t// \tif (primitiveHooks.includes(key as any)) continue\n\n\t// \tcustomBStore[key] = value\n\t// }\n\n\t// const unioned = Object.keys(customAStore).filter((x) =>\n\t// \tObject.keys(customBStore).includes(x)\n\t// )\n\n\t// // Must provide empty object to prevent reference side-effect\n\t// const customStore = Object.assign({}, customAStore, customBStore)\n\n\t// for (const union of unioned)\n\t// \tcustomStore[union] = mergeObjectArray(\n\t// \t\tcustomAStore[union],\n\t// \t\tcustomBStore[union]\n\t// \t)\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\t// Merge local hook first\n\t\t// @ts-ignore\n\t\tbody: b?.body ?? a?.body,\n\t\t// @ts-ignore\n\t\theaders: b?.headers ?? a?.headers,\n\t\t// @ts-ignore\n\t\tparams: b?.params ?? a?.params,\n\t\t// @ts-ignore\n\t\tquery: b?.query ?? a?.query,\n\t\t// @ts-ignore\n\t\tresponse: b?.response ?? a?.response,\n\t\ttype: a?.type || b?.type,\n\t\tdetail: mergeDeep(\n\t\t\t// @ts-ignore\n\t\t\tb?.detail ?? {},\n\t\t\t// @ts-ignore\n\t\t\ta?.detail ?? {}\n\t\t),\n\t\tparse: mergeObjectArray((a?.parse as any) ?? [], b?.parse ?? []),\n\t\ttransform: mergeObjectArray(\n\t\t\ta?.transform ?? [],\n\t\t\tb?.transform ?? []\n\t\t) as any,\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta?.beforeHandle ?? [],\n\t\t\tb?.beforeHandle ?? []\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta?.afterHandle ?? [],\n\t\t\tb?.afterHandle ?? []\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta?.onResponse ?? [],\n\t\t\tb?.onResponse ?? []\n\t\t) as any,\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta?.mapResponse ?? [],\n\t\t\tb?.mapResponse ?? []\n\t\t) as any,\n\t\ttrace: mergeObjectArray(a?.trace ?? [], b?.trace ?? []) as any,\n\t\terror: mergeObjectArray(a?.error ?? [], b?.error ?? [])\n\t}\n}\n\nexport const getSchemaValidator = (\n\ts: TSchema | string | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n) => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst schema: TSchema = typeof s === 'string' ? models[s] : s\n\n\t// @ts-ignore\n\tif (schema.type === 'object' && 'additionalProperties' in schema === false)\n\t\tschema.additionalProperties = additionalProperties\n\n\tif (dynamic)\n\t\treturn {\n\t\t\tschema,\n\t\t\treferences: '',\n\t\t\tcheckFunc: () => {},\n\t\t\tcode: '',\n\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\tCode: () => ''\n\t\t} as unknown as TypeCheck<TSchema>\n\n\treturn TypeCompiler.Compile(schema, Object.values(models))\n}\n\nexport const getResponseSchemaValidator = (\n\ts: InputSchema['response'] | undefined,\n\t{\n\t\tmodels = {},\n\t\tadditionalProperties = false,\n\t\tdynamic = false\n\t}: {\n\t\tmodels?: Record<string, TSchema>\n\t\tadditionalProperties?: boolean\n\t\tdynamic?: boolean\n\t}\n): Record<number, TypeCheck<any>> | undefined => {\n\tif (!s) return\n\tif (typeof s === 'string' && !(s in models)) return\n\n\tconst maybeSchemaOrRecord = typeof s === 'string' ? models[s] : s\n\n\tconst compile = (schema: TSchema, references?: TSchema[]) => {\n\t\tif (dynamic)\n\t\t\treturn {\n\t\t\t\tschema,\n\t\t\t\treferences: '',\n\t\t\t\tcheckFunc: () => {},\n\t\t\t\tcode: '',\n\t\t\t\tCheck: (value: unknown) => Value.Check(schema, value),\n\t\t\t\tErrors: (value: unknown) => Value.Errors(schema, value),\n\t\t\t\tCode: () => ''\n\t\t\t} as unknown as TypeCheck<TSchema>\n\n\t\treturn TypeCompiler.Compile(schema, references)\n\t}\n\n\tif (Kind in maybeSchemaOrRecord) {\n\t\tif ('additionalProperties' in maybeSchemaOrRecord === false)\n\t\t\tmaybeSchemaOrRecord.additionalProperties = additionalProperties\n\n\t\treturn {\n\t\t\t200: compile(maybeSchemaOrRecord, Object.values(models))\n\t\t}\n\t}\n\n\tconst record: Record<number, TypeCheck<any>> = {}\n\n\tObject.keys(maybeSchemaOrRecord).forEach((status): TSchema | undefined => {\n\t\tconst maybeNameOrSchema = maybeSchemaOrRecord[+status]\n\n\t\tif (typeof maybeNameOrSchema === 'string') {\n\t\t\tif (maybeNameOrSchema in models) {\n\t\t\t\tconst schema = models[maybeNameOrSchema]\n\t\t\t\tschema.type === 'object' &&\n\t\t\t\t\t'additionalProperties' in schema === false\n\n\t\t\t\t// Inherits model maybe already compiled\n\t\t\t\trecord[+status] =\n\t\t\t\t\tKind in schema\n\t\t\t\t\t\t? compile(schema, Object.values(models))\n\t\t\t\t\t\t: schema\n\t\t\t}\n\n\t\t\treturn undefined\n\t\t}\n\n\t\tif (\n\t\t\tmaybeNameOrSchema.type === 'object' &&\n\t\t\t'additionalProperties' in maybeNameOrSchema === false\n\t\t)\n\t\t\tmaybeNameOrSchema.additionalProperties = additionalProperties\n\n\t\t// Inherits model maybe already compiled\n\t\trecord[+status] =\n\t\t\tKind in maybeNameOrSchema\n\t\t\t\t? compile(maybeNameOrSchema, Object.values(models))\n\t\t\t\t: maybeNameOrSchema\n\t})\n\n\treturn record\n}\n\nconst isBun = typeof Bun !== 'undefined'\nconst hasHash = isBun && typeof Bun.hash === 'function'\n\n// https://stackoverflow.com/a/52171480\nexport const checksum = (s: string) => {\n\tif (hasHash) return Bun.hash(s) as number\n\n\tlet h = 9\n\n\tfor (let i = 0; i < s.length; ) h = Math.imul(h ^ s.charCodeAt(i++), 9 ** 9)\n\n\treturn (h = h ^ (h >>> 9))\n}\n\nexport const mergeLifeCycle = (\n\ta: LifeCycleStore,\n\tb: LifeCycleStore | LocalHook,\n\tchecksum?: number\n): LifeCycleStore => {\n\tconst injectChecksum = <T>(x: T): T => {\n\t\t// @ts-ignore\n\t\tif (checksum && !x.$elysiaChecksum)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaChecksum = checksum\n\n\t\treturn x\n\t}\n\n\treturn {\n\t\t...a,\n\t\t...b,\n\t\tstart: mergeObjectArray(\n\t\t\ta.start as any,\n\t\t\t('start' in b ? b.start ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\trequest: mergeObjectArray(\n\t\t\ta.request as any,\n\t\t\t('request' in b ? b.request ?? [] : []).map(injectChecksum) as any\n\t\t),\n\t\tparse: mergeObjectArray(\n\t\t\ta.parse as any,\n\t\t\t'parse' in b ? b?.parse ?? [] : undefined ?? ([] as any)\n\t\t).map(injectChecksum),\n\t\ttransform: mergeObjectArray(\n\t\t\ta.transform as any,\n\t\t\t(b?.transform ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tbeforeHandle: mergeObjectArray(\n\t\t\ta.beforeHandle as any,\n\t\t\t(b?.beforeHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tafterHandle: mergeObjectArray(\n\t\t\ta.afterHandle as any,\n\t\t\t(b?.afterHandle ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tmapResponse: mergeObjectArray(\n\t\t\ta.mapResponse as any,\n\t\t\t(b?.mapResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tonResponse: mergeObjectArray(\n\t\t\ta.onResponse as any,\n\t\t\t(b?.onResponse ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\ttrace: a.trace,\n\t\terror: mergeObjectArray(\n\t\t\ta.error as any,\n\t\t\t(b?.error ?? ([] as any)).map(injectChecksum)\n\t\t),\n\t\tstop: mergeObjectArray(\n\t\t\ta.stop as any,\n\t\t\t('stop' in b ? b.stop ?? [] : ([] as any)).map(injectChecksum)\n\t\t)\n\t}\n}\n\nexport const asGlobalHook = (\n\thook: LocalHook<any, any>,\n\tinject = true\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: asGlobal(hook?.parse, inject),\n\t\ttransform: asGlobal(hook?.transform, inject),\n\t\tbeforeHandle: asGlobal(hook?.beforeHandle, inject),\n\t\tafterHandle: asGlobal(hook?.afterHandle, inject),\n\t\tonResponse: asGlobal(hook?.onResponse, inject),\n\t\terror: asGlobal(hook?.error, inject)\n\t} as LocalHook<any, any>\n}\n\nexport const asGlobal = <T extends MaybeArray<Function> | undefined>(\n\tfn: T,\n\tinject = true\n): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tfn.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse fn.$elysiaHookType = undefined\n\n\t\treturn fn\n\t}\n\n\treturn fn.map((x) => {\n\t\tif (inject)\n\t\t\t// @ts-ignore\n\t\t\tx.$elysiaHookType = 'global'\n\t\t// @ts-ignore\n\t\telse x.$elysiaHookType = undefined\n\n\t\treturn x\n\t}) as T\n}\n\nconst filterGlobal = <T extends MaybeArray<Function> | undefined>(fn: T): T => {\n\tif (!fn) return fn\n\n\tif (typeof fn === 'function') {\n\t\t// @ts-ignore\n\t\treturn fn.$elysiaHookType === 'global' ? fn : undefined\n\t}\n\n\t// @ts-ignore\n\treturn fn.filter((x) => x.$elysiaHookType === 'global') as T\n}\n\nexport const filterGlobalHook = (\n\thook: LocalHook<any, any>\n): LocalHook<any, any> => {\n\treturn {\n\t\t// rest is validator\n\t\t...hook,\n\t\ttype: hook?.type,\n\t\tdetail: hook?.detail,\n\t\tparse: filterGlobal(hook?.parse),\n\t\ttransform: filterGlobal(hook?.transform),\n\t\tbeforeHandle: filterGlobal(hook?.beforeHandle),\n\t\tafterHandle: filterGlobal(hook?.afterHandle),\n\t\tonResponse: filterGlobal(hook?.onResponse),\n\t\terror: filterGlobal(hook?.error)\n\t} as LocalHook<any, any>\n}\n\nexport const StatusMap = {\n\tContinue: 100,\n\t'Switching Protocols': 101,\n\tProcessing: 102,\n\t'Early Hints': 103,\n\tOK: 200,\n\tCreated: 201,\n\tAccepted: 202,\n\t'Non-Authoritative Information': 203,\n\t'No Content': 204,\n\t'Reset Content': 205,\n\t'Partial Content': 206,\n\t'Multi-Status': 207,\n\t'Already Reported': 208,\n\t'Multiple Choices': 300,\n\t'Moved Permanently': 301,\n\tFound: 302,\n\t'See Other': 303,\n\t'Not Modified': 304,\n\t'Temporary Redirect': 307,\n\t'Permanent Redirect': 308,\n\t'Bad Request': 400,\n\tUnauthorized: 401,\n\t'Payment Required': 402,\n\tForbidden: 403,\n\t'Not Found': 404,\n\t'Method Not Allowed': 405,\n\t'Not Acceptable': 406,\n\t'Proxy Authentication Required': 407,\n\t'Request Timeout': 408,\n\tConflict: 409,\n\tGone: 410,\n\t'Length Required': 411,\n\t'Precondition Failed': 412,\n\t'Payload Too Large': 413,\n\t'URI Too Long': 414,\n\t'Unsupported Media Type': 415,\n\t'Range Not Satisfiable': 416,\n\t'Expectation Failed': 417,\n\t\"I'm a teapot\": 418,\n\t'Misdirected Request': 421,\n\t'Unprocessable Content': 422,\n\tLocked: 423,\n\t'Failed Dependency': 424,\n\t'Too Early': 425,\n\t'Upgrade Required': 426,\n\t'Precondition Required': 428,\n\t'Too Many Requests': 429,\n\t'Request Header Fields Too Large': 431,\n\t'Unavailable For Legal Reasons': 451,\n\t'Internal Server Error': 500,\n\t'Not Implemented': 501,\n\t'Bad Gateway': 502,\n\t'Service Unavailable': 503,\n\t'Gateway Timeout': 504,\n\t'HTTP Version Not Supported': 505,\n\t'Variant Also Negotiates': 506,\n\t'Insufficient Storage': 507,\n\t'Loop Detected': 508,\n\t'Not Extended': 510,\n\t'Network Authentication Required': 511\n} as const\n\nexport type HTTPStatusName = keyof typeof StatusMap\n\nexport const signCookie = async (val: string, secret: string | null) => {\n\tif (typeof val !== 'string')\n\t\tthrow new TypeError('Cookie value must be provided as a string.')\n\n\tif (secret === null) throw new TypeError('Secret key must be provided.')\n\n\tconst encoder = new TextEncoder()\n\tconst secretKey = await crypto.subtle.importKey(\n\t\t'raw',\n\t\tencoder.encode(secret),\n\t\t{ name: 'HMAC', hash: 'SHA-256' },\n\t\tfalse,\n\t\t['sign']\n\t)\n\tconst hmacBuffer = await crypto.subtle.sign(\n\t\t'HMAC',\n\t\tsecretKey,\n\t\tencoder.encode(val)\n\t)\n\n\tconst hmacArray = Array.from(new Uint8Array(hmacBuffer))\n\tconst digest = btoa(String.fromCharCode(...hmacArray))\n\treturn `${val}.${digest.replace(/=+$/, '')}`\n}\n\nexport const unsignCookie = async (input: string, secret: string | null) => {\n\tif (typeof input !== 'string')\n\t\tthrow new TypeError('Signed cookie string must be provided.')\n\n\tif (null === secret) throw new TypeError('Secret key must be provided.')\n\n\tconst tentativeValue = input.slice(0, input.lastIndexOf('.'))\n\tconst expectedInput = await signCookie(tentativeValue, secret)\n\n\treturn expectedInput === input ? tentativeValue : false\n}\n\nexport const traceBackMacro = (\n\textension: BaseMacro,\n\tproperty: Record<string, unknown>,\n\thooks = property\n) => {\n\tfor (const [key, value] of Object.entries(property ?? {})) {\n\t\tif (primitiveHooks.includes(key as any) || !(key in extension)) continue\n\n\t\tif (typeof extension[key] === 'function') {\n\t\t\textension[key](value)\n\t\t} else if (typeof extension[key] === 'object')\n\t\t\ttraceBackMacro(extension[key], value as any, hooks)\n\t}\n}\n\nexport const isNumericString = (message: string) => message.trim().length !== 0 && !Number.isNaN(Number(message))\n",
  "import { Value } from '@sinclair/typebox/value'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\nimport { TSchema } from '@sinclair/typebox'\n\nimport { StatusMap } from './utils'\n\n// ? Cloudflare worker support\nconst env =\n\ttypeof Bun !== 'undefined'\n\t\t? Bun.env\n\t\t: typeof process !== 'undefined'\n\t\t  ? process?.env\n\t\t  : undefined\n\nexport const ERROR_CODE = Symbol('ElysiaErrorCode')\nexport const ELYSIA_RESPONSE = Symbol('ElysiaResponse')\n\nexport const isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production'\n\nexport type ElysiaErrors =\n\t| InternalServerError\n\t| NotFoundError\n\t| ParseError\n\t| ValidationError\n\t| InvalidCookieSignature\n\n\nexport const error = <\n\tconst Code extends number | keyof typeof StatusMap,\n\tconst T\n>(\n\tcode: Code,\n\tresponse: T\n): {\n\t[ELYSIA_RESPONSE]: Code extends keyof typeof StatusMap\n\t\t? (typeof StatusMap)[Code]\n\t\t: Code\n\tresponse: T\n} =>\n\t({\n\t\t// @ts-ignore\n\t\t[ELYSIA_RESPONSE]: StatusMap[code] ?? code,\n\t\tresponse\n\t}) as const\n\nexport class InternalServerError extends Error {\n\tcode = 'INTERNAL_SERVER_ERROR'\n\tstatus = 500\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'INTERNAL_SERVER_ERROR')\n\t}\n}\n\nexport class NotFoundError extends Error {\n\tcode = 'NOT_FOUND'\n\tstatus = 404\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'NOT_FOUND')\n\t}\n}\n\nexport class ParseError extends Error {\n\tcode = 'PARSE'\n\tstatus = 400\n\n\tconstructor(message?: string) {\n\t\tsuper(message ?? 'PARSE')\n\t}\n}\n\nexport class InvalidCookieSignature extends Error {\n\tcode = 'INVALID_COOKIE_SIGNATURE'\n\tstatus = 400\n\n\tconstructor(\n\t\tpublic key: string,\n\t\tmessage?: string\n\t) {\n\t\tsuper(message ?? `\"${key}\" has invalid cookie signature`)\n\t}\n}\n\nexport class ValidationError extends Error {\n\tcode = 'VALIDATION'\n\tstatus = 400\n\n\tconstructor(\n\t\tpublic type: string,\n\t\tpublic validator: TSchema | TypeCheck<any>,\n\t\tpublic value: unknown\n\t) {\n\t\tconst error = isProduction\n\t\t\t? undefined\n\t\t\t: 'Errors' in validator\n\t\t\t? validator.Errors(value).First()\n\t\t\t: Value.Errors(validator, value).First()\n\n\t\tconst customError = error?.schema.error\n\t\t\t? typeof error.schema.error === 'function'\n\t\t\t\t? error.schema.error(type, validator, value)\n\t\t\t\t: error.schema.error\n\t\t\t: undefined\n\n\t\tconst accessor = error?.path?.slice(1) || 'root'\n\t\tlet message = ''\n\n\t\tif (customError) {\n\t\t\tmessage =\n\t\t\t\ttypeof customError === 'object'\n\t\t\t\t\t? JSON.stringify(customError)\n\t\t\t\t\t: customError + ''\n\t\t} else if (isProduction) {\n\t\t\tmessage = JSON.stringify({\n\t\t\t\ttype,\n\t\t\t\tmessage: error?.message\n\t\t\t})\n\t\t} else {\n\t\t\tmessage = JSON.stringify(\n\t\t\t\t{\n\t\t\t\t\ttype,\n\t\t\t\t\tat: accessor,\n\t\t\t\t\tmessage: error?.message,\n\t\t\t\t\texpected: Value.Create(\n\t\t\t\t\t\t// @ts-ignore private field\n\t\t\t\t\t\tvalidator.schema\n\t\t\t\t\t),\n\t\t\t\t\tfound: value,\n\t\t\t\t\terrors: [...validator.Errors(value)]\n\t\t\t\t},\n\t\t\t\tnull,\n\t\t\t\t2\n\t\t\t)\n\t\t}\n\n\t\tsuper(message)\n\n\t\tObject.setPrototypeOf(this, ValidationError.prototype)\n\t}\n\n\tget all() {\n\t\treturn [...this.validator.Errors(this.value)]\n\t}\n\n\tstatic simplifyModel(validator: TSchema | TypeCheck<any>) {\n\t\t// @ts-ignore\n\t\tconst model = 'schema' in validator ? validator.schema : validator\n\n\t\ttry {\n\t\t\treturn Value.Create(model)\n\t\t} catch {\n\t\t\treturn model\n\t\t}\n\t}\n\n\tget model() {\n\t\treturn ValidationError.simplifyModel(this.validator)\n\t}\n\n\ttoResponse(headers?: Record<string, any>) {\n\t\treturn new Response(this.message, {\n\t\t\tstatus: 400,\n\t\t\theaders\n\t\t})\n\t}\n}\n",
  "import type { ServerWebSocket, WebSocketHandler } from 'bun'\n\nimport type { TSchema } from '@sinclair/typebox'\nimport type { TypeCheck } from '@sinclair/typebox/compiler'\n\nimport { ValidationError } from '../error'\nimport type { Context } from '../context'\n\nimport type { DecoratorBase, RouteSchema } from '../types'\n\nexport const websocket: WebSocketHandler<any> = {\n\topen(ws) {\n\t\tws.data.open?.(ws)\n\t},\n\tmessage(ws, message) {\n\t\tws.data.message?.(ws, message)\n\t},\n\tdrain(ws) {\n\t\tws.data.drain?.(ws)\n\t},\n\tclose(ws, code, reason) {\n\t\tws.data.close?.(ws, code, reason)\n\t}\n}\n\nexport class ElysiaWS<\n\tWS extends ServerWebSocket<{\n\t\tid?: string\n\t\tvalidator?: TypeCheck<TSchema>\n\t}>,\n\tRoute extends RouteSchema = RouteSchema,\n\tDecorators extends DecoratorBase = {\n\t\trequest: {}\n\t\tstore: {}\n\t\tderive: {}\n\t\tresolve: {}\n\t}\n> {\n\tvalidator?: TypeCheck<TSchema>\n\n\tconstructor(public raw: WS, public data: Context<Route, Decorators>) {\n\t\tthis.validator = raw.data.validator\n\t\tif (raw.data.id) {\n\t\t\tthis.id = raw.data.id\n\t\t} else {\n\t\t\tconst array = new Uint32Array(1)\n\t\t\tcrypto.getRandomValues(array)\n\t\t\tthis.id = array[0].toString()\n\t\t}\n\t}\n\n\tget id() {\n\t\treturn this.raw.data.id!\n\t}\n\n\tset id(newID: string) {\n\t\tthis.raw.data.id = newID\n\t}\n\n\tget publish() {\n\t\treturn (\n\t\t\ttopic: string,\n\t\t\tdata: Route['response'] = undefined,\n\t\t\tcompress?: boolean\n\t\t) => {\n\t\t\tif (this.validator?.Check(data) === false)\n\t\t\t\tthrow new ValidationError('message', this.validator, data)\n\n\t\t\tif (typeof data === 'object') data = JSON.stringify(data)\n\n\t\t\tthis.raw.publish(topic, data as unknown as string, compress)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget send() {\n\t\treturn (data: Route['response']) => {\n\t\t\tif (this.validator?.Check(data) === false)\n\t\t\t\tthrow new ValidationError('message', this.validator, data)\n\n\t\t\tif (Buffer.isBuffer(data)) {\n\t\t\t\tthis.raw.send(data as unknown as Buffer)\n\n\t\t\t\treturn this\n\t\t\t}\n\n\t\t\tif (typeof data === 'object') data = JSON.stringify(data)\n\n\t\t\tthis.raw.send(data as unknown as string)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget subscribe() {\n\t\treturn (room: string) => {\n\t\t\tthis.raw.subscribe(room)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget unsubscribe() {\n\t\treturn (room: string) => {\n\t\t\tthis.raw.unsubscribe(room)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget cork() {\n\t\treturn (callback: (ws: WS) => this) => {\n\t\t\tthis.raw.cork(callback as any)\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget close() {\n\t\treturn () => {\n\t\t\tthis.raw.close()\n\n\t\t\treturn this\n\t\t}\n\t}\n\n\tget terminate() {\n\t\treturn this.raw.terminate.bind(this.raw)\n\t}\n\n\tget isSubscribed() {\n\t\treturn this.raw.isSubscribed.bind(this.raw)\n\t}\n\n\tget remoteAddress() {\n\t\treturn this.raw.remoteAddress\n\t}\n}\n",
  "import { type Elysia } from '.'\n\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck } from '@sinclair/typebox/compiler'\nimport type { TAnySchema } from '@sinclair/typebox'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\n// @ts-ignore\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { signCookie } from './utils'\n\nimport {\n\tmapEarlyResponse,\n\tmapResponse,\n\tmapCompactResponse,\n\tisNotEmpty\n} from './handler'\nimport {\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tERROR_CODE,\n\tELYSIA_RESPONSE\n} from './error'\n\nimport { CookieOptions, parseCookie } from './cookie'\n\nimport type {\n\tComposedHandler,\n\tElysiaConfig,\n\tHandler,\n\tLifeCycleStore,\n\tPreHandler,\n\tSchemaValidator,\n\tTraceEvent,\n\tTraceReporter\n} from './types'\n\nconst headersHasToJSON = (new Headers() as Headers).toJSON\nconst findAliases = new RegExp(` (\\\\w+) = context`, 'g')\n\nconst requestId = { value: 0 }\n\nconst createReport = ({\n\thasTrace,\n\thasTraceSet = false,\n\taddFn,\n\tcondition = {}\n}: {\n\thasTrace: boolean | number\n\thasTraceSet?: boolean\n\taddFn(string: string): void\n\tcondition: Partial<Record<TraceEvent, boolean>>\n}) => {\n\tif (hasTrace) {\n\t\taddFn(`\\nconst reporter = getReporter()\\n`)\n\n\t\treturn (\n\t\t\tevent: TraceEvent,\n\t\t\t{\n\t\t\t\tname,\n\t\t\t\tattribute = '',\n\t\t\t\tunit = 0\n\t\t\t}: {\n\t\t\t\tname?: string\n\t\t\t\tattribute?: string\n\t\t\t\tunit?: number\n\t\t\t} = {}\n\t\t) => {\n\t\t\tconst dotIndex = event.indexOf('.')\n\t\t\tconst isGroup = dotIndex === -1\n\n\t\t\tif (\n\t\t\t\tevent !== 'request' &&\n\t\t\t\tevent !== 'response' &&\n\t\t\t\t!condition[\n\t\t\t\t\t(isGroup\n\t\t\t\t\t\t? event\n\t\t\t\t\t\t: event.slice(0, dotIndex)) as keyof typeof condition\n\t\t\t\t]\n\t\t\t)\n\t\t\t\treturn () => {\n\t\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t\t}\n\n\t\t\tif (isGroup) name ||= event\n\t\t\telse name ||= 'anonymous'\n\n\t\t\taddFn(\n\t\t\t\t'\\n' +\n\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\tid,\n\t\t\t\t\tevent: '${event}',\n\t\t\t\t\ttype: 'begin',\n\t\t\t\t\tname: '${name}',\n\t\t\t\t\ttime: performance.now(),\n\t\t\t\t\t${isGroup ? `unit: ${unit},` : ''}\n\t\t\t\t\t${attribute}\n\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t'\\n'\n\t\t\t)\n\n\t\t\tlet handled = false\n\n\t\t\treturn () => {\n\t\t\t\tif (handled) return\n\n\t\t\t\thandled = true\n\t\t\t\taddFn(\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tevent: '${event}',\n\t\t\t\t\t\t\ttype: 'end',\n\t\t\t\t\t\t\ttime: performance.now()\n\t\t\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t\t'\\n'\n\t\t\t\t)\n\n\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn () => () => {}\n\t}\n}\n\nexport const hasReturn = (fnLiteral: string) => {\n\tconst parenthesisEnd = fnLiteral.indexOf(')')\n\n\t// Is direct arrow function return eg. () => 1\n\tif (\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 2) === 61 &&\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 5) !== 123\n\t) {\n\t\treturn true\n\t}\n\n\treturn fnLiteral.includes('return')\n}\n\nconst composeValidationFactory = (\n\thasErrorHandler: boolean,\n\t{\n\t\tinjectResponse = ''\n\t}: {\n\t\tinjectResponse?: string\n\t} = {}\n) => ({\n\tcomposeValidation: (type: string, value = `c.${type}`) =>\n\t\thasErrorHandler\n\t\t\t? `c.set.status = 400; throw new ValidationError(\n'${type}',\n${type},\n${value}\n)`\n\t\t\t: `c.set.status = 400; return new ValidationError(\n\t'${type}',\n\t${type},\n\t${value}\n).toResponse(c.set.headers)`,\n\tcomposeResponseValidation: (name = 'r') => {\n\t\tconst returnError = hasErrorHandler\n\t\t\t? `throw new ValidationError(\n'response',\nresponse[c.set.status],\n${name}\n)`\n\t\t\t: `return new ValidationError(\n'response',\nresponse[c.set.status],\n${name}\n).toResponse(c.set.headers)`\n\n\t\treturn `\\n${injectResponse}\n\t\tif(!(${name} instanceof Response) && response[c.set.status]?.Check(${name}) === false) {\n\tif(!(response instanceof Error))\n\t\t${returnError}\n}\\n`\n\t}\n})\n\nexport const isFnUse = (keyword: string, fnLiteral: string) => {\n\tif (fnLiteral.startsWith('[object ')) return false\n\n\tfnLiteral = fnLiteral.trimStart()\n\tfnLiteral = fnLiteral.replaceAll(/^async /g, '')\n\n\tif (/^(\\w+)\\(/g.test(fnLiteral))\n\t\tfnLiteral = fnLiteral.slice(fnLiteral.indexOf('('))\n\n\tconst argument =\n\t\t// CharCode 40 is '('\n\t\tfnLiteral.charCodeAt(0) === 40 || fnLiteral.startsWith('function')\n\t\t\t? // Bun: (context) => {}\n\t\t\t  fnLiteral.slice(\n\t\t\t\t\tfnLiteral.indexOf('(') + 1,\n\t\t\t\t\tfnLiteral.indexOf(')')\n\t\t\t  )\n\t\t\t: // Node: context => {}\n\t\t\t  fnLiteral.slice(0, fnLiteral.indexOf('=') - 1)\n\n\tif (argument === '') return false\n\n\tconst restIndex =\n\t\targument.charCodeAt(0) === 123 ? argument.indexOf('...') : -1\n\n\t// Using object destructuring\n\tif (argument.charCodeAt(0) === 123) {\n\t\t// Since Function already format the code, styling is enforced\n\t\tif (argument.includes(keyword)) return true\n\n\t\tif (restIndex === -1) return false\n\t}\n\n\t// Match dot notation and named access\n\tif (\n\t\tfnLiteral.match(\n\t\t\tnew RegExp(`${argument}(.${keyword}|\\\\[\"${keyword}\"\\\\])`)\n\t\t)\n\t) {\n\t\treturn true\n\t}\n\n\tconst restAlias =\n\t\trestIndex !== -1\n\t\t\t? argument.slice(\n\t\t\t\t\trestIndex + 3,\n\t\t\t\t\targument.indexOf(' ', restIndex + 3)\n\t\t\t  )\n\t\t\t: undefined\n\n\tif (\n\t\tfnLiteral.match(\n\t\t\tnew RegExp(`${restAlias}(.${keyword}|\\\\[\"${keyword}\"\\\\])`)\n\t\t)\n\t)\n\t\treturn true\n\n\tconst aliases = [argument]\n\tif (restAlias) aliases.push(restAlias)\n\n\tfor (const found of fnLiteral.matchAll(findAliases)) aliases.push(found[1])\n\n\tconst destructuringRegex = new RegExp(`{.*?} = (${aliases.join('|')})`, 'g')\n\n\tfor (const [params] of fnLiteral.matchAll(destructuringRegex))\n\t\tif (params.includes(`{ ${keyword}`) || params.includes(`, ${keyword}`))\n\t\t\treturn true\n\n\treturn false\n}\n\nconst isContextPassToFunction = (fnLiteral: string) => {\n\tfnLiteral = fnLiteral.trimStart()\n\n\tif(fnLiteral.startsWith(\"[object\")) return false\n\n\tfnLiteral = fnLiteral.replaceAll(/^async /g, '')\n\n\tif (/^(\\w+)\\(/g.test(fnLiteral))\n\t\tfnLiteral = fnLiteral.slice(fnLiteral.indexOf('('))\n\n\tconst argument =\n\t\t// CharCode 40 is '('\n\t\tfnLiteral.charCodeAt(0) === 40 || fnLiteral.startsWith('function')\n\t\t\t? // Bun: (context) => {}\n\t\t\t  fnLiteral.slice(\n\t\t\t\t\tfnLiteral.indexOf('(') + 1,\n\t\t\t\t\tfnLiteral.indexOf(')')\n\t\t\t  )\n\t\t\t: // Node: context => {}\n\t\t\t  fnLiteral.slice(0, fnLiteral.indexOf('=') - 1)\n\n\tif (argument === '') return false\n\n\tconst restIndex =\n\t\targument.charCodeAt(0) === 123 ? argument.indexOf('...') : -1\n\n\tconst restAlias =\n\t\trestIndex !== -1\n\t\t\t? argument.slice(\n\t\t\t\t\trestIndex + 3,\n\t\t\t\t\targument.indexOf(' ', restIndex + 3)\n\t\t\t  )\n\t\t\t: undefined\n\n\tconst aliases = [argument]\n\tif (restAlias) aliases.push(restAlias)\n\n\tfor (const found of fnLiteral.matchAll(findAliases)) aliases.push(found[1])\n\n\tfor (const alias of aliases)\n\t\tif (new RegExp(`\\\\b\\\\w+\\\\([^)]*\\\\b${alias}\\\\b[^)]*\\\\)`).test(fnLiteral))\n\t\t\treturn true\n\n\tconst destructuringRegex = new RegExp(`{.*?} = (${aliases.join('|')})`, 'g')\n\n\tfor (const [renamed] of fnLiteral.matchAll(destructuringRegex))\n\t\tif (\n\t\t\tnew RegExp(`\\\\b\\\\w+\\\\([^)]*\\\\b${renamed}\\\\b[^)]*\\\\)`).test(\n\t\t\t\tfnLiteral\n\t\t\t)\n\t\t)\n\t\t\treturn true\n\n\treturn false\n}\n\nconst KindSymbol = Symbol.for('TypeBox.Kind')\n\nexport const hasType = (type: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (KindSymbol in schema && schema[KindSymbol] === type) return true\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasType(type, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasType(type, property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tif (KindSymbol in property && property[KindSymbol] === type)\n\t\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tschema.properties &&\n\t\tKindSymbol in schema.properties &&\n\t\tschema.properties[KindSymbol] === type\n\t)\n}\n\nexport const hasProperty = (expectedProperty: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\n\t\tif (!properties) return false\n\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (expectedProperty in property) return true\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasProperty(expectedProperty, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++) {\n\t\t\t\t\tif (hasProperty(expectedProperty, property.anyOf[i]))\n\t\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn expectedProperty in schema\n}\n\nconst TransformSymbol = Symbol.for('TypeBox.Transform')\n\nexport const hasTransform = (schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object' && schema.properties) {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasTransform(property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasTransform(property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tconst hasTransformSymbol = TransformSymbol in property\n\t\t\tif (hasTransformSymbol) return true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tTransformSymbol in schema ||\n\t\t(schema.properties && TransformSymbol in schema.properties)\n\t)\n}\n\n/**\n * This function will return the type of unioned if all unioned type is the same.\n * It's intent to use for content-type mapping only\n *\n * ```ts\n * t.Union([\n *   t.Object({\n *     password: t.String()\n *   }),\n *   t.Object({\n *     token: t.String()\n *   })\n * ])\n * ```\n */\nconst getUnionedType = (validator: TypeCheck<any> | undefined) => {\n\tif (!validator) return\n\n\t// @ts-ignore\n\tconst schema = validator?.schema\n\n\tif (schema && 'anyOf' in schema) {\n\t\tlet foundDifference = false\n\t\tconst type: string = schema.anyOf[0].type\n\n\t\tfor (const validator of schema.anyOf as { type: string }[]) {\n\t\t\tif (validator.type !== type) {\n\t\t\t\tfoundDifference = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (!foundDifference) return type\n\t}\n\n\t// @ts-ignore\n\treturn validator.schema?.type\n}\n\nconst matchFnReturn = /(?:return|=>) \\S+\\(/g\n\nexport const isAsync = (fn: Function) => {\n\tif (fn.constructor.name === 'AsyncFunction') return true\n\n\tconst literal = fn.toString()\n\tif (literal.includes('=> response.clone(')) return false\n\n\treturn !!literal.match(matchFnReturn)\n}\n\nconst getDestructureQuery = (fn: string) => {\n\tif (\n\t\t!fn.includes('query: {') ||\n\t\tfn.includes('query,') ||\n\t\tfn.includes('query }')\n\t)\n\t\treturn false\n\n\tconst start = fn.indexOf('query: {')\n\n\tfn = fn.slice(start + 9)\n\tfn = fn.slice(0, fn.indexOf('}'))\n\n\treturn fn.split(',').map((x) => {\n\t\tconst indexOf = x.indexOf(':')\n\n\t\tif (indexOf === -1) return x.trim()\n\n\t\treturn x.slice(0, indexOf).trim()\n\t})\n}\n\nexport const composeHandler = ({\n\tpath,\n\tmethod,\n\thooks,\n\tvalidator,\n\thandler,\n\thandleError,\n\tdefinitions,\n\tschema,\n\tonRequest,\n\tconfig,\n\tgetReporter,\n\tsetHeader\n}: {\n\tpath: string\n\tmethod: string\n\thooks: LifeCycleStore\n\tvalidator: SchemaValidator\n\thandler: unknown | Handler<any, any>\n\thandleError: Elysia['handleError']\n\tdefinitions?: Elysia['definitions']['type']\n\tschema?: Elysia['schema']\n\tonRequest: PreHandler<any, any>[]\n\tconfig: ElysiaConfig<any>\n\tgetReporter: () => TraceReporter\n\tsetHeader: Object | undefined\n}): ComposedHandler => {\n\tconst hasErrorHandler =\n\t\tconfig.forceErrorEncapsulation ||\n\t\thooks.error.length > 0 ||\n\t\ttypeof Bun === 'undefined' ||\n\t\thooks.onResponse.length > 0 ||\n\t\t!!hooks.trace.length\n\n\tconst isHandleFn = typeof handler === 'function'\n\tconst handle = isHandleFn ? `handler(c)` : `handler`\n\n\tconst handleResponse = hooks.onResponse.length\n\t\t? `\\n;(async () => {${hooks.onResponse\n\t\t\t\t.map((_, i) => `await res${i}(c)`)\n\t\t\t\t.join(';')}})();\\n`\n\t\t: ''\n\n\tconst traceLiteral = hooks.trace.map((x) => x.toString())\n\n\tlet hasUnknownContext = false\n\n\tif (isHandleFn && isContextPassToFunction(handler.toString()))\n\t\thasUnknownContext = true\n\n\tif (!hasUnknownContext)\n\t\tfor (const [key, value] of Object.entries(hooks)) {\n\t\t\tif (\n\t\t\t\t!Array.isArray(value) ||\n\t\t\t\t!value.length ||\n\t\t\t\t![\n\t\t\t\t\t'parse',\n\t\t\t\t\t'transform',\n\t\t\t\t\t'beforeHandle',\n\t\t\t\t\t'afterHandle',\n\t\t\t\t\t'onResponse'\n\t\t\t\t].includes(key)\n\t\t\t)\n\t\t\t\tcontinue\n\n\t\t\tfor (const handle of value) {\n\t\t\t\tif (typeof handle !== 'function') continue\n\n\t\t\t\tif (isContextPassToFunction(handle.toString())) {\n\t\t\t\t\thasUnknownContext = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasUnknownContext) break\n\t\t}\n\n\tconst traceConditions: Record<\n\t\tExclude<TraceEvent, `${string}.unit` | 'request' | 'response' | 'exit'>,\n\t\tboolean\n\t> = {\n\t\tparse: traceLiteral.some((x) => isFnUse('parse', x)),\n\t\ttransform: traceLiteral.some((x) => isFnUse('transform', x)),\n\t\thandle: traceLiteral.some((x) => isFnUse('handle', x)),\n\t\tbeforeHandle: traceLiteral.some((x) => isFnUse('beforeHandle', x)),\n\t\tafterHandle: traceLiteral.some((x) => isFnUse('afterHandle', x)),\n\t\terror: hasErrorHandler || traceLiteral.some((x) => isFnUse('error', x))\n\t}\n\n\tconst hasTrace = hooks.trace.length > 0\n\tlet fnLiteral = ''\n\n\tconst lifeCycleLiteral =\n\t\tvalidator || (method !== 'GET' && method !== 'HEAD')\n\t\t\t? [\n\t\t\t\t\thandler,\n\t\t\t\t\t...hooks.transform,\n\t\t\t\t\t...hooks.beforeHandle,\n\t\t\t\t\t...hooks.afterHandle,\n\t\t\t\t\t...hooks.mapResponse\n\t\t\t  ].map((x) => (typeof x === 'function' ? x.toString() : `${x}`))\n\t\t\t: []\n\n\tconst hasBody =\n\t\tmethod !== 'GET' &&\n\t\tmethod !== 'HEAD' &&\n\t\t(hasUnknownContext ||\n\t\t\t(hooks.type !== 'none' &&\n\t\t\t\t(!!validator.body ||\n\t\t\t\t\t!!hooks.type ||\n\t\t\t\t\tlifeCycleLiteral.some((fn) => isFnUse('body', fn)))))\n\n\tconst hasHeaders =\n\t\thasUnknownContext ||\n\t\tvalidator.headers ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('headers', fn)) ||\n\t\t(setHeader && Object.keys(setHeader).length)\n\n\tconst hasCookie =\n\t\thasUnknownContext ||\n\t\t!!validator.cookie ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('cookie', fn))\n\n\t// @ts-ignore\n\tconst cookieMeta = validator?.cookie?.schema as {\n\t\tsecrets?: string | string[]\n\t\tsign: string[] | true\n\t\tproperties: { [x: string]: Object }\n\t}\n\n\tlet encodeCookie = ''\n\n\tif (cookieMeta?.sign) {\n\t\tif (!cookieMeta.secrets)\n\t\t\tthrow new Error(\n\t\t\t\t`t.Cookie required secret which is not set in (${method}) ${path}.`\n\t\t\t)\n\n\t\tconst secret = !cookieMeta.secrets\n\t\t\t? undefined\n\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t? cookieMeta.secrets\n\t\t\t: cookieMeta.secrets[0]\n\n\t\tencodeCookie += `const _setCookie = c.set.cookie\n\t\tif(_setCookie) {`\n\n\t\tif (cookieMeta.sign === true) {\n\t\t\t// encodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\tencodeCookie += `for(const [key, cookie] of Object.entries(_setCookie)) {\n\t\t\t\tc.set.cookie[key].value = await signCookie(cookie.value, '${secret}')\n\t\t\t}`\n\t\t} else\n\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\tencodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\t}\n\n\t\tencodeCookie += '}\\n'\n\t}\n\n\tconst { composeValidation, composeResponseValidation } =\n\t\tcomposeValidationFactory(hasErrorHandler)\n\n\tif (hasHeaders) {\n\t\t// This function is Bun specific\n\t\t// @ts-ignore\n\t\tfnLiteral += headersHasToJSON\n\t\t\t? `c.headers = c.request.headers.toJSON()\\n`\n\t\t\t: `c.headers = {}\n                for (const [key, value] of c.request.headers.entries())\n\t\t\t\t\tc.headers[key] = value\n\t\t\t\t`\n\t}\n\n\tif (hasCookie) {\n\t\tconst get = (name: keyof CookieOptions, defaultValue?: unknown) => {\n\t\t\t// @ts-ignore\n\t\t\tconst value = cookieMeta?.[name] ?? defaultValue\n\t\t\tif (!value)\n\t\t\t\treturn typeof defaultValue === 'string'\n\t\t\t\t\t? `${name}: \"${defaultValue}\",`\n\t\t\t\t\t: `${name}: ${defaultValue},`\n\n\t\t\tif (typeof value === 'string') return `${name}: '${value}',`\n\t\t\tif (value instanceof Date)\n\t\t\t\treturn `${name}: new Date(${value.getTime()}),`\n\n\t\t\treturn `${name}: ${value},`\n\t\t}\n\n\t\tconst options = cookieMeta\n\t\t\t? `{\n\t\t\tsecret: ${\n\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t? `'${cookieMeta.secrets}'`\n\t\t\t\t\t\t: '[' +\n\t\t\t\t\t\t  cookieMeta.secrets.reduce(\n\t\t\t\t\t\t\t\t(a, b) => a + `'${b}',`,\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t  ) +\n\t\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\tsign: ${\n\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t? true\n\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t? '[' +\n\t\t\t\t\t  cookieMeta.sign.reduce((a, b) => a + `'${b}',`, '') +\n\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\t${get('domain')}\n\t\t\t${get('expires')}\n\t\t\t${get('httpOnly')}\n\t\t\t${get('maxAge')}\n\t\t\t${get('path', '/')}\n\t\t\t${get('priority')}\n\t\t\t${get('sameSite')}\n\t\t\t${get('secure')}\n\t\t}`\n\t\t\t: 'undefined'\n\n\t\tif (hasHeaders)\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${options})\\n`\n\t\telse\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${options})\\n`\n\t}\n\n\tconst hasQuery =\n\t\thasUnknownContext ||\n\t\tvalidator.query ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('query', fn))\n\n\tif (hasQuery) {\n\t\tlet destructured = [] as string[]\n\t\tlet referenceFullQuery = false\n\n\t\t// @ts-ignore\n\t\tif (validator.query && validator.query.schema.type === 'object') {\n\t\t\t// @ts-ignore\n\t\t\tdestructured = Object.keys(validator.query.schema.properties)\n\t\t} else\n\t\t\tfor (const event of lifeCycleLiteral) {\n\t\t\t\tconst queries = getDestructureQuery(event)\n\n\t\t\t\tif (!queries) {\n\t\t\t\t\treferenceFullQuery = true\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tfor (const query of queries)\n\t\t\t\t\tif (destructured.indexOf(query) === -1)\n\t\t\t\t\t\tdestructured.push(query)\n\t\t\t}\n\n\t\tif (!referenceFullQuery && destructured.length) {\n\t\t\tfnLiteral += `\n\t\t\tlet requestUrl = c.request.url.slice(c.qi + 1)\n\t\t\tif(requestUrl.includes('+')) requestUrl = requestUrl.replaceAll('+', ' ')\n\n\t\t\tif(c.qi !== -1) {\t\n\t\t\t\tconst url = decodeURIComponent(requestUrl)\n\t\t\t\tlet memory = 0\n\n\t\t\t\t${destructured\n\t\t\t\t\t.map(\n\t\t\t\t\t\t(name, index) => `\n\t\t\t\t\t\tmemory = url.indexOf('${name}=')\n\n\t\t\t\t\t\tconst a${index} = memory === -1 ? undefined : url.slice(memory = memory + ${\n\t\t\t\t\t\t\tname.length + 1\n\t\t\t\t\t\t}, (memory = url.indexOf('&', memory)) === -1 ? undefined : memory)`\n\t\t\t\t\t)\n\t\t\t\t\t.join('\\n')}\n\n\t\t\t\tc.query = {\n\t\t\t\t\t${destructured.map((name, index) => `${name}: a${index}`).join(', ')}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tc.query = {}\n\t\t\t}`\n\t\t} else {\n\t\t\tfnLiteral += `c.query = c.qi !== -1 ? parseQuery(decodeURIComponent(c.request.url.slice(c.qi + 1))) : {}`\n\t\t}\n\t}\n\n\tconst traceLiterals = hooks.trace.map((x) => x.toString())\n\tconst hasTraceSet = traceLiterals.some(\n\t\t(fn) => isFnUse('set', fn) || isContextPassToFunction(fn)\n\t)\n\n\thasUnknownContext || hooks.trace.some((fn) => isFnUse('set', fn.toString()))\n\n\tconst hasSet =\n\t\t(setHeader && Object.keys(setHeader).length) ||\n\t\thasTraceSet ||\n\t\thasCookie ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('set', fn)) ||\n\t\tonRequest.some((fn) => isFnUse('set', fn.toString()))\n\n\tif (hasTrace) fnLiteral += '\\nconst id = c.$$requestId\\n'\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet,\n\t\tcondition: traceConditions,\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tfnLiteral += hasErrorHandler ? '\\n try {\\n' : ''\n\n\tif (hasTraceSet) {\n\t\tfnLiteral += `\\nconst traceDone = Promise.all([`\n\t\tfor (let i = 0; i < hooks.trace.length; i++) {\n\t\t\tfnLiteral += `new Promise(r => { reporter.once(\\`res\\${id}.${i}\\`, r) }),`\n\t\t}\n\t\tfnLiteral += `])\\n`\n\t}\n\n\tconst isAsyncHandler = typeof handler === 'function' && isAsync(handler)\n\n\tconst maybeAsync =\n\t\thasCookie ||\n\t\thasBody ||\n\t\thasTraceSet ||\n\t\tisAsyncHandler ||\n\t\t!!hooks.mapResponse.length ||\n\t\thooks.parse.length > 0 ||\n\t\thooks.afterHandle.some(isAsync) ||\n\t\thooks.beforeHandle.some(isAsync) ||\n\t\thooks.transform.some(isAsync)\n\n\tconst endParse = report('parse', {\n\t\tunit: hooks.parse.length\n\t})\n\n\tif (hasBody) {\n\t\tconst type = getUnionedType(validator?.body)\n\n\t\tif (hooks.type && !Array.isArray(hooks.type)) {\n\t\t\tif (hooks.type) {\n\t\t\t\tswitch (hooks.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.json()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text':\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.text()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tfnLiteral += `c.body = parseQuery(await c.request.text())\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.arrayBuffer()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'formdata':\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tfnLiteral += `c.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hooks.parse.length) fnLiteral += '}}'\n\t\t} else {\n\t\t\tconst getAotParser = () => {\n\t\t\t\tif (hooks.parse.length && type && !Array.isArray(hooks.type)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst schema = validator?.body?.schema\n\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\thasType('File', schema) ||\n\t\t\t\t\t\t\t\thasType('Files', schema)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\treturn `c.body = {}\n\n\t\t\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t// else {\n\t\t\t\t\t\t\t// \t// Since it's an object an not accepting file\n\t\t\t\t\t\t\t// \t// we can infer that it's JSON\n\t\t\t\t\t\t\t// \tfnLiteral += `c.body = await c.request.json()\\n`\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// fnLiteral += defaultParser\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst aotParse = getAotParser()\n\n\t\t\tif (aotParse) fnLiteral += aotParse\n\t\t\telse {\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t\tfnLiteral += hasHeaders\n\t\t\t\t\t? `let contentType = c.headers['content-type']`\n\t\t\t\t\t: `let contentType = c.request.headers.get('content-type')`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tif (contentType) {\n\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\tif (index !== -1) contentType = contentType.substring(0, index)\\n`\n\n\t\t\t\tif (hooks.parse.length) {\n\t\t\t\t\tfnLiteral += `let used = false\\n`\n\n\t\t\t\t\tconst endReport = report('parse', {\n\t\t\t\t\t\tunit: hooks.parse.length\n\t\t\t\t\t})\n\n\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\tconst endUnit = report('parse.unit', {\n\t\t\t\t\t\t\tname: hooks.parse[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tconst name = `bo${i}`\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `if(!used) {\\n`\n\n\t\t\t\t\t\tfnLiteral += `let ${name} = parse[${i}](c, contentType)\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} instanceof Promise) ${name} = await ${name}\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} !== undefined) { c.body = ${name}; used = true }\\n`\n\n\t\t\t\t\t\tendUnit()\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `}`\n\t\t\t\t\t}\n\n\t\t\t\t\tendReport()\n\t\t\t\t}\n\n\t\t\t\tif (hooks.parse.length) fnLiteral += `if (!used)`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tswitch (contentType) {\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tc.body = await c.request.json()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tc.body = await c.request.text()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tc.body = parseQuery(await c.request.text())\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tc.body = await c.request.arrayBuffer();\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tc.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\\n`\n\n\t\t\t\tfnLiteral += '}\\n'\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += '\\n'\n\t}\n\n\tendParse()\n\n\tif (hooks?.transform) {\n\t\tconst endTransform = report('transform', {\n\t\t\tunit: hooks.transform.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\tconst transform = hooks.transform[i]\n\n\t\t\tconst endUnit = report('transform.unit', {\n\t\t\t\tname: transform.name\n\t\t\t})\n\n\t\t\t// @ts-ignore\n\t\t\tif (transform.$elysia === 'derive')\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `Object.assign(c, await transform[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, transform[${i}](c));`\n\t\t\telse\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `await transform[${i}](c);`\n\t\t\t\t\t: `transform[${i}](c);`\n\n\t\t\tendUnit()\n\t\t}\n\n\t\tendTransform()\n\t}\n\n\tif (validator) {\n\t\tfnLiteral += '\\n'\n\n\t\tif (validator.headers) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.headers.params))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.headers.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.headers['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(headers.Check(c.headers) === false) {\n\t\t\t\t${composeValidation('headers')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.headers.schema))\n\t\t\t\tfnLiteral += `\\nc.headers = headers.Decode(c.headers)\\n`\n\t\t}\n\n\t\tif (validator.params) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.params.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.params.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.params['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(params.Check(c.params) === false) {\n\t\t\t\t${composeValidation('params')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.params.schema))\n\t\t\t\tfnLiteral += `\\nc.params = params.Decode(c.params)\\n`\n\t\t}\n\n\t\tif (validator.query) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.query.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.query.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.query['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(query.Check(c.query) === false) {\n\t\t\t\t${composeValidation('query')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.query.schema))\n\t\t\t\t// Decode doesn't work with Object.create(null)\n\t\t\t\tfnLiteral += `\\nc.query = query.Decode(Object.assign({}, c.query))\\n`\n\t\t}\n\n\t\tif (validator.body) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.body.schema))\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n    \t\t\t\tc.body = Object.assign(${JSON.stringify(\n\t\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalidator.body.schema,\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t) ?? {}\n\t\t\t\t\t)}, c.body)\n\n    \t\t\t\tif(body.Check(c.query) === false) {\n        \t\t\t\t${composeValidation('body')}\n     \t\t\t}\n            }`\n\t\t\telse\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n\t\t\t${composeValidation('body')}\n\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.body.schema))\n\t\t\t\tfnLiteral += `\\nc.body = body.Decode(c.body)\\n`\n\t\t}\n\n\t\t// @ts-ignore\n\t\tif (isNotEmpty(validator.cookie?.schema.properties ?? {})) {\n\t\t\tfnLiteral += `const cookieValue = {}\n    \t\t\tfor(const [key, value] of Object.entries(c.cookie))\n    \t\t\t\tcookieValue[key] = value.value\\n`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.cookie.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.cookie.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tfnLiteral += `cookieValue['${key}'] = ${\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: value\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(cookie.Check(cookieValue) === false) {\n\t\t\t\t${composeValidation('cookie', 'cookieValue')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.cookie.schema))\n\t\t\t\tfnLiteral += `\\nc.cookie = params.Decode(c.cookie)\\n`\n\t\t}\n\t}\n\n\tif (hooks?.beforeHandle) {\n\t\tconst endBeforeHandle = report('beforeHandle', {\n\t\t\tunit: hooks.beforeHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\tconst beforeHandle = hooks.beforeHandle[i]\n\n\t\t\tconst endUnit = report('beforeHandle.unit', {\n\t\t\t\tname: beforeHandle.name\n\t\t\t})\n\n\t\t\tconst returning = hasReturn(beforeHandle.toString())\n\n\t\t\t// @ts-ignore\n\t\t\tif (beforeHandle.$elysia === 'resolve') {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `Object.assign(c, await beforeHandle[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, beforeHandle[${i}](c));`\n\t\t\t} else if (!returning) {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `be = await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `be = beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(be !== undefined) {\\n`\n\t\t\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\t\t\tunit: hooks.transform.length\n\t\t\t\t})\n\t\t\t\tif (hooks.afterHandle) {\n\t\t\t\t\treport('handle', {\n\t\t\t\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t\t\t\t})()\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tconst returning = hasReturn(\n\t\t\t\t\t\t\thooks.afterHandle[i].toString()\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tfnLiteral += `c.response = be\\n`\n\n\t\t\t\t\t\tif (!returning) {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `await afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t\t\t: `afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\t\t\t\tfnLiteral += `if(af !== undefined) { c.response = be = af }\\n`\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendUnit()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tendAfterHandle()\n\n\t\t\t\tif (validator.response)\n\t\t\t\t\tfnLiteral += composeResponseValidation('be')\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += `c.response = be`\n\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\t\t\t\tif(mr !== undefined) c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\t\t\t\tfnLiteral += `return mapEarlyResponse(be, c.set)}\\n`\n\t\t\t}\n\t\t}\n\n\t\tendBeforeHandle()\n\t}\n\n\tif (hooks?.afterHandle.length) {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t})\n\n\t\tif (hooks.afterHandle.length)\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = c.response = await ${handle};\\n`\n\t\t\t\t: `let r = c.response = ${handle};\\n`\n\t\telse\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\tendHandle()\n\n\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\tunit: hooks.afterHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\tconst returning = hasReturn(hooks.afterHandle[i].toString())\n\n\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t})\n\n\t\t\tif (!returning) {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif (validator.response) {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += composeResponseValidation('af')\n\n\t\t\t\t\tfnLiteral += `c.response = af }`\n\t\t\t\t} else {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += `c.response = af}\\n`\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tendAfterHandle()\n\n\t\tfnLiteral += `r = c.response\\n`\n\n\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\tfnLiteral += encodeCookie\n\n\t\tif (hooks.mapResponse.length) {\n\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\tfnLiteral += `\\nmr = onMapResponse[${i}](c)\n\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\tif(mr !== undefined) c.response = mr\\n`\n\t\t\t}\n\t\t}\n\n\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t} else {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t})\n\n\t\tif (validator.response || hooks.mapResponse.length) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) { \n\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (handler instanceof Response)\n\t\t\t\tfnLiteral += `return ${handle}.clone()\\n`\n\t\t\telse if (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t\t} else {\n\t\t\tif (traceConditions.handle || hasCookie) {\n\t\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\t\tendHandle()\n\n\t\t\t\treport('afterHandle')()\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\n\t\t\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\t\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t\t\t} else {\n\t\t\t\tendHandle()\n\n\t\t\t\tconst handled = isAsyncHandler ? `await ${handle}` : handle\n\n\t\t\t\treport('afterHandle')()\n\n\t\t\t\tif (handler instanceof Response)\n\t\t\t\t\tfnLiteral += `return ${handle}.clone()\\n`\n\t\t\t\telse if (hasSet)\n\t\t\t\t\tfnLiteral += `return mapResponse(${handled}, c.set)\\n`\n\t\t\t\telse fnLiteral += `return mapCompactResponse(${handled})\\n`\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasErrorHandler || handleResponse) {\n\t\tfnLiteral += `\n} catch(error) {`\n\n\t\tif (!maybeAsync) fnLiteral += `return (async () => {`\n\n\t\tfnLiteral += `const set = c.set\n\n\t\tif (!set.status || set.status < 300) set.status = error?.status || 500\n\t`\n\n\t\tconst endError = report('error', {\n\t\t\tunit: hooks.error.length\n\t\t})\n\t\tif (hooks.error.length) {\n\t\t\tfnLiteral += `\n\t\t\t\tc.error = error\n\t\t\t\tc.code = error.code ?? error[ERROR_CODE] ?? \"UNKNOWN\"\n\t\t\t`\n\n\t\t\tfor (let i = 0; i < hooks.error.length; i++) {\n\t\t\t\tconst name = `er${i}`\n\t\t\t\tconst endUnit = report('error.unit', {\n\t\t\t\t\tname: hooks.error[i].name\n\t\t\t\t})\n\n\t\t\t\tfnLiteral += `\\nlet ${name} = handleErrors[${i}](c)\\n`\n\n\t\t\t\tif (isAsync(hooks.error[i]))\n\t\t\t\t\tfnLiteral += `if (${name} instanceof Promise) ${name} = await ${name}\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `${name} = mapEarlyResponse(${name}, set)\\n`\n\t\t\t\tfnLiteral += `if (${name}) {`\n\t\t\t\tfnLiteral += `return ${name} }\\n`\n\t\t\t}\n\t\t}\n\n\t\tendError()\n\n\t\tfnLiteral += `return handleError(c, error)\\n\\n`\n\n\t\tif (!maybeAsync) fnLiteral += '})()'\n\n\t\tfnLiteral += '}'\n\n\t\tif (handleResponse || hasTrace) {\n\t\t\tfnLiteral += ` finally { `\n\n\t\t\tconst endResponse = report('response', {\n\t\t\t\tunit: hooks.onResponse.length\n\t\t\t})\n\n\t\t\tfnLiteral += handleResponse\n\n\t\t\tendResponse()\n\n\t\t\tfnLiteral += `}`\n\t\t}\n\t}\n\n\t// console.log(fnLiteral)\n\n\tfnLiteral = `const {\n\t\thandler,\n\t\thandleError,\n\t\thooks: {\n\t\t\ttransform,\n\t\t\tresolve,\n\t\t\tbeforeHandle,\n\t\t\tafterHandle,\n\t\t\tmapResponse: onMapResponse,\n\t\t\tparse,\n\t\t\terror: handleErrors,\n\t\t\tonResponse\n\t\t},\n\t\tvalidator: {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tparams,\n\t\t\tquery,\n\t\t\tresponse,\n\t\t\tcookie\n\t\t},\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent\n\t} = hooks\n\n\t${\n\t\thooks.onResponse.length\n\t\t\t? `const ${hooks.onResponse\n\t\t\t\t\t.map((x, i) => `res${i} = onResponse[${i}]`)\n\t\t\t\t\t.join(',')}`\n\t\t\t: ''\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function handle(c) {\n\t\t${hooks.beforeHandle.length ? 'let be' : ''}\n\t\t${hooks.afterHandle.length ? 'let af' : ''}\n\t\t${hooks.mapResponse.length ? 'let mr' : ''}\n\n\t\t${schema && definitions ? 'c.schema = schema; c.defs = definitions;' : ''}\n\t\t${fnLiteral}\n\t}`\n\n\t// console.log(fnLiteral)\n\n\tconst createHandler = Function('hooks', fnLiteral)\n\n\treturn createHandler({\n\t\thandler,\n\t\thooks,\n\t\tvalidator,\n\t\thandleError,\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent\n\t})\n}\n\nexport const composeGeneralHandler = (\n\tapp: Elysia<any, any, any, any, any, any>\n) => {\n\tlet decoratorsLiteral = ''\n\tlet fnLiteral = ''\n\n\t// @ts-ignore\n\tfor (const key of Object.keys(app.decorators))\n\t\tdecoratorsLiteral += `,${key}: app.decorators.${key}`\n\n\t// @ts-ignore\n\tconst { router, staticRouter } = app\n\n\tconst hasTrace = app.event.trace.length > 0\n\n\tconst findDynamicRoute = `\n\tconst route = router.find(request.method, path) ${\n\t\trouter.root.ALL ? '?? router.find(\"ALL\", path)' : ''\n\t}\n\tif (route === null)\n\t\treturn ${\n\t\t\tapp.event.error.length\n\t\t\t\t? `app.handleError(ctx, notFound)`\n\t\t\t\t: app.event.request.length\n\t\t\t\t? `new Response(error404Message, {\n\t\t\t\t\tstatus: ctx.set.status === 200 ? 404 : ctx.set.status,\n\t\t\t\t\theaders: ctx.set.headers\n\t\t\t\t})`\n\t\t\t\t: `error404.clone()`\n\t\t}\n\n\tctx.params = route.params\n\n\treturn route.store(ctx)`\n\n\tlet switchMap = ``\n\tfor (const [path, { code, all }] of Object.entries(staticRouter.map))\n\t\tswitchMap += `case '${path}':\\nswitch(request.method) {\\n${code}\\n${\n\t\t\tall ?? `default: break map`\n\t\t}}\\n\\n`\n\n\tconst maybeAsync = app.event.request.some(isAsync)\n\n\tfnLiteral += `const {\n\t\tapp,\n\t\tapp: { store, router, staticRouter, wsRouter },\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\trequestId,\n\t\tgetReporter,\n\t\thandleError\n\t} = data\n\n\tconst notFound = new NotFoundError()\n\n\t${app.event.request.length ? `const onRequest = app.event.request` : ''}\n\t${staticRouter.variables}\n\t${\n\t\tapp.event.error.length\n\t\t\t? ''\n\t\t\t: `\n\tconst error404Message = notFound.message.toString()\n\tconst error404 = new Response(error404Message, { status: 404 });\n\t`\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function map(request) {\\n`\n\n\tif(app.event.request.length)\n\t\tfnLiteral += `let re`\n\n\n\tconst traceLiteral = app.event.trace.map((x) => x.toString())\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet: app.event.trace.some((fn) => {\n\t\t\tconst literal = fn.toString()\n\n\t\t\treturn isFnUse('set', literal) || isContextPassToFunction(literal)\n\t\t}),\n\t\tcondition: {\n\t\t\trequest: traceLiteral.some(\n\t\t\t\t(x) => isFnUse('request', x) || isContextPassToFunction(x)\n\t\t\t)\n\t\t},\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tif (app.event.request.length) {\n\t\tfnLiteral += `\n\t\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\n\t\t\tconst ctx = {\n\t\t\t\trequest,\n\t\t\t\tstore,\n\t\t\t\tset: {\n\t\t\t\t\theaders: ${\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tObject.keys(app.setHeaders ?? {}).length\n\t\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t\t: '{}'\n\t\t\t\t\t},\n\t\t\t\t\tstatus: 200\n\t\t\t\t}\n\t\t\t\t${hasTrace ? ',$$requestId: +id' : ''}\n\t\t\t\t${decoratorsLiteral}\n\t\t\t}\n\t\t`\n\n\t\tconst endReport = report('request', {\n\t\t\tattribute: 'ctx',\n\t\t\tunit: app.event.request.length\n\t\t})\n\n\t\tfnLiteral += `\\n try {\\n`\n\n\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\tconst fn = app.event.request[i]\n\t\t\tconst withReturn = hasReturn(fn.toString())\n\t\t\tconst maybeAsync = isAsync(fn)\n\n\t\t\tconst endUnit = report('request.unit', {\n\t\t\t\tname: app.event.request[i].name\n\t\t\t})\n\n\t\t\tif (withReturn) {\n\t\t\t\tfnLiteral += `re = mapEarlyResponse(\n\t\t\t\t\t${maybeAsync ? 'await' : ''} onRequest[${i}](ctx),\n\t\t\t\t\tctx.set\n\t\t\t\t)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif(withReturn)\n\t\t\t\t\tfnLiteral += `if(re !== undefined) return re\\n`\n\t\t\t} else {\n\t\t\t\tfnLiteral += `${\n\t\t\t\t\tmaybeAsync ? 'await' : ''\n\t\t\t\t} onRequest[${i}](ctx)\\n`\n\t\t\t\tendUnit()\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += `} catch (error) {\n\t\t\treturn app.handleError(ctx, error)\n\t\t}`\n\n\t\tendReport()\n\n\t\tfnLiteral += `\n\t\tconst url = request.url\n\t\tconst s = url.indexOf('/', 11)\n\t\tconst qi = ctx.qi = url.indexOf('?', s + 1)\n\t\tconst path = ctx.path = url.substring(s, qi === -1 ? undefined : qi)`\n\t} else {\n\t\tfnLiteral += `\n\t\tconst url = request.url\n\t\tconst s = url.indexOf('/', 11)\n\t\tconst qi = url.indexOf('?', s + 1)\n\t\tconst path = url.substring(s, qi === -1 ? undefined : qi)\n\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\t\tconst ctx = {\n\t\t\trequest,\n\t\t\tstore,\n\t\t\tqi,\n\t\t\tpath,\n\t\t\tset: {\n\t\t\t\theaders: ${\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tObject.keys(app.setHeaders ?? {}).length\n\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t: '{}'\n\t\t\t\t},\n\t\t\t\tstatus: 200\n\t\t\t}\n\t\t\t${hasTrace ? ',$$requestId: id' : ''}\n\t\t\t${decoratorsLiteral}\n\t\t}`\n\n\t\treport('request', {\n\t\t\tunit: app.event.request.length,\n\t\t\tattribute:\n\t\t\t\ttraceLiteral.some((x) => isFnUse('context', x)) ||\n\t\t\t\ttraceLiteral.some((x) => isFnUse('store', x)) ||\n\t\t\t\ttraceLiteral.some((x) => isFnUse('set', x))\n\t\t\t\t\t? 'ctx'\n\t\t\t\t\t: ''\n\t\t})()\n\t}\n\n\t// @ts-ignore\n\tconst wsPaths = app.wsPaths\n\t// @ts-ignore\n\tconst wsRouter = app.wsRouter\n\n\tif (Object.keys(wsPaths).length || wsRouter.history.length) {\n\t\tfnLiteral += `\n\t\t\tif(request.method === 'GET') {\n\t\t\t\tswitch(path) {`\n\n\t\tfor (const [path, index] of Object.entries(wsPaths)) {\n\t\t\tfnLiteral += `\n\t\t\t\t\tcase '${path}':\n\t\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket')\n\t\t\t\t\t\t\treturn st${index}(ctx)\n\n\t\t\t\t\t\tbreak`\n\t\t}\n\n\t\tfnLiteral += `\n\t\t\t\tdefault:\n\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket') {\n\t\t\t\t\t\tconst route = wsRouter.find('ws', path)\n\n\t\t\t\t\t\tif(route) {\n\t\t\t\t\t\t\tctx.params = route.params\n\n\t\t\t\t\t\t\treturn route.store(ctx)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\\n`\n\t}\n\n\tfnLiteral += `\n\t\tmap: switch(path) {\n\t\t\t${switchMap}\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t${findDynamicRoute}\n\t}`\n\n\tconst handleError = composeErrorHandler(app) as any\n\n\t// @ts-ignore\n\tapp.handleError = handleError\n\n\t// console.log(fnLiteral)\n\n\treturn Function(\n\t\t'data',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\t// @ts-ignore\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\thandleError\n\t})\n}\n\nexport const composeErrorHandler = (\n\tapp: Elysia<any, any, any, any, any, any>\n) => {\n\tlet fnLiteral = `const {\n\t\tapp: { event: { error: onError, onResponse: res } },\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t} = inject\n\n\treturn ${\n\t\tapp.event.error.find(isAsync) ? 'async' : ''\n\t} function(context, error) {\n\t\tlet r\n\n\t\tconst { set } = context\n\n\t\tcontext.code = error.code\n\t\tcontext.error = error\n\n\t\tif(error[ELYSIA_RESPONSE]) {\n\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\terror.message = error.response\n\t\t}\n`\n\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\tconst handler = app.event.error[i]\n\n\t\tconst response = `${\n\t\t\tisAsync(handler) ? 'await ' : ''\n\t\t}onError[${i}](context)`\n\n\t\tif (hasReturn(handler.toString()))\n\t\t\tfnLiteral += `r = ${response}; if(r !== undefined) {\n\t\t\t\tif(r instanceof Response) return r\n\n\t\t\t\tif(r[ELYSIA_RESPONSE]) {\n\t\t\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\t\t\terror.message = error.response\n\t\t\t\t}\n\t\t\n\t\t\t\tif(set.status === 200) set.status = error.status\n\t\t\t\treturn mapResponse(r, set)\n\t\t\t}\\n`\n\t\telse fnLiteral += response + '\\n'\n\t}\n\n\tfnLiteral += `if(error.constructor.name === \"ValidationError\" || error.constructor.name === \"TransformDecodeError\") {\n\t\tset.status = error.status ?? 400\n\t\treturn new Response(\n\t\t\terror.message,\n\t\t\t{ headers: set.headers, status: set.status }\n\t\t)\n\t} else {\n\t\tif(error.code && typeof error.status === \"number\")\n\t\t\treturn new Response(\n\t\t\t\terror.message,\n\t\t\t\t{ headers: set.headers, status: error.status }\n\t\t\t)\n\n\t\treturn mapResponse(error, set)\n\t}\n}`\n\n\treturn Function(\n\t\t'inject',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t})\n}\n",
  "import { type Elysia } from '.'\n\nimport { Value } from '@sinclair/typebox/value'\nimport { TypeCheck } from '@sinclair/typebox/compiler'\nimport type { TAnySchema } from '@sinclair/typebox'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\n// @ts-ignore\nimport decodeURIComponent from 'fast-decode-uri-component'\n\nimport { signCookie } from './utils'\n\nimport {\n\tmapEarlyResponse,\n\tmapResponse,\n\tmapCompactResponse,\n\tisNotEmpty\n} from './handler'\nimport {\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tERROR_CODE,\n\tELYSIA_RESPONSE\n} from './error'\n\nimport { CookieOptions, parseCookie } from './cookie'\n\nimport type {\n\tComposedHandler,\n\tElysiaConfig,\n\tHandler,\n\tLifeCycleStore,\n\tPreHandler,\n\tSchemaValidator,\n\tTraceEvent,\n\tTraceReporter\n} from './types'\n\nconst headersHasToJSON = (new Headers() as Headers).toJSON\nconst findAliases = new RegExp(` (\\\\w+) = context`, 'g')\n\nconst requestId = { value: 0 }\n\nconst createReport = ({\n\thasTrace,\n\thasTraceSet = false,\n\taddFn,\n\tcondition = {}\n}: {\n\thasTrace: boolean | number\n\thasTraceSet?: boolean\n\taddFn(string: string): void\n\tcondition: Partial<Record<TraceEvent, boolean>>\n}) => {\n\tif (hasTrace) {\n\t\taddFn(`\\nconst reporter = getReporter()\\n`)\n\n\t\treturn (\n\t\t\tevent: TraceEvent,\n\t\t\t{\n\t\t\t\tname,\n\t\t\t\tattribute = '',\n\t\t\t\tunit = 0\n\t\t\t}: {\n\t\t\t\tname?: string\n\t\t\t\tattribute?: string\n\t\t\t\tunit?: number\n\t\t\t} = {}\n\t\t) => {\n\t\t\tconst dotIndex = event.indexOf('.')\n\t\t\tconst isGroup = dotIndex === -1\n\n\t\t\tif (\n\t\t\t\tevent !== 'request' &&\n\t\t\t\tevent !== 'response' &&\n\t\t\t\t!condition[\n\t\t\t\t\t(isGroup\n\t\t\t\t\t\t? event\n\t\t\t\t\t\t: event.slice(0, dotIndex)) as keyof typeof condition\n\t\t\t\t]\n\t\t\t)\n\t\t\t\treturn () => {\n\t\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t\t}\n\n\t\t\tif (isGroup) name ||= event\n\t\t\telse name ||= 'anonymous'\n\n\t\t\taddFn(\n\t\t\t\t'\\n' +\n\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\tid,\n\t\t\t\t\tevent: '${event}',\n\t\t\t\t\ttype: 'begin',\n\t\t\t\t\tname: '${name}',\n\t\t\t\t\ttime: performance.now(),\n\t\t\t\t\t${isGroup ? `unit: ${unit},` : ''}\n\t\t\t\t\t${attribute}\n\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t'\\n'\n\t\t\t)\n\n\t\t\tlet handled = false\n\n\t\t\treturn () => {\n\t\t\t\tif (handled) return\n\n\t\t\t\thandled = true\n\t\t\t\taddFn(\n\t\t\t\t\t'\\n' +\n\t\t\t\t\t\t`reporter.emit('event', {\n\t\t\t\t\t\t\tid,\n\t\t\t\t\t\t\tevent: '${event}',\n\t\t\t\t\t\t\ttype: 'end',\n\t\t\t\t\t\t\ttime: performance.now()\n\t\t\t\t\t\t})`.replace(/(\\t| |\\n)/g, '') +\n\t\t\t\t\t\t'\\n'\n\t\t\t\t)\n\n\t\t\t\tif (hasTraceSet && event === 'afterHandle')\n\t\t\t\t\taddFn(`\\nawait traceDone\\n`)\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn () => () => {}\n\t}\n}\n\nexport const hasReturn = (fnLiteral: string) => {\n\tconst parenthesisEnd = fnLiteral.indexOf(')')\n\n\t// Is direct arrow function return eg. () => 1\n\tif (\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 2) === 61 &&\n\t\tfnLiteral.charCodeAt(parenthesisEnd + 5) !== 123\n\t) {\n\t\treturn true\n\t}\n\n\treturn fnLiteral.includes('return')\n}\n\nconst composeValidationFactory = (\n\thasErrorHandler: boolean,\n\t{\n\t\tinjectResponse = ''\n\t}: {\n\t\tinjectResponse?: string\n\t} = {}\n) => ({\n\tcomposeValidation: (type: string, value = `c.${type}`) =>\n\t\thasErrorHandler\n\t\t\t? `c.set.status = 400; throw new ValidationError(\n'${type}',\n${type},\n${value}\n)`\n\t\t\t: `c.set.status = 400; return new ValidationError(\n\t'${type}',\n\t${type},\n\t${value}\n).toResponse(c.set.headers)`,\n\tcomposeResponseValidation: (name = 'r') => {\n\t\tconst returnError = hasErrorHandler\n\t\t\t? `throw new ValidationError(\n'response',\nresponse[c.set.status],\n${name}\n)`\n\t\t\t: `return new ValidationError(\n'response',\nresponse[c.set.status],\n${name}\n).toResponse(c.set.headers)`\n\n\t\treturn `\\n${injectResponse}\n\t\tif(!(${name} instanceof Response) && response[c.set.status]?.Check(${name}) === false) {\n\tif(!(response instanceof Error))\n\t\t${returnError}\n}\\n`\n\t}\n})\n\nexport const isFnUse = (keyword: string, fnLiteral: string) => {\n\tif (fnLiteral.startsWith('[object ')) return false\n\n\tfnLiteral = fnLiteral.trimStart()\n\tfnLiteral = fnLiteral.replaceAll(/^async /g, '')\n\n\tif (/^(\\w+)\\(/g.test(fnLiteral))\n\t\tfnLiteral = fnLiteral.slice(fnLiteral.indexOf('('))\n\n\tconst argument =\n\t\t// CharCode 40 is '('\n\t\tfnLiteral.charCodeAt(0) === 40 || fnLiteral.startsWith('function')\n\t\t\t? // Bun: (context) => {}\n\t\t\t  fnLiteral.slice(\n\t\t\t\t\tfnLiteral.indexOf('(') + 1,\n\t\t\t\t\tfnLiteral.indexOf(')')\n\t\t\t  )\n\t\t\t: // Node: context => {}\n\t\t\t  fnLiteral.slice(0, fnLiteral.indexOf('=') - 1)\n\n\tif (argument === '') return false\n\n\tconst restIndex =\n\t\targument.charCodeAt(0) === 123 ? argument.indexOf('...') : -1\n\n\t// Using object destructuring\n\tif (argument.charCodeAt(0) === 123) {\n\t\t// Since Function already format the code, styling is enforced\n\t\tif (argument.includes(keyword)) return true\n\n\t\tif (restIndex === -1) return false\n\t}\n\n\t// Match dot notation and named access\n\tif (\n\t\tfnLiteral.match(\n\t\t\tnew RegExp(`${argument}(.${keyword}|\\\\[\"${keyword}\"\\\\])`)\n\t\t)\n\t) {\n\t\treturn true\n\t}\n\n\tconst restAlias =\n\t\trestIndex !== -1\n\t\t\t? argument.slice(\n\t\t\t\t\trestIndex + 3,\n\t\t\t\t\targument.indexOf(' ', restIndex + 3)\n\t\t\t  )\n\t\t\t: undefined\n\n\tif (\n\t\tfnLiteral.match(\n\t\t\tnew RegExp(`${restAlias}(.${keyword}|\\\\[\"${keyword}\"\\\\])`)\n\t\t)\n\t)\n\t\treturn true\n\n\tconst aliases = [argument]\n\tif (restAlias) aliases.push(restAlias)\n\n\tfor (const found of fnLiteral.matchAll(findAliases)) aliases.push(found[1])\n\n\tconst destructuringRegex = new RegExp(`{.*?} = (${aliases.join('|')})`, 'g')\n\n\tfor (const [params] of fnLiteral.matchAll(destructuringRegex))\n\t\tif (params.includes(`{ ${keyword}`) || params.includes(`, ${keyword}`))\n\t\t\treturn true\n\n\treturn false\n}\n\nconst isContextPassToFunction = (fnLiteral: string) => {\n\tfnLiteral = fnLiteral.trimStart()\n\n\tif(fnLiteral.startsWith(\"[object\")) return false\n\n\tfnLiteral = fnLiteral.replaceAll(/^async /g, '')\n\n\tif (/^(\\w+)\\(/g.test(fnLiteral))\n\t\tfnLiteral = fnLiteral.slice(fnLiteral.indexOf('('))\n\n\tconst argument =\n\t\t// CharCode 40 is '('\n\t\tfnLiteral.charCodeAt(0) === 40 || fnLiteral.startsWith('function')\n\t\t\t? // Bun: (context) => {}\n\t\t\t  fnLiteral.slice(\n\t\t\t\t\tfnLiteral.indexOf('(') + 1,\n\t\t\t\t\tfnLiteral.indexOf(')')\n\t\t\t  )\n\t\t\t: // Node: context => {}\n\t\t\t  fnLiteral.slice(0, fnLiteral.indexOf('=') - 1)\n\n\tif (argument === '') return false\n\n\tconst restIndex =\n\t\targument.charCodeAt(0) === 123 ? argument.indexOf('...') : -1\n\n\tconst restAlias =\n\t\trestIndex !== -1\n\t\t\t? argument.slice(\n\t\t\t\t\trestIndex + 3,\n\t\t\t\t\targument.indexOf(' ', restIndex + 3)\n\t\t\t  )\n\t\t\t: undefined\n\n\tconst aliases = [argument]\n\tif (restAlias) aliases.push(restAlias)\n\n\tfor (const found of fnLiteral.matchAll(findAliases)) aliases.push(found[1])\n\n\tfor (const alias of aliases)\n\t\tif (new RegExp(`\\\\b\\\\w+\\\\([^)]*\\\\b${alias}\\\\b[^)]*\\\\)`).test(fnLiteral))\n\t\t\treturn true\n\n\tconst destructuringRegex = new RegExp(`{.*?} = (${aliases.join('|')})`, 'g')\n\n\tfor (const [renamed] of fnLiteral.matchAll(destructuringRegex))\n\t\tif (\n\t\t\tnew RegExp(`\\\\b\\\\w+\\\\([^)]*\\\\b${renamed}\\\\b[^)]*\\\\)`).test(\n\t\t\t\tfnLiteral\n\t\t\t)\n\t\t)\n\t\t\treturn true\n\n\treturn false\n}\n\nconst KindSymbol = Symbol.for('TypeBox.Kind')\n\nexport const hasType = (type: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (KindSymbol in schema && schema[KindSymbol] === type) return true\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasType(type, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasType(type, property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tif (KindSymbol in property && property[KindSymbol] === type)\n\t\t\t\treturn true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tschema.properties &&\n\t\tKindSymbol in schema.properties &&\n\t\tschema.properties[KindSymbol] === type\n\t)\n}\n\nexport const hasProperty = (expectedProperty: string, schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object') {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\n\t\tif (!properties) return false\n\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (expectedProperty in property) return true\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasProperty(expectedProperty, property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++) {\n\t\t\t\t\tif (hasProperty(expectedProperty, property.anyOf[i]))\n\t\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn expectedProperty in schema\n}\n\nconst TransformSymbol = Symbol.for('TypeBox.Transform')\n\nexport const hasTransform = (schema: TAnySchema) => {\n\tif (!schema) return\n\n\tif (schema.type === 'object' && schema.properties) {\n\t\tconst properties = schema.properties as Record<string, TAnySchema>\n\t\tfor (const key of Object.keys(properties)) {\n\t\t\tconst property = properties[key]\n\n\t\t\tif (property.type === 'object') {\n\t\t\t\tif (hasTransform(property)) return true\n\t\t\t} else if (property.anyOf) {\n\t\t\t\tfor (let i = 0; i < property.anyOf.length; i++)\n\t\t\t\t\tif (hasTransform(property.anyOf[i])) return true\n\t\t\t}\n\n\t\t\tconst hasTransformSymbol = TransformSymbol in property\n\t\t\tif (hasTransformSymbol) return true\n\t\t}\n\n\t\treturn false\n\t}\n\n\treturn (\n\t\tTransformSymbol in schema ||\n\t\t(schema.properties && TransformSymbol in schema.properties)\n\t)\n}\n\n/**\n * This function will return the type of unioned if all unioned type is the same.\n * It's intent to use for content-type mapping only\n *\n * ```ts\n * t.Union([\n *   t.Object({\n *     password: t.String()\n *   }),\n *   t.Object({\n *     token: t.String()\n *   })\n * ])\n * ```\n */\nconst getUnionedType = (validator: TypeCheck<any> | undefined) => {\n\tif (!validator) return\n\n\t// @ts-ignore\n\tconst schema = validator?.schema\n\n\tif (schema && 'anyOf' in schema) {\n\t\tlet foundDifference = false\n\t\tconst type: string = schema.anyOf[0].type\n\n\t\tfor (const validator of schema.anyOf as { type: string }[]) {\n\t\t\tif (validator.type !== type) {\n\t\t\t\tfoundDifference = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tif (!foundDifference) return type\n\t}\n\n\t// @ts-ignore\n\treturn validator.schema?.type\n}\n\nconst matchFnReturn = /(?:return|=>) \\S+\\(/g\n\nexport const isAsync = (fn: Function) => {\n\tif (fn.constructor.name === 'AsyncFunction') return true\n\n\tconst literal = fn.toString()\n\tif (literal.includes('=> response.clone(')) return false\n\n\treturn !!literal.match(matchFnReturn)\n}\n\nconst getDestructureQuery = (fn: string) => {\n\tif (\n\t\t!fn.includes('query: {') ||\n\t\tfn.includes('query,') ||\n\t\tfn.includes('query }')\n\t)\n\t\treturn false\n\n\tconst start = fn.indexOf('query: {')\n\n\tfn = fn.slice(start + 9)\n\tfn = fn.slice(0, fn.indexOf('}'))\n\n\treturn fn.split(',').map((x) => {\n\t\tconst indexOf = x.indexOf(':')\n\n\t\tif (indexOf === -1) return x.trim()\n\n\t\treturn x.slice(0, indexOf).trim()\n\t})\n}\n\nexport const composeHandler = ({\n\tpath,\n\tmethod,\n\thooks,\n\tvalidator,\n\thandler,\n\thandleError,\n\tdefinitions,\n\tschema,\n\tonRequest,\n\tconfig,\n\tgetReporter,\n\tsetHeader\n}: {\n\tpath: string\n\tmethod: string\n\thooks: LifeCycleStore\n\tvalidator: SchemaValidator\n\thandler: unknown | Handler<any, any>\n\thandleError: Elysia['handleError']\n\tdefinitions?: Elysia['definitions']['type']\n\tschema?: Elysia['schema']\n\tonRequest: PreHandler<any, any>[]\n\tconfig: ElysiaConfig<any>\n\tgetReporter: () => TraceReporter\n\tsetHeader: Object | undefined\n}): ComposedHandler => {\n\tconst hasErrorHandler =\n\t\tconfig.forceErrorEncapsulation ||\n\t\thooks.error.length > 0 ||\n\t\ttypeof Bun === 'undefined' ||\n\t\thooks.onResponse.length > 0 ||\n\t\t!!hooks.trace.length\n\n\tconst isHandleFn = typeof handler === 'function'\n\tconst handle = isHandleFn ? `handler(c)` : `handler`\n\n\tconst handleResponse = hooks.onResponse.length\n\t\t? `\\n;(async () => {${hooks.onResponse\n\t\t\t\t.map((_, i) => `await res${i}(c)`)\n\t\t\t\t.join(';')}})();\\n`\n\t\t: ''\n\n\tconst traceLiteral = hooks.trace.map((x) => x.toString())\n\n\tlet hasUnknownContext = false\n\n\tif (isHandleFn && isContextPassToFunction(handler.toString()))\n\t\thasUnknownContext = true\n\n\tif (!hasUnknownContext)\n\t\tfor (const [key, value] of Object.entries(hooks)) {\n\t\t\tif (\n\t\t\t\t!Array.isArray(value) ||\n\t\t\t\t!value.length ||\n\t\t\t\t![\n\t\t\t\t\t'parse',\n\t\t\t\t\t'transform',\n\t\t\t\t\t'beforeHandle',\n\t\t\t\t\t'afterHandle',\n\t\t\t\t\t'onResponse'\n\t\t\t\t].includes(key)\n\t\t\t)\n\t\t\t\tcontinue\n\n\t\t\tfor (const handle of value) {\n\t\t\t\tif (typeof handle !== 'function') continue\n\n\t\t\t\tif (isContextPassToFunction(handle.toString())) {\n\t\t\t\t\thasUnknownContext = true\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasUnknownContext) break\n\t\t}\n\n\tconst traceConditions: Record<\n\t\tExclude<TraceEvent, `${string}.unit` | 'request' | 'response' | 'exit'>,\n\t\tboolean\n\t> = {\n\t\tparse: traceLiteral.some((x) => isFnUse('parse', x)),\n\t\ttransform: traceLiteral.some((x) => isFnUse('transform', x)),\n\t\thandle: traceLiteral.some((x) => isFnUse('handle', x)),\n\t\tbeforeHandle: traceLiteral.some((x) => isFnUse('beforeHandle', x)),\n\t\tafterHandle: traceLiteral.some((x) => isFnUse('afterHandle', x)),\n\t\terror: hasErrorHandler || traceLiteral.some((x) => isFnUse('error', x))\n\t}\n\n\tconst hasTrace = hooks.trace.length > 0\n\tlet fnLiteral = ''\n\n\tconst lifeCycleLiteral =\n\t\tvalidator || (method !== 'GET' && method !== 'HEAD')\n\t\t\t? [\n\t\t\t\t\thandler,\n\t\t\t\t\t...hooks.transform,\n\t\t\t\t\t...hooks.beforeHandle,\n\t\t\t\t\t...hooks.afterHandle,\n\t\t\t\t\t...hooks.mapResponse\n\t\t\t  ].map((x) => (typeof x === 'function' ? x.toString() : `${x}`))\n\t\t\t: []\n\n\tconst hasBody =\n\t\tmethod !== 'GET' &&\n\t\tmethod !== 'HEAD' &&\n\t\t(hasUnknownContext ||\n\t\t\t(hooks.type !== 'none' &&\n\t\t\t\t(!!validator.body ||\n\t\t\t\t\t!!hooks.type ||\n\t\t\t\t\tlifeCycleLiteral.some((fn) => isFnUse('body', fn)))))\n\n\tconst hasHeaders =\n\t\thasUnknownContext ||\n\t\tvalidator.headers ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('headers', fn)) ||\n\t\t(setHeader && Object.keys(setHeader).length)\n\n\tconst hasCookie =\n\t\thasUnknownContext ||\n\t\t!!validator.cookie ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('cookie', fn))\n\n\t// @ts-ignore\n\tconst cookieMeta = validator?.cookie?.schema as {\n\t\tsecrets?: string | string[]\n\t\tsign: string[] | true\n\t\tproperties: { [x: string]: Object }\n\t}\n\n\tlet encodeCookie = ''\n\n\tif (cookieMeta?.sign) {\n\t\tif (!cookieMeta.secrets)\n\t\t\tthrow new Error(\n\t\t\t\t`t.Cookie required secret which is not set in (${method}) ${path}.`\n\t\t\t)\n\n\t\tconst secret = !cookieMeta.secrets\n\t\t\t? undefined\n\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t? cookieMeta.secrets\n\t\t\t: cookieMeta.secrets[0]\n\n\t\tencodeCookie += `const _setCookie = c.set.cookie\n\t\tif(_setCookie) {`\n\n\t\tif (cookieMeta.sign === true) {\n\t\t\t// encodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\tencodeCookie += `for(const [key, cookie] of Object.entries(_setCookie)) {\n\t\t\t\tc.set.cookie[key].value = await signCookie(cookie.value, '${secret}')\n\t\t\t}`\n\t\t} else\n\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\tencodeCookie += `if(_setCookie['${name}']?.value) { c.set.cookie['${name}'].value = await signCookie(_setCookie['${name}'].value, '${secret}') }\\n`\n\t\t\t}\n\n\t\tencodeCookie += '}\\n'\n\t}\n\n\tconst { composeValidation, composeResponseValidation } =\n\t\tcomposeValidationFactory(hasErrorHandler)\n\n\tif (hasHeaders) {\n\t\t// This function is Bun specific\n\t\t// @ts-ignore\n\t\tfnLiteral += headersHasToJSON\n\t\t\t? `c.headers = c.request.headers.toJSON()\\n`\n\t\t\t: `c.headers = {}\n                for (const [key, value] of c.request.headers.entries())\n\t\t\t\t\tc.headers[key] = value\n\t\t\t\t`\n\t}\n\n\tif (hasCookie) {\n\t\tconst get = (name: keyof CookieOptions, defaultValue?: unknown) => {\n\t\t\t// @ts-ignore\n\t\t\tconst value = cookieMeta?.[name] ?? defaultValue\n\t\t\tif (!value)\n\t\t\t\treturn typeof defaultValue === 'string'\n\t\t\t\t\t? `${name}: \"${defaultValue}\",`\n\t\t\t\t\t: `${name}: ${defaultValue},`\n\n\t\t\tif (typeof value === 'string') return `${name}: '${value}',`\n\t\t\tif (value instanceof Date)\n\t\t\t\treturn `${name}: new Date(${value.getTime()}),`\n\n\t\t\treturn `${name}: ${value},`\n\t\t}\n\n\t\tconst options = cookieMeta\n\t\t\t? `{\n\t\t\tsecret: ${\n\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t? `'${cookieMeta.secrets}'`\n\t\t\t\t\t\t: '[' +\n\t\t\t\t\t\t  cookieMeta.secrets.reduce(\n\t\t\t\t\t\t\t\t(a, b) => a + `'${b}',`,\n\t\t\t\t\t\t\t\t''\n\t\t\t\t\t\t  ) +\n\t\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\tsign: ${\n\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t? true\n\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t? '[' +\n\t\t\t\t\t  cookieMeta.sign.reduce((a, b) => a + `'${b}',`, '') +\n\t\t\t\t\t  ']'\n\t\t\t\t\t: 'undefined'\n\t\t\t},\n\t\t\t${get('domain')}\n\t\t\t${get('expires')}\n\t\t\t${get('httpOnly')}\n\t\t\t${get('maxAge')}\n\t\t\t${get('path', '/')}\n\t\t\t${get('priority')}\n\t\t\t${get('sameSite')}\n\t\t\t${get('secure')}\n\t\t}`\n\t\t\t: 'undefined'\n\n\t\tif (hasHeaders)\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.headers.cookie, ${options})\\n`\n\t\telse\n\t\t\tfnLiteral += `\\nc.cookie = await parseCookie(c.set, c.request.headers.get('cookie'), ${options})\\n`\n\t}\n\n\tconst hasQuery =\n\t\thasUnknownContext ||\n\t\tvalidator.query ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('query', fn))\n\n\tif (hasQuery) {\n\t\tlet destructured = [] as string[]\n\t\tlet referenceFullQuery = false\n\n\t\t// @ts-ignore\n\t\tif (validator.query && validator.query.schema.type === 'object') {\n\t\t\t// @ts-ignore\n\t\t\tdestructured = Object.keys(validator.query.schema.properties)\n\t\t} else\n\t\t\tfor (const event of lifeCycleLiteral) {\n\t\t\t\tconst queries = getDestructureQuery(event)\n\n\t\t\t\tif (!queries) {\n\t\t\t\t\treferenceFullQuery = true\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\tfor (const query of queries)\n\t\t\t\t\tif (destructured.indexOf(query) === -1)\n\t\t\t\t\t\tdestructured.push(query)\n\t\t\t}\n\n\t\tif (!referenceFullQuery && destructured.length) {\n\t\t\tfnLiteral += `\n\t\t\tlet requestUrl = c.request.url.slice(c.qi + 1)\n\t\t\tif(requestUrl.includes('+')) requestUrl = requestUrl.replaceAll('+', ' ')\n\n\t\t\tif(c.qi !== -1) {\t\n\t\t\t\tconst url = decodeURIComponent(requestUrl)\n\t\t\t\tlet memory = 0\n\n\t\t\t\t${destructured\n\t\t\t\t\t.map(\n\t\t\t\t\t\t(name, index) => `\n\t\t\t\t\t\tmemory = url.indexOf('${name}=')\n\n\t\t\t\t\t\tconst a${index} = memory === -1 ? undefined : url.slice(memory = memory + ${\n\t\t\t\t\t\t\tname.length + 1\n\t\t\t\t\t\t}, (memory = url.indexOf('&', memory)) === -1 ? undefined : memory)`\n\t\t\t\t\t)\n\t\t\t\t\t.join('\\n')}\n\n\t\t\t\tc.query = {\n\t\t\t\t\t${destructured.map((name, index) => `${name}: a${index}`).join(', ')}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tc.query = {}\n\t\t\t}`\n\t\t} else {\n\t\t\tfnLiteral += `c.query = c.qi !== -1 ? parseQuery(decodeURIComponent(c.request.url.slice(c.qi + 1))) : {}`\n\t\t}\n\t}\n\n\tconst traceLiterals = hooks.trace.map((x) => x.toString())\n\tconst hasTraceSet = traceLiterals.some(\n\t\t(fn) => isFnUse('set', fn) || isContextPassToFunction(fn)\n\t)\n\n\thasUnknownContext || hooks.trace.some((fn) => isFnUse('set', fn.toString()))\n\n\tconst hasSet =\n\t\t(setHeader && Object.keys(setHeader).length) ||\n\t\thasTraceSet ||\n\t\thasCookie ||\n\t\tlifeCycleLiteral.some((fn) => isFnUse('set', fn)) ||\n\t\tonRequest.some((fn) => isFnUse('set', fn.toString()))\n\n\tif (hasTrace) fnLiteral += '\\nconst id = c.$$requestId\\n'\n\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet,\n\t\tcondition: traceConditions,\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tfnLiteral += hasErrorHandler ? '\\n try {\\n' : ''\n\n\tif (hasTraceSet) {\n\t\tfnLiteral += `\\nconst traceDone = Promise.all([`\n\t\tfor (let i = 0; i < hooks.trace.length; i++) {\n\t\t\tfnLiteral += `new Promise(r => { reporter.once(\\`res\\${id}.${i}\\`, r) }),`\n\t\t}\n\t\tfnLiteral += `])\\n`\n\t}\n\n\tconst isAsyncHandler = typeof handler === 'function' && isAsync(handler)\n\n\tconst maybeAsync =\n\t\thasCookie ||\n\t\thasBody ||\n\t\thasTraceSet ||\n\t\tisAsyncHandler ||\n\t\t!!hooks.mapResponse.length ||\n\t\thooks.parse.length > 0 ||\n\t\thooks.afterHandle.some(isAsync) ||\n\t\thooks.beforeHandle.some(isAsync) ||\n\t\thooks.transform.some(isAsync)\n\n\tconst endParse = report('parse', {\n\t\tunit: hooks.parse.length\n\t})\n\n\tif (hasBody) {\n\t\tconst type = getUnionedType(validator?.body)\n\n\t\tif (hooks.type && !Array.isArray(hooks.type)) {\n\t\t\tif (hooks.type) {\n\t\t\t\tswitch (hooks.type) {\n\t\t\t\t\tcase 'json':\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.json()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text':\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.text()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tfnLiteral += `c.body = parseQuery(await c.request.text())\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tfnLiteral += `c.body = await c.request.arrayBuffer()\\n`\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'formdata':\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tfnLiteral += `c.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hooks.parse.length) fnLiteral += '}}'\n\t\t} else {\n\t\t\tconst getAotParser = () => {\n\t\t\t\tif (hooks.parse.length && type && !Array.isArray(hooks.type)) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tconst schema = validator?.body?.schema\n\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\thasType('File', schema) ||\n\t\t\t\t\t\t\t\thasType('Files', schema)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\treturn `c.body = {}\n\n\t\t\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t\t\t}`\n\t\t\t\t\t\t\t// else {\n\t\t\t\t\t\t\t// \t// Since it's an object an not accepting file\n\t\t\t\t\t\t\t// \t// we can infer that it's JSON\n\t\t\t\t\t\t\t// \tfnLiteral += `c.body = await c.request.json()\\n`\n\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// fnLiteral += defaultParser\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst aotParse = getAotParser()\n\n\t\t\tif (aotParse) fnLiteral += aotParse\n\t\t\telse {\n\t\t\t\tfnLiteral += '\\n'\n\t\t\t\tfnLiteral += hasHeaders\n\t\t\t\t\t? `let contentType = c.headers['content-type']`\n\t\t\t\t\t: `let contentType = c.request.headers.get('content-type')`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tif (contentType) {\n\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\tif (index !== -1) contentType = contentType.substring(0, index)\\n`\n\n\t\t\t\tif (hooks.parse.length) {\n\t\t\t\t\tfnLiteral += `let used = false\\n`\n\n\t\t\t\t\tconst endReport = report('parse', {\n\t\t\t\t\t\tunit: hooks.parse.length\n\t\t\t\t\t})\n\n\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\tconst endUnit = report('parse.unit', {\n\t\t\t\t\t\t\tname: hooks.parse[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tconst name = `bo${i}`\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `if(!used) {\\n`\n\n\t\t\t\t\t\tfnLiteral += `let ${name} = parse[${i}](c, contentType)\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} instanceof Promise) ${name} = await ${name}\\n`\n\t\t\t\t\t\tfnLiteral += `if(${name} !== undefined) { c.body = ${name}; used = true }\\n`\n\n\t\t\t\t\t\tendUnit()\n\n\t\t\t\t\t\tif (i !== 0) fnLiteral += `}`\n\t\t\t\t\t}\n\n\t\t\t\t\tendReport()\n\t\t\t\t}\n\n\t\t\t\tif (hooks.parse.length) fnLiteral += `if (!used)`\n\n\t\t\t\tfnLiteral += `\n\t\t\t\tswitch (contentType) {\n\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tc.body = await c.request.json()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\tc.body = await c.request.text()\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\tc.body = parseQuery(await c.request.text())\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\tc.body = await c.request.arrayBuffer();\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\tc.body = {}\n\n\t\t\t\t\t\tconst form = await c.request.formData()\n\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\tif (c.body[key])\n\t\t\t\t\t\t\t\tcontinue\n\n\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\tc.body[key] = value[0]\n\t\t\t\t\t\t\telse c.body[key] = value\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\\n`\n\n\t\t\t\tfnLiteral += '}\\n'\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += '\\n'\n\t}\n\n\tendParse()\n\n\tif (hooks?.transform) {\n\t\tconst endTransform = report('transform', {\n\t\t\tunit: hooks.transform.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\tconst transform = hooks.transform[i]\n\n\t\t\tconst endUnit = report('transform.unit', {\n\t\t\t\tname: transform.name\n\t\t\t})\n\n\t\t\t// @ts-ignore\n\t\t\tif (transform.$elysia === 'derive')\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `Object.assign(c, await transform[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, transform[${i}](c));`\n\t\t\telse\n\t\t\t\tfnLiteral += isAsync(transform)\n\t\t\t\t\t? `await transform[${i}](c);`\n\t\t\t\t\t: `transform[${i}](c);`\n\n\t\t\tendUnit()\n\t\t}\n\n\t\tendTransform()\n\t}\n\n\tif (validator) {\n\t\tfnLiteral += '\\n'\n\n\t\tif (validator.headers) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.headers.params))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.headers.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.headers['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(headers.Check(c.headers) === false) {\n\t\t\t\t${composeValidation('headers')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.headers.schema))\n\t\t\t\tfnLiteral += `\\nc.headers = headers.Decode(c.headers)\\n`\n\t\t}\n\n\t\tif (validator.params) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.params.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.params.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.params['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(params.Check(c.params) === false) {\n\t\t\t\t${composeValidation('params')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.params.schema))\n\t\t\t\tfnLiteral += `\\nc.params = params.Decode(c.params)\\n`\n\t\t}\n\n\t\tif (validator.query) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.query.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.query.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tconst parsed = typeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: `'${value}'`\n\n\t\t\t\t\tif(parsed)\n\t\t\t\t\t\tfnLiteral += `c.query['${key}'] ??= ${parsed}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(query.Check(c.query) === false) {\n\t\t\t\t${composeValidation('query')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.query.schema))\n\t\t\t\t// Decode doesn't work with Object.create(null)\n\t\t\t\tfnLiteral += `\\nc.query = query.Decode(Object.assign({}, c.query))\\n`\n\t\t}\n\n\t\tif (validator.body) {\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.body.schema))\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n    \t\t\t\tc.body = Object.assign(${JSON.stringify(\n\t\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tvalidator.body.schema,\n\t\t\t\t\t\t\tnull\n\t\t\t\t\t\t) ?? {}\n\t\t\t\t\t)}, c.body)\n\n    \t\t\t\tif(body.Check(c.query) === false) {\n        \t\t\t\t${composeValidation('body')}\n     \t\t\t}\n            }`\n\t\t\telse\n\t\t\t\tfnLiteral += `if(body.Check(c.body) === false) {\n\t\t\t${composeValidation('body')}\n\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.body.schema))\n\t\t\t\tfnLiteral += `\\nc.body = body.Decode(c.body)\\n`\n\t\t}\n\n\t\t// @ts-ignore\n\t\tif (isNotEmpty(validator.cookie?.schema.properties ?? {})) {\n\t\t\tfnLiteral += `const cookieValue = {}\n    \t\t\tfor(const [key, value] of Object.entries(c.cookie))\n    \t\t\t\tcookieValue[key] = value.value\\n`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasProperty('default', validator.cookie.schema))\n\t\t\t\tfor (const [key, value] of Object.entries(\n\t\t\t\t\tValue.Default(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tvalidator.cookie.schema,\n\t\t\t\t\t\t{}\n\t\t\t\t\t) as Object\n\t\t\t\t)) {\n\t\t\t\t\tfnLiteral += `cookieValue['${key}'] = ${\n\t\t\t\t\t\ttypeof value === 'object'\n\t\t\t\t\t\t\t? JSON.stringify(value)\n\t\t\t\t\t\t\t: value\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\n\t\t\tfnLiteral += `if(cookie.Check(cookieValue) === false) {\n\t\t\t\t${composeValidation('cookie', 'cookieValue')}\n\t\t\t}`\n\n\t\t\t// @ts-ignore\n\t\t\tif (hasTransform(validator.cookie.schema))\n\t\t\t\tfnLiteral += `\\nc.cookie = params.Decode(c.cookie)\\n`\n\t\t}\n\t}\n\n\tif (hooks?.beforeHandle) {\n\t\tconst endBeforeHandle = report('beforeHandle', {\n\t\t\tunit: hooks.beforeHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\tconst beforeHandle = hooks.beforeHandle[i]\n\n\t\t\tconst endUnit = report('beforeHandle.unit', {\n\t\t\t\tname: beforeHandle.name\n\t\t\t})\n\n\t\t\tconst returning = hasReturn(beforeHandle.toString())\n\n\t\t\t// @ts-ignore\n\t\t\tif (beforeHandle.$elysia === 'resolve') {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `Object.assign(c, await beforeHandle[${i}](c));`\n\t\t\t\t\t: `Object.assign(c, beforeHandle[${i}](c));`\n\t\t\t} else if (!returning) {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(beforeHandle)\n\t\t\t\t\t? `be = await beforeHandle[${i}](c);\\n`\n\t\t\t\t\t: `be = beforeHandle[${i}](c);\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `if(be !== undefined) {\\n`\n\t\t\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\t\t\tunit: hooks.transform.length\n\t\t\t\t})\n\t\t\t\tif (hooks.afterHandle) {\n\t\t\t\t\treport('handle', {\n\t\t\t\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t\t\t\t})()\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tconst returning = hasReturn(\n\t\t\t\t\t\t\thooks.afterHandle[i].toString()\n\t\t\t\t\t\t)\n\n\t\t\t\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tfnLiteral += `c.response = be\\n`\n\n\t\t\t\t\t\tif (!returning) {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `await afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t\t\t: `afterHandle[${i}](c, be)\\n`\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\t\t\t\tfnLiteral += `if(af !== undefined) { c.response = be = af }\\n`\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tendUnit()\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tendAfterHandle()\n\n\t\t\t\tif (validator.response)\n\t\t\t\t\tfnLiteral += composeResponseValidation('be')\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += `c.response = be`\n\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\t\t\t\tif(mr !== undefined) c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\t\t\t\tfnLiteral += `return mapEarlyResponse(be, c.set)}\\n`\n\t\t\t}\n\t\t}\n\n\t\tendBeforeHandle()\n\t}\n\n\tif (hooks?.afterHandle.length) {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t})\n\n\t\tif (hooks.afterHandle.length)\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = c.response = await ${handle};\\n`\n\t\t\t\t: `let r = c.response = ${handle};\\n`\n\t\telse\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\tendHandle()\n\n\t\tconst endAfterHandle = report('afterHandle', {\n\t\t\tunit: hooks.afterHandle.length\n\t\t})\n\n\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\tconst returning = hasReturn(hooks.afterHandle[i].toString())\n\n\t\t\tconst endUnit = report('afterHandle.unit', {\n\t\t\t\tname: hooks.afterHandle[i].name\n\t\t\t})\n\n\t\t\tif (!returning) {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\t\t\t} else {\n\t\t\t\tfnLiteral += isAsync(hooks.afterHandle[i])\n\t\t\t\t\t? `af = await afterHandle[${i}](c)\\n`\n\t\t\t\t\t: `af = afterHandle[${i}](c)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif (validator.response) {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += composeResponseValidation('af')\n\n\t\t\t\t\tfnLiteral += `c.response = af }`\n\t\t\t\t} else {\n\t\t\t\t\tfnLiteral += `if(af !== undefined) {`\n\t\t\t\t\tendAfterHandle()\n\n\t\t\t\t\tfnLiteral += `c.response = af}\\n`\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tendAfterHandle()\n\n\t\tfnLiteral += `r = c.response\\n`\n\n\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\tfnLiteral += encodeCookie\n\n\t\tif (hooks.mapResponse.length) {\n\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\tfnLiteral += `\\nmr = onMapResponse[${i}](c)\n\t\t\t\tif(mr instanceof Promise) mr = await mr\n\t\t\t\tif(mr !== undefined) c.response = mr\\n`\n\t\t\t}\n\t\t}\n\n\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t} else {\n\t\tconst endHandle = report('handle', {\n\t\t\tname: isHandleFn ? handler.name : undefined\n\t\t})\n\n\t\tif (validator.response || hooks.mapResponse.length) {\n\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\tendHandle()\n\n\t\t\tif (validator.response) fnLiteral += composeResponseValidation()\n\n\t\t\treport('afterHandle')()\n\n\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) { \n\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t}\\n`\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfnLiteral += encodeCookie\n\n\t\t\tif (handler instanceof Response)\n\t\t\t\tfnLiteral += `return ${handle}.clone()\\n`\n\t\t\telse if (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t\t} else {\n\t\t\tif (traceConditions.handle || hasCookie) {\n\t\t\t\tfnLiteral += isAsyncHandler\n\t\t\t\t\t? `let r = await ${handle};\\n`\n\t\t\t\t\t: `let r = ${handle};\\n`\n\n\t\t\t\tendHandle()\n\n\t\t\t\treport('afterHandle')()\n\n\t\t\t\tif (hooks.mapResponse.length) {\n\t\t\t\t\tfnLiteral += 'c.response = r'\n\t\t\t\t\tfor (let i = 0; i < hooks.mapResponse.length; i++) {\n\t\t\t\t\t\tfnLiteral += `\\nif(mr === undefined) {\n\t\t\t\t\t\t\tmr = onMapResponse[${i}](c)\n\t\t\t\t\t\t\tif(mr instanceof Promise) mr = await mr\n    \t\t\t\t\t\tif(mr !== undefined) r = c.response = mr\n\t\t\t\t\t\t}\\n`\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tfnLiteral += encodeCookie\n\n\t\t\t\tif (hasSet) fnLiteral += `return mapResponse(r, c.set)\\n`\n\t\t\t\telse fnLiteral += `return mapCompactResponse(r)\\n`\n\t\t\t} else {\n\t\t\t\tendHandle()\n\n\t\t\t\tconst handled = isAsyncHandler ? `await ${handle}` : handle\n\n\t\t\t\treport('afterHandle')()\n\n\t\t\t\tif (handler instanceof Response)\n\t\t\t\t\tfnLiteral += `return ${handle}.clone()\\n`\n\t\t\t\telse if (hasSet)\n\t\t\t\t\tfnLiteral += `return mapResponse(${handled}, c.set)\\n`\n\t\t\t\telse fnLiteral += `return mapCompactResponse(${handled})\\n`\n\t\t\t}\n\t\t}\n\t}\n\n\tif (hasErrorHandler || handleResponse) {\n\t\tfnLiteral += `\n} catch(error) {`\n\n\t\tif (!maybeAsync) fnLiteral += `return (async () => {`\n\n\t\tfnLiteral += `const set = c.set\n\n\t\tif (!set.status || set.status < 300) set.status = error?.status || 500\n\t`\n\n\t\tconst endError = report('error', {\n\t\t\tunit: hooks.error.length\n\t\t})\n\t\tif (hooks.error.length) {\n\t\t\tfnLiteral += `\n\t\t\t\tc.error = error\n\t\t\t\tc.code = error.code ?? error[ERROR_CODE] ?? \"UNKNOWN\"\n\t\t\t`\n\n\t\t\tfor (let i = 0; i < hooks.error.length; i++) {\n\t\t\t\tconst name = `er${i}`\n\t\t\t\tconst endUnit = report('error.unit', {\n\t\t\t\t\tname: hooks.error[i].name\n\t\t\t\t})\n\n\t\t\t\tfnLiteral += `\\nlet ${name} = handleErrors[${i}](c)\\n`\n\n\t\t\t\tif (isAsync(hooks.error[i]))\n\t\t\t\t\tfnLiteral += `if (${name} instanceof Promise) ${name} = await ${name}\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tfnLiteral += `${name} = mapEarlyResponse(${name}, set)\\n`\n\t\t\t\tfnLiteral += `if (${name}) {`\n\t\t\t\tfnLiteral += `return ${name} }\\n`\n\t\t\t}\n\t\t}\n\n\t\tendError()\n\n\t\tfnLiteral += `return handleError(c, error)\\n\\n`\n\n\t\tif (!maybeAsync) fnLiteral += '})()'\n\n\t\tfnLiteral += '}'\n\n\t\tif (handleResponse || hasTrace) {\n\t\t\tfnLiteral += ` finally { `\n\n\t\t\tconst endResponse = report('response', {\n\t\t\t\tunit: hooks.onResponse.length\n\t\t\t})\n\n\t\t\tfnLiteral += handleResponse\n\n\t\t\tendResponse()\n\n\t\t\tfnLiteral += `}`\n\t\t}\n\t}\n\n\t// console.log(fnLiteral)\n\n\tfnLiteral = `const {\n\t\thandler,\n\t\thandleError,\n\t\thooks: {\n\t\t\ttransform,\n\t\t\tresolve,\n\t\t\tbeforeHandle,\n\t\t\tafterHandle,\n\t\t\tmapResponse: onMapResponse,\n\t\t\tparse,\n\t\t\terror: handleErrors,\n\t\t\tonResponse\n\t\t},\n\t\tvalidator: {\n\t\t\tbody,\n\t\t\theaders,\n\t\t\tparams,\n\t\t\tquery,\n\t\t\tresponse,\n\t\t\tcookie\n\t\t},\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent\n\t} = hooks\n\n\t${\n\t\thooks.onResponse.length\n\t\t\t? `const ${hooks.onResponse\n\t\t\t\t\t.map((x, i) => `res${i} = onResponse[${i}]`)\n\t\t\t\t\t.join(',')}`\n\t\t\t: ''\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function handle(c) {\n\t\t${hooks.beforeHandle.length ? 'let be' : ''}\n\t\t${hooks.afterHandle.length ? 'let af' : ''}\n\t\t${hooks.mapResponse.length ? 'let mr' : ''}\n\n\t\t${schema && definitions ? 'c.schema = schema; c.defs = definitions;' : ''}\n\t\t${fnLiteral}\n\t}`\n\n\t// console.log(fnLiteral)\n\n\tconst createHandler = Function('hooks', fnLiteral)\n\n\treturn createHandler({\n\t\thandler,\n\t\thooks,\n\t\tvalidator,\n\t\thandleError,\n\t\tutils: {\n\t\t\tmapResponse,\n\t\t\tmapCompactResponse,\n\t\t\tmapEarlyResponse,\n\t\t\tparseQuery\n\t\t},\n\t\terror: {\n\t\t\tNotFoundError,\n\t\t\tValidationError,\n\t\t\tInternalServerError\n\t\t},\n\t\tschema,\n\t\tdefinitions,\n\t\tERROR_CODE,\n\t\tgetReporter,\n\t\trequestId,\n\t\tparseCookie,\n\t\tsignCookie,\n\t\tdecodeURIComponent\n\t})\n}\n\nexport const composeGeneralHandler = (\n\tapp: Elysia<any, any, any, any, any, any>\n) => {\n\tlet decoratorsLiteral = ''\n\tlet fnLiteral = ''\n\n\t// @ts-ignore\n\tfor (const key of Object.keys(app.decorators))\n\t\tdecoratorsLiteral += `,${key}: app.decorators.${key}`\n\n\t// @ts-ignore\n\tconst { router, staticRouter } = app\n\n\tconst hasTrace = app.event.trace.length > 0\n\n\tconst findDynamicRoute = `\n\tconst route = router.find(request.method, path) ${\n\t\trouter.root.ALL ? '?? router.find(\"ALL\", path)' : ''\n\t}\n\tif (route === null)\n\t\treturn ${\n\t\t\tapp.event.error.length\n\t\t\t\t? `app.handleError(ctx, notFound)`\n\t\t\t\t: app.event.request.length\n\t\t\t\t? `new Response(error404Message, {\n\t\t\t\t\tstatus: ctx.set.status === 200 ? 404 : ctx.set.status,\n\t\t\t\t\theaders: ctx.set.headers\n\t\t\t\t})`\n\t\t\t\t: `error404.clone()`\n\t\t}\n\n\tctx.params = route.params\n\n\treturn route.store(ctx)`\n\n\tlet switchMap = ``\n\tfor (const [path, { code, all }] of Object.entries(staticRouter.map))\n\t\tswitchMap += `case '${path}':\\nswitch(request.method) {\\n${code}\\n${\n\t\t\tall ?? `default: break map`\n\t\t}}\\n\\n`\n\n\tconst maybeAsync = app.event.request.some(isAsync)\n\n\tfnLiteral += `const {\n\t\tapp,\n\t\tapp: { store, router, staticRouter, wsRouter },\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\trequestId,\n\t\tgetReporter,\n\t\thandleError\n\t} = data\n\n\tconst notFound = new NotFoundError()\n\n\t${app.event.request.length ? `const onRequest = app.event.request` : ''}\n\t${staticRouter.variables}\n\t${\n\t\tapp.event.error.length\n\t\t\t? ''\n\t\t\t: `\n\tconst error404Message = notFound.message.toString()\n\tconst error404 = new Response(error404Message, { status: 404 });\n\t`\n\t}\n\n\treturn ${maybeAsync ? 'async' : ''} function map(request) {\\n`\n\n\tif(app.event.request.length)\n\t\tfnLiteral += `let re`\n\n\n\tconst traceLiteral = app.event.trace.map((x) => x.toString())\n\tconst report = createReport({\n\t\thasTrace,\n\t\thasTraceSet: app.event.trace.some((fn) => {\n\t\t\tconst literal = fn.toString()\n\n\t\t\treturn isFnUse('set', literal) || isContextPassToFunction(literal)\n\t\t}),\n\t\tcondition: {\n\t\t\trequest: traceLiteral.some(\n\t\t\t\t(x) => isFnUse('request', x) || isContextPassToFunction(x)\n\t\t\t)\n\t\t},\n\t\taddFn: (word) => {\n\t\t\tfnLiteral += word\n\t\t}\n\t})\n\n\tif (app.event.request.length) {\n\t\tfnLiteral += `\n\t\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\n\t\t\tconst ctx = {\n\t\t\t\trequest,\n\t\t\t\tstore,\n\t\t\t\tset: {\n\t\t\t\t\theaders: ${\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tObject.keys(app.setHeaders ?? {}).length\n\t\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t\t: '{}'\n\t\t\t\t\t},\n\t\t\t\t\tstatus: 200\n\t\t\t\t}\n\t\t\t\t${hasTrace ? ',$$requestId: +id' : ''}\n\t\t\t\t${decoratorsLiteral}\n\t\t\t}\n\t\t`\n\n\t\tconst endReport = report('request', {\n\t\t\tattribute: 'ctx',\n\t\t\tunit: app.event.request.length\n\t\t})\n\n\t\tfnLiteral += `\\n try {\\n`\n\n\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\tconst fn = app.event.request[i]\n\t\t\tconst withReturn = hasReturn(fn.toString())\n\t\t\tconst maybeAsync = isAsync(fn)\n\n\t\t\tconst endUnit = report('request.unit', {\n\t\t\t\tname: app.event.request[i].name\n\t\t\t})\n\n\t\t\tif (withReturn) {\n\t\t\t\tfnLiteral += `re = mapEarlyResponse(\n\t\t\t\t\t${maybeAsync ? 'await' : ''} onRequest[${i}](ctx),\n\t\t\t\t\tctx.set\n\t\t\t\t)\\n`\n\n\t\t\t\tendUnit()\n\n\t\t\t\tif(withReturn)\n\t\t\t\t\tfnLiteral += `if(re !== undefined) return re\\n`\n\t\t\t} else {\n\t\t\t\tfnLiteral += `${\n\t\t\t\t\tmaybeAsync ? 'await' : ''\n\t\t\t\t} onRequest[${i}](ctx)\\n`\n\t\t\t\tendUnit()\n\t\t\t}\n\t\t}\n\n\t\tfnLiteral += `} catch (error) {\n\t\t\treturn app.handleError(ctx, error)\n\t\t}`\n\n\t\tendReport()\n\n\t\tfnLiteral += `\n\t\tconst url = request.url\n\t\tconst s = url.indexOf('/', 11)\n\t\tconst qi = ctx.qi = url.indexOf('?', s + 1)\n\t\tconst path = ctx.path = url.substring(s, qi === -1 ? undefined : qi)`\n\t} else {\n\t\tfnLiteral += `\n\t\tconst url = request.url\n\t\tconst s = url.indexOf('/', 11)\n\t\tconst qi = url.indexOf('?', s + 1)\n\t\tconst path = url.substring(s, qi === -1 ? undefined : qi)\n\t\t${hasTrace ? 'const id = +requestId.value++' : ''}\n\t\tconst ctx = {\n\t\t\trequest,\n\t\t\tstore,\n\t\t\tqi,\n\t\t\tpath,\n\t\t\tset: {\n\t\t\t\theaders: ${\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tObject.keys(app.setHeaders ?? {}).length\n\t\t\t\t\t\t? 'Object.assign({}, app.setHeaders)'\n\t\t\t\t\t\t: '{}'\n\t\t\t\t},\n\t\t\t\tstatus: 200\n\t\t\t}\n\t\t\t${hasTrace ? ',$$requestId: id' : ''}\n\t\t\t${decoratorsLiteral}\n\t\t}`\n\n\t\treport('request', {\n\t\t\tunit: app.event.request.length,\n\t\t\tattribute:\n\t\t\t\ttraceLiteral.some((x) => isFnUse('context', x)) ||\n\t\t\t\ttraceLiteral.some((x) => isFnUse('store', x)) ||\n\t\t\t\ttraceLiteral.some((x) => isFnUse('set', x))\n\t\t\t\t\t? 'ctx'\n\t\t\t\t\t: ''\n\t\t})()\n\t}\n\n\t// @ts-ignore\n\tconst wsPaths = app.wsPaths\n\t// @ts-ignore\n\tconst wsRouter = app.wsRouter\n\n\tif (Object.keys(wsPaths).length || wsRouter.history.length) {\n\t\tfnLiteral += `\n\t\t\tif(request.method === 'GET') {\n\t\t\t\tswitch(path) {`\n\n\t\tfor (const [path, index] of Object.entries(wsPaths)) {\n\t\t\tfnLiteral += `\n\t\t\t\t\tcase '${path}':\n\t\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket')\n\t\t\t\t\t\t\treturn st${index}(ctx)\n\n\t\t\t\t\t\tbreak`\n\t\t}\n\n\t\tfnLiteral += `\n\t\t\t\tdefault:\n\t\t\t\t\tif(request.headers.get('upgrade') === 'websocket') {\n\t\t\t\t\t\tconst route = wsRouter.find('ws', path)\n\n\t\t\t\t\t\tif(route) {\n\t\t\t\t\t\t\tctx.params = route.params\n\n\t\t\t\t\t\t\treturn route.store(ctx)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\\n`\n\t}\n\n\tfnLiteral += `\n\t\tmap: switch(path) {\n\t\t\t${switchMap}\n\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\n\t\t${findDynamicRoute}\n\t}`\n\n\tconst handleError = composeErrorHandler(app) as any\n\n\t// @ts-ignore\n\tapp.handleError = handleError\n\n\t// console.log(fnLiteral)\n\n\treturn Function(\n\t\t'data',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapEarlyResponse,\n\t\tNotFoundError,\n\t\t// @ts-ignore\n\t\tgetReporter: () => app.reporter,\n\t\trequestId,\n\t\thandleError\n\t})\n}\n\nexport const composeErrorHandler = (\n\tapp: Elysia<any, any, any, any, any, any>\n) => {\n\tlet fnLiteral = `const {\n\t\tapp: { event: { error: onError, onResponse: res } },\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t} = inject\n\n\treturn ${\n\t\tapp.event.error.find(isAsync) ? 'async' : ''\n\t} function(context, error) {\n\t\tlet r\n\n\t\tconst { set } = context\n\n\t\tcontext.code = error.code\n\t\tcontext.error = error\n\n\t\tif(error[ELYSIA_RESPONSE]) {\n\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\terror.message = error.response\n\t\t}\n`\n\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\tconst handler = app.event.error[i]\n\n\t\tconst response = `${\n\t\t\tisAsync(handler) ? 'await ' : ''\n\t\t}onError[${i}](context)`\n\n\t\tif (hasReturn(handler.toString()))\n\t\t\tfnLiteral += `r = ${response}; if(r !== undefined) {\n\t\t\t\tif(r instanceof Response) return r\n\n\t\t\t\tif(r[ELYSIA_RESPONSE]) {\n\t\t\t\t\terror.status = error[ELYSIA_RESPONSE]\n\t\t\t\t\terror.message = error.response\n\t\t\t\t}\n\t\t\n\t\t\t\tif(set.status === 200) set.status = error.status\n\t\t\t\treturn mapResponse(r, set)\n\t\t\t}\\n`\n\t\telse fnLiteral += response + '\\n'\n\t}\n\n\tfnLiteral += `if(error.constructor.name === \"ValidationError\" || error.constructor.name === \"TransformDecodeError\") {\n\t\tset.status = error.status ?? 400\n\t\treturn new Response(\n\t\t\terror.message,\n\t\t\t{ headers: set.headers, status: set.status }\n\t\t)\n\t} else {\n\t\tif(error.code && typeof error.status === \"number\")\n\t\t\treturn new Response(\n\t\t\t\terror.message,\n\t\t\t\t{ headers: set.headers, status: error.status }\n\t\t\t)\n\n\t\treturn mapResponse(error, set)\n\t}\n}`\n\n\treturn Function(\n\t\t'inject',\n\t\tfnLiteral\n\t)({\n\t\tapp,\n\t\tmapResponse,\n\t\tERROR_CODE,\n\t\tELYSIA_RESPONSE\n\t})\n}\n",
  "import type { Elysia } from '.'\n\nimport { mapEarlyResponse, mapResponse } from './handler'\nimport { ElysiaErrors, NotFoundError, ValidationError } from './error'\n\nimport type { Context } from './context'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\nimport { signCookie } from './utils'\nimport { parseCookie } from './cookie'\n\nimport type { Handler, LifeCycleStore, SchemaValidator } from './types'\n\n// JIT Handler\nexport type DynamicHandler = {\n\thandle: Handler<any, any>\n\tcontent?: string\n\thooks: LifeCycleStore\n\tvalidator?: SchemaValidator\n}\n\nexport const createDynamicHandler =\n\t(app: Elysia<any, any, any, any, any, any>) =>\n\tasync (request: Request): Promise<Response> => {\n\t\tconst set: Context['set'] = {\n\t\t\tcookie: {},\n\t\t\tstatus: 200,\n\t\t\theaders: {}\n\t\t}\n\n\t\tlet context: Context\n\n\t\t// @ts-ignore\n\t\tif (app.decorators) {\n\t\t\t// @ts-ignore\n\t\t\tcontext = app.decorators as any as Context\n\n\t\t\tcontext.request = request\n\t\t\tcontext.set = set\n\t\t\tcontext.store = app.store\n\t\t} else {\n\t\t\tcontext = {\n\t\t\t\tset,\n\t\t\t\tstore: app.store,\n\t\t\t\trequest\n\t\t\t} as any as Context\n\t\t}\n\n\t\tconst url = request.url,\n\t\t\ts = url.indexOf('/', 11),\n\t\t\tq = url.indexOf('?', s + 1),\n\t\t\tpath = q === -1 ? url.substring(s) : url.substring(s, q)\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst onRequest = app.event.request[i]\n\t\t\t\tlet response = onRequest(context as any)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\tresponse = mapEarlyResponse(response, set)\n\t\t\t\tif (response) return response\n\t\t\t}\n\n\t\t\tconst handler =\n\t\t\t\t// @ts-ignore\n\t\t\t\tapp.dynamicRouter.find(request.method, path) ??\n\t\t\t\t// @ts-ignore\n\t\t\t\tapp.dynamicRouter.find('ALL', path)\n\n\t\t\tif (!handler) throw new NotFoundError()\n\n\t\t\tconst { handle, hooks, validator, content } = handler.store\n\n\t\t\tlet body: string | Record<string, any> | undefined\n\t\t\tif (request.method !== 'GET' && request.method !== 'HEAD') {\n\t\t\t\tif (content) {\n\t\t\t\t\tswitch (content) {\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\tbody = await request.json() as any\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\tif (value.length === 1) body[key] = value[0]\n\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet contentType = request.headers.get('content-type')\n\n\t\t\t\t\tif (contentType) {\n\t\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\tcontentType = contentType.slice(0, index)\n\n\t\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\t\tlet temp = hooks.parse[i](context, contentType)\n\t\t\t\t\t\t\tif (temp instanceof Promise) temp = await temp\n\n\t\t\t\t\t\t\tif (temp) {\n\t\t\t\t\t\t\t\tbody = temp\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// body might be empty string thus can't use !body\n\t\t\t\t\t\tif (body === undefined) {\n\t\t\t\t\t\t\tswitch (contentType) {\n\t\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t\tbody = await request.json() as any\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\t\tbody[key] = value[0]\n\t\t\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.body = body\n\t\t\t// @ts-ignore\n\t\t\tcontext.params = handler?.params || undefined\n\t\t\tcontext.query = q === -1 ? {} : parseQuery(url.substring(q + 1))\n\n\t\t\tcontext.headers = {}\n\t\t\tfor (const [key, value] of request.headers.entries())\n\t\t\t\tcontext.headers[key] = value\n\n\t\t\t// @ts-ignore\n\t\t\tconst cookieMeta = validator?.cookie?.schema as {\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\tsign: string[] | true\n\t\t\t\tproperties: { [x: string]: Object }\n\t\t\t}\n\n\t\t\tcontext.cookie = await parseCookie(\n\t\t\t\tcontext.set,\n\t\t\t\tcontext.headers.cookie,\n\t\t\t\tcookieMeta\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.secrets.join(',')\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tsign:\n\t\t\t\t\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t\t\t\t\t? typeof cookieMeta.sign === 'string'\n\t\t\t\t\t\t\t\t\t\t? cookieMeta.sign\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign.join(',')\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t  }\n\t\t\t\t\t: undefined\n\t\t\t)\n\n\t\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\t\tconst operation = hooks.transform[i](context)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (hooks.transform[i].$elysia === 'derive') {\n\t\t\t\t\tif (operation instanceof Promise)\n\t\t\t\t\t\tObject.assign(context, await operation)\n\t\t\t\t\telse Object.assign(context, operation)\n\t\t\t\t} else if (operation instanceof Promise) await operation\n\t\t\t}\n\n\t\t\tif (validator) {\n\t\t\t\tif (validator.headers) {\n\t\t\t\t\tconst _header: Record<string, string> = {}\n\t\t\t\t\tfor (const key in request.headers)\n\t\t\t\t\t\t_header[key] = request.headers.get(key)!\n\n\t\t\t\t\tif (validator.headers.Check(_header) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'header',\n\t\t\t\t\t\t\tvalidator.headers,\n\t\t\t\t\t\t\t_header\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.params?.Check(context.params) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'params',\n\t\t\t\t\t\tvalidator.params,\n\t\t\t\t\t\tcontext.params\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.query?.Check(context.query) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'query',\n\t\t\t\t\t\tvalidator.query,\n\t\t\t\t\t\tcontext.query\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.cookie) {\n\t\t\t\t\tconst cookieValue: Record<string, unknown> = {}\n\t\t\t\t\tfor (const [key, value] of Object.entries(context.cookie))\n\t\t\t\t\t\tcookieValue[key] = value.value\n\n\t\t\t\t\tif (validator.cookie?.Check(cookieValue) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'cookie',\n\t\t\t\t\t\t\tvalidator.cookie,\n\t\t\t\t\t\t\tcookieValue\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.body?.Check(body) === false)\n\t\t\t\t\tthrow new ValidationError('body', validator.body, body)\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\t\tlet response = hooks.beforeHandle[i](context)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\t// `false` is a falsey value, check for undefined instead\n\t\t\t\tif (response !== undefined) {\n\t\t\t\t\t;(\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t).response = response\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\t\tif (newResponse) response = newResponse\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = mapEarlyResponse(response, context.set)\n\t\t\t\t\tif (result) return result\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet response = handle(context)\n\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\tif (!hooks.afterHandle.length) {\n\t\t\t\tconst responseValidator = validator?.response?.[response.status]\n\n\t\t\t\tif (responseValidator?.Check(response) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'response',\n\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\tresponse\n\t\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t;(\n\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t}\n\t\t\t\t).response = response\n\n\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\tconst result = mapEarlyResponse(newResponse, context.set)\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tconst responseValidator =\n\t\t\t\t\t\t\tvalidator?.response?.[response.status]\n\n\t\t\t\t\t\tif (responseValidator?.Check(result) === false)\n\t\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t\t'response',\n\t\t\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.set.cookie && cookieMeta?.sign) {\n\t\t\t\tconst secret = !cookieMeta.secrets\n\t\t\t\t\t? undefined\n\t\t\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t: cookieMeta.secrets[0]\n\n\t\t\t\tif (cookieMeta.sign === true)\n\t\t\t\t\tfor (const [key, cookie] of Object.entries(\n\t\t\t\t\t\tcontext.set.cookie\n\t\t\t\t\t))\n\t\t\t\t\t\tcontext.set.cookie[key].value = await signCookie(\n\t\t\t\t\t\t\tcookie.value,\n\t\t\t\t\t\t\t'${secret}'\n\t\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\t\t\tif (!(name in cookieMeta.properties)) continue\n\n\t\t\t\t\t\tif (context.set.cookie[name]?.value) {\n\t\t\t\t\t\t\tcontext.set.cookie[name].value = await signCookie(\n\t\t\t\t\t\t\t\tcontext.set.cookie[name].value,\n\t\t\t\t\t\t\t\tsecret as any\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mapResponse(response, context.set)\n\t\t} catch (error) {\n\t\t\tif ((error as ElysiaErrors).status)\n\t\t\t\tset.status = (error as ElysiaErrors).status\n\n\t\t\t// @ts-ignore\n\t\t\treturn app.handleError(context, error)\n\t\t} finally {\n\t\t\t// @ts-ignore\n\t\t\tfor (const onResponse of app.event.onResponse)\n\t\t\t\tawait onResponse(context)\n\t\t}\n\t}\n\nexport const createDynamicErrorHandler =\n\t(app: Elysia<any, any, any, any, any, any>) =>\n\tasync (context: Context, error: ElysiaErrors) => {\n\t\tconst errorContext = Object.assign(context, { error, code: error.code })\n\t\terrorContext.set = context.set\n\n\t\t// @ts-ignore\n\t\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\t\tlet response = app.event.error[i](errorContext as any)\n\t\t\tif (response instanceof Promise) response = await response\n\t\t\tif (response !== undefined && response !== null)\n\t\t\t\treturn mapResponse(response, context.set)\n\t\t}\n\n\t\treturn new Response(\n\t\t\ttypeof error.cause === 'string' ? error.cause : error.message,\n\t\t\t{\n\t\t\t\theaders: context.set.headers,\n\t\t\t\tstatus: error.status ?? 500\n\t\t\t}\n\t\t)\n\t}\n",
  "import type { Elysia } from '.'\n\nimport { mapEarlyResponse, mapResponse } from './handler'\nimport { ElysiaErrors, NotFoundError, ValidationError } from './error'\n\nimport type { Context } from './context'\n\nimport { parse as parseQuery } from 'fast-querystring'\n\nimport { signCookie } from './utils'\nimport { parseCookie } from './cookie'\n\nimport type { Handler, LifeCycleStore, SchemaValidator } from './types'\n\n// JIT Handler\nexport type DynamicHandler = {\n\thandle: Handler<any, any>\n\tcontent?: string\n\thooks: LifeCycleStore\n\tvalidator?: SchemaValidator\n}\n\nexport const createDynamicHandler =\n\t(app: Elysia<any, any, any, any, any, any>) =>\n\tasync (request: Request): Promise<Response> => {\n\t\tconst set: Context['set'] = {\n\t\t\tcookie: {},\n\t\t\tstatus: 200,\n\t\t\theaders: {}\n\t\t}\n\n\t\tlet context: Context\n\n\t\t// @ts-ignore\n\t\tif (app.decorators) {\n\t\t\t// @ts-ignore\n\t\t\tcontext = app.decorators as any as Context\n\n\t\t\tcontext.request = request\n\t\t\tcontext.set = set\n\t\t\tcontext.store = app.store\n\t\t} else {\n\t\t\tcontext = {\n\t\t\t\tset,\n\t\t\t\tstore: app.store,\n\t\t\t\trequest\n\t\t\t} as any as Context\n\t\t}\n\n\t\tconst url = request.url,\n\t\t\ts = url.indexOf('/', 11),\n\t\t\tq = url.indexOf('?', s + 1),\n\t\t\tpath = q === -1 ? url.substring(s) : url.substring(s, q)\n\n\t\ttry {\n\t\t\tfor (let i = 0; i < app.event.request.length; i++) {\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst onRequest = app.event.request[i]\n\t\t\t\tlet response = onRequest(context as any)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\tresponse = mapEarlyResponse(response, set)\n\t\t\t\tif (response) return response\n\t\t\t}\n\n\t\t\tconst handler =\n\t\t\t\t// @ts-ignore\n\t\t\t\tapp.dynamicRouter.find(request.method, path) ??\n\t\t\t\t// @ts-ignore\n\t\t\t\tapp.dynamicRouter.find('ALL', path)\n\n\t\t\tif (!handler) throw new NotFoundError()\n\n\t\t\tconst { handle, hooks, validator, content } = handler.store\n\n\t\t\tlet body: string | Record<string, any> | undefined\n\t\t\tif (request.method !== 'GET' && request.method !== 'HEAD') {\n\t\t\t\tif (content) {\n\t\t\t\t\tswitch (content) {\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\tbody = await request.json() as any\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\tif (value.length === 1) body[key] = value[0]\n\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tlet contentType = request.headers.get('content-type')\n\n\t\t\t\t\tif (contentType) {\n\t\t\t\t\t\tconst index = contentType.indexOf(';')\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\tcontentType = contentType.slice(0, index)\n\n\t\t\t\t\t\tfor (let i = 0; i < hooks.parse.length; i++) {\n\t\t\t\t\t\t\tlet temp = hooks.parse[i](context, contentType)\n\t\t\t\t\t\t\tif (temp instanceof Promise) temp = await temp\n\n\t\t\t\t\t\t\tif (temp) {\n\t\t\t\t\t\t\t\tbody = temp\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// body might be empty string thus can't use !body\n\t\t\t\t\t\tif (body === undefined) {\n\t\t\t\t\t\t\tswitch (contentType) {\n\t\t\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\t\t\t\tbody = await request.json() as any\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'text/plain':\n\t\t\t\t\t\t\t\t\tbody = await request.text()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\t\t\tbody = parseQuery(await request.text())\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'application/octet-stream':\n\t\t\t\t\t\t\t\t\tbody = await request.arrayBuffer()\n\t\t\t\t\t\t\t\t\tbreak\n\n\t\t\t\t\t\t\t\tcase 'multipart/form-data':\n\t\t\t\t\t\t\t\t\tbody = {}\n\n\t\t\t\t\t\t\t\t\tconst form = await request.formData()\n\t\t\t\t\t\t\t\t\tfor (const key of form.keys()) {\n\t\t\t\t\t\t\t\t\t\tif (body[key]) continue\n\n\t\t\t\t\t\t\t\t\t\tconst value = form.getAll(key)\n\t\t\t\t\t\t\t\t\t\tif (value.length === 1)\n\t\t\t\t\t\t\t\t\t\t\tbody[key] = value[0]\n\t\t\t\t\t\t\t\t\t\telse body[key] = value\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontext.body = body\n\t\t\t// @ts-ignore\n\t\t\tcontext.params = handler?.params || undefined\n\t\t\tcontext.query = q === -1 ? {} : parseQuery(url.substring(q + 1))\n\n\t\t\tcontext.headers = {}\n\t\t\tfor (const [key, value] of request.headers.entries())\n\t\t\t\tcontext.headers[key] = value\n\n\t\t\t// @ts-ignore\n\t\t\tconst cookieMeta = validator?.cookie?.schema as {\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\tsign: string[] | true\n\t\t\t\tproperties: { [x: string]: Object }\n\t\t\t}\n\n\t\t\tcontext.cookie = await parseCookie(\n\t\t\t\tcontext.set,\n\t\t\t\tcontext.headers.cookie,\n\t\t\t\tcookieMeta\n\t\t\t\t\t? {\n\t\t\t\t\t\t\tsecret:\n\t\t\t\t\t\t\t\tcookieMeta.secrets !== undefined\n\t\t\t\t\t\t\t\t\t? typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.secrets.join(',')\n\t\t\t\t\t\t\t\t\t: undefined,\n\t\t\t\t\t\t\tsign:\n\t\t\t\t\t\t\t\tcookieMeta.sign === true\n\t\t\t\t\t\t\t\t\t? true\n\t\t\t\t\t\t\t\t\t: cookieMeta.sign !== undefined\n\t\t\t\t\t\t\t\t\t? typeof cookieMeta.sign === 'string'\n\t\t\t\t\t\t\t\t\t\t? cookieMeta.sign\n\t\t\t\t\t\t\t\t\t\t: cookieMeta.sign.join(',')\n\t\t\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t  }\n\t\t\t\t\t: undefined\n\t\t\t)\n\n\t\t\tfor (let i = 0; i < hooks.transform.length; i++) {\n\t\t\t\tconst operation = hooks.transform[i](context)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (hooks.transform[i].$elysia === 'derive') {\n\t\t\t\t\tif (operation instanceof Promise)\n\t\t\t\t\t\tObject.assign(context, await operation)\n\t\t\t\t\telse Object.assign(context, operation)\n\t\t\t\t} else if (operation instanceof Promise) await operation\n\t\t\t}\n\n\t\t\tif (validator) {\n\t\t\t\tif (validator.headers) {\n\t\t\t\t\tconst _header: Record<string, string> = {}\n\t\t\t\t\tfor (const key in request.headers)\n\t\t\t\t\t\t_header[key] = request.headers.get(key)!\n\n\t\t\t\t\tif (validator.headers.Check(_header) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'header',\n\t\t\t\t\t\t\tvalidator.headers,\n\t\t\t\t\t\t\t_header\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.params?.Check(context.params) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'params',\n\t\t\t\t\t\tvalidator.params,\n\t\t\t\t\t\tcontext.params\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.query?.Check(context.query) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'query',\n\t\t\t\t\t\tvalidator.query,\n\t\t\t\t\t\tcontext.query\n\t\t\t\t\t)\n\n\t\t\t\tif (validator.cookie) {\n\t\t\t\t\tconst cookieValue: Record<string, unknown> = {}\n\t\t\t\t\tfor (const [key, value] of Object.entries(context.cookie))\n\t\t\t\t\t\tcookieValue[key] = value.value\n\n\t\t\t\t\tif (validator.cookie?.Check(cookieValue) === false)\n\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t'cookie',\n\t\t\t\t\t\t\tvalidator.cookie,\n\t\t\t\t\t\t\tcookieValue\n\t\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\tif (validator.body?.Check(body) === false)\n\t\t\t\t\tthrow new ValidationError('body', validator.body, body)\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < hooks.beforeHandle.length; i++) {\n\t\t\t\tlet response = hooks.beforeHandle[i](context)\n\t\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\t\t// `false` is a falsey value, check for undefined instead\n\t\t\t\tif (response !== undefined) {\n\t\t\t\t\t;(\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t).response = response\n\n\t\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\t\tif (newResponse) response = newResponse\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = mapEarlyResponse(response, context.set)\n\t\t\t\t\tif (result) return result\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet response = handle(context)\n\t\t\tif (response instanceof Promise) response = await response\n\n\t\t\tif (!hooks.afterHandle.length) {\n\t\t\t\tconst responseValidator = validator?.response?.[response.status]\n\n\t\t\t\tif (responseValidator?.Check(response) === false)\n\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t'response',\n\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\tresponse\n\t\t\t\t\t)\n\t\t\t} else {\n\t\t\t\t;(\n\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t}\n\t\t\t\t).response = response\n\n\t\t\t\tfor (let i = 0; i < hooks.afterHandle.length; i++) {\n\t\t\t\t\tlet newResponse = hooks.afterHandle[i](\n\t\t\t\t\t\tcontext as Context & {\n\t\t\t\t\t\t\tresponse: unknown\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t\tif (newResponse instanceof Promise)\n\t\t\t\t\t\tnewResponse = await newResponse\n\n\t\t\t\t\tconst result = mapEarlyResponse(newResponse, context.set)\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tconst responseValidator =\n\t\t\t\t\t\t\tvalidator?.response?.[response.status]\n\n\t\t\t\t\t\tif (responseValidator?.Check(result) === false)\n\t\t\t\t\t\t\tthrow new ValidationError(\n\t\t\t\t\t\t\t\t'response',\n\t\t\t\t\t\t\t\tresponseValidator,\n\t\t\t\t\t\t\t\tresult\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\treturn result\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (context.set.cookie && cookieMeta?.sign) {\n\t\t\t\tconst secret = !cookieMeta.secrets\n\t\t\t\t\t? undefined\n\t\t\t\t\t: typeof cookieMeta.secrets === 'string'\n\t\t\t\t\t? cookieMeta.secrets\n\t\t\t\t\t: cookieMeta.secrets[0]\n\n\t\t\t\tif (cookieMeta.sign === true)\n\t\t\t\t\tfor (const [key, cookie] of Object.entries(\n\t\t\t\t\t\tcontext.set.cookie\n\t\t\t\t\t))\n\t\t\t\t\t\tcontext.set.cookie[key].value = await signCookie(\n\t\t\t\t\t\t\tcookie.value,\n\t\t\t\t\t\t\t'${secret}'\n\t\t\t\t\t\t)\n\t\t\t\telse\n\t\t\t\t\tfor (const name of cookieMeta.sign) {\n\t\t\t\t\t\tif (!(name in cookieMeta.properties)) continue\n\n\t\t\t\t\t\tif (context.set.cookie[name]?.value) {\n\t\t\t\t\t\t\tcontext.set.cookie[name].value = await signCookie(\n\t\t\t\t\t\t\t\tcontext.set.cookie[name].value,\n\t\t\t\t\t\t\t\tsecret as any\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn mapResponse(response, context.set)\n\t\t} catch (error) {\n\t\t\tif ((error as ElysiaErrors).status)\n\t\t\t\tset.status = (error as ElysiaErrors).status\n\n\t\t\t// @ts-ignore\n\t\t\treturn app.handleError(context, error)\n\t\t} finally {\n\t\t\t// @ts-ignore\n\t\t\tfor (const onResponse of app.event.onResponse)\n\t\t\t\tawait onResponse(context)\n\t\t}\n\t}\n\nexport const createDynamicErrorHandler =\n\t(app: Elysia<any, any, any, any, any, any>) =>\n\tasync (context: Context, error: ElysiaErrors) => {\n\t\tconst errorContext = Object.assign(context, { error, code: error.code })\n\t\terrorContext.set = context.set\n\n\t\t// @ts-ignore\n\t\tfor (let i = 0; i < app.event.error.length; i++) {\n\t\t\tlet response = app.event.error[i](errorContext as any)\n\t\t\tif (response instanceof Promise) response = await response\n\t\t\tif (response !== undefined && response !== null)\n\t\t\t\treturn mapResponse(response, context.set)\n\t\t}\n\n\t\treturn new Response(\n\t\t\ttypeof error.cause === 'string' ? error.cause : error.message,\n\t\t\t{\n\t\t\t\theaders: context.set.headers,\n\t\t\t\tstatus: error.status ?? 500\n\t\t\t}\n\t\t)\n\t}\n",
  "import { NumberOptions } from '@sinclair/typebox'\nimport { TypeSystem } from '@sinclair/typebox/system'\nimport {\n\tType,\n\ttype SchemaOptions,\n\ttype TNull,\n\ttype TUnion,\n\ttype TSchema,\n\ttype TUndefined,\n\tTProperties,\n\tObjectOptions,\n\tTObject,\n\tTNumber,\n\tTBoolean,\n\tFormatRegistry\n} from '@sinclair/typebox'\nimport { type TypeCheck } from '@sinclair/typebox/compiler'\nimport { CookieOptions } from './cookie'\nimport { Value } from '@sinclair/typebox/value'\nimport { ValidationError } from './error'\n\nconst t = Object.assign({}, Type)\n\ntry {\n\tTypeSystem.Format('email', (value) =>\n\t\t/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format('uuid', (value) =>\n\t\t/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format(\n\t\t'date',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n\n\tTypeSystem.Format(\n\t\t'date-time',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n} catch {\n\t// Not empty\n}\n\ntype MaybeArray<T> = T | T[]\n\nexport namespace ElysiaTypeOptions {\n\texport type Numeric = NumberOptions\n\n\texport type FileUnit = number | `${number}${'k' | 'm'}`\n\n\texport interface File extends SchemaOptions {\n\t\ttype?: MaybeArray<\n\t\t\t| (string & {})\n\t\t\t| 'image'\n\t\t\t| 'image/jpeg'\n\t\t\t| 'image/png'\n\t\t\t| 'image/gif'\n\t\t\t| 'image/tiff'\n\t\t\t| 'image/x-icon'\n\t\t\t| 'image/svg'\n\t\t\t| 'image/webp'\n\t\t\t| 'image/avif'\n\t\t\t| 'audio'\n\t\t\t| 'audio/mpeg'\n\t\t\t| 'audio/x-ms-wma'\n\t\t\t| 'audio/vnd.rn-realaudio'\n\t\t\t| 'audio/x-wav'\n\t\t\t| 'video'\n\t\t\t| 'video/mpeg'\n\t\t\t| 'video/mp4'\n\t\t\t| 'video/quicktime'\n\t\t\t| 'video/x-ms-wmv'\n\t\t\t| 'video/x-msvideo'\n\t\t\t| 'video/x-flv'\n\t\t\t| 'video/webm'\n\t\t\t| 'text'\n\t\t\t| 'text/css'\n\t\t\t| 'text/csv'\n\t\t\t| 'text/html'\n\t\t\t| 'text/javascript'\n\t\t\t| 'text/plain'\n\t\t\t| 'text/xml'\n\t\t\t| 'application'\n\t\t\t| 'application/ogg'\n\t\t\t| 'application/pdf'\n\t\t\t| 'application/xhtml'\n\t\t\t| 'application/html'\n\t\t\t| 'application/json'\n\t\t\t| 'application/ld+json'\n\t\t\t| 'application/xml'\n\t\t\t| 'application/zip'\n\t\t\t| 'font'\n\t\t\t| 'font/woff2'\n\t\t\t| 'font/woff'\n\t\t\t| 'font/ttf'\n\t\t\t| 'font/otf'\n\t\t>\n\t\tminSize?: FileUnit\n\t\tmaxSize?: FileUnit\n\t}\n\n\texport interface Files extends File {\n\t\tminItems?: number\n\t\tmaxItems?: number\n\t}\n}\n\nconst parseFileUnit = (size: ElysiaTypeOptions.FileUnit) => {\n\tif (typeof size === 'string')\n\t\tswitch (size.slice(-1)) {\n\t\t\tcase 'k':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1024\n\n\t\t\tcase 'm':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1048576\n\n\t\t\tdefault:\n\t\t\t\treturn +size\n\t\t}\n\n\treturn size\n}\n\nconst validateFile = (options: ElysiaTypeOptions.File, value: any) => {\n\tif (!(value instanceof Blob)) return false\n\n\tif (options.minSize && value.size < parseFileUnit(options.minSize))\n\t\treturn false\n\n\tif (options.maxSize && value.size > parseFileUnit(options.maxSize))\n\t\treturn false\n\n\tif (options.extension)\n\t\tif (typeof options.extension === 'string') {\n\t\t\tif (!value.type.startsWith(options.extension)) return false\n\t\t} else {\n\t\t\tfor (let i = 0; i < options.extension.length; i++)\n\t\t\t\tif (value.type.startsWith(options.extension[i])) return true\n\n\t\t\treturn false\n\t\t}\n\n\treturn true\n}\n\nconst Files = TypeSystem.Type<File[], ElysiaTypeOptions.Files>(\n\t'Files',\n\t(options, value) => {\n\t\tif (!Array.isArray(value)) return validateFile(options, value)\n\n\t\tif (options.minItems && value.length < options.minItems) return false\n\n\t\tif (options.maxItems && value.length > options.maxItems) return false\n\n\t\tfor (let i = 0; i < value.length; i++)\n\t\t\tif (!validateFile(options, value[i])) return false\n\n\t\treturn true\n\t}\n)\n\nFormatRegistry.Set('numeric', (value) => !!value && !isNaN(+value))\nFormatRegistry.Set('boolean', (value) => value === 'true' || value === 'false')\nFormatRegistry.Set('ObjectString', (value) => {\n\tlet start = value.charCodeAt(0)\n\n\t// If starts with ' ', '\\t', '\\n', then trim first\n\tif (start === 9 || start === 10 || start === 32)\n\t\tstart = value.trimStart().charCodeAt(0)\n\n\tif (start !== 123 && start !== 91) return false\n\n\ttry {\n\t\tJSON.parse(value)\n\n\t\treturn true\n\t} catch {\n\t\treturn false\n\t}\n})\n\nexport const ElysiaType = {\n\tNumeric: (property?: NumberOptions) => {\n\t\tconst schema = Type.Number(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'numeric',\n\t\t\t\t\t\t\tdefault: 0\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Number(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tconst number = +value\n\t\t\t\tif (isNaN(number)) return value\n\n\t\t\t\tif (property && !Value.Check(schema, number))\n\t\t\t\t\tthrow new ValidationError('property', schema, number)\n\n\t\t\t\treturn number\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TNumber\n\t},\n\tBooleanString: (property?: SchemaOptions) => {\n\t\tconst schema = Type.Boolean(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Boolean(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') return value === 'true'\n\n\t\t\t\tif (property && !Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TBoolean\n\t},\n\tObjectString: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions\n\t) =>\n\t\tt\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'ObjectString',\n\t\t\t\t\t\t\tdefault: ''\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Object(properties, options)\n\t\t\t\t\t],\n\t\t\t\t\toptions\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string')\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\treturn value\n\t\t\t\t\t}\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => JSON.stringify(value)) as any as TObject<T>,\n\tFile: TypeSystem.Type<File, ElysiaTypeOptions.File>('File', validateFile),\n\tFiles: (options: ElysiaTypeOptions.Files = {}) =>\n\t\tt\n\t\t\t.Transform(t.Union([Files(options)]))\n\t\t\t.Decode((value) => {\n\t\t\t\tif (Array.isArray(value)) return value\n\t\t\t\treturn [value]\n\t\t\t})\n\t\t\t.Encode((value) => value),\n\tNullable: <T extends TSchema>(schema: T): TUnion<[T, TNull]> =>\n\t\tt.Union([t.Null(), schema]) as any,\n\t/**\n\t * Allow Optional, Nullable and Undefined\n\t */\n\tMaybeEmpty: <T extends TSchema>(schema: T): TUnion<[T, TUndefined]> =>\n\t\tt.Union([t.Null(), t.Undefined(), schema]) as any,\n\tCookie: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions &\n\t\t\tCookieOptions & {\n\t\t\t\t/**\n\t\t\t\t * Secret key for signing cookie\n\t\t\t\t *\n\t\t\t\t * If array is passed, will use Key Rotation.\n\t\t\t\t *\n\t\t\t\t * Key rotation is when an encryption key is retired\n\t\t\t\t * and replaced by generating a new cryptographic key.\n\t\t\t\t */\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\t/**\n\t\t\t\t * Specified cookie name to be signed globally\n\t\t\t\t */\n\t\t\t\tsign?: Readonly<(keyof T | (string & {}))[]>\n\t\t\t}\n\t): TObject<T> => t.Object(properties, options)\n} as const\n\nexport type TCookie = (typeof ElysiaType)['Cookie']\n\ndeclare module '@sinclair/typebox' {\n\tinterface JavaScriptTypeBuilder {\n\t\tBooleanString: typeof ElysiaType.BooleanString\n\t\tObjectString: typeof ElysiaType.ObjectString\n\t\t// @ts-ignore\n\t\tNumeric: typeof ElysiaType.Numeric\n\t\t// @ts-ignore\n\t\tFile: typeof ElysiaType.File\n\t\t// @ts-ignore\n\t\tFiles: typeof ElysiaType.Files\n\t\tNullable: typeof ElysiaType.Nullable\n\t\tMaybeEmpty: typeof ElysiaType.MaybeEmpty\n\t\tCookie: typeof ElysiaType.Cookie\n\t}\n\n\tinterface SchemaOptions {\n\t\terror?:\n\t\t\t| string\n\t\t\t| ((\n\t\t\t\t\ttype: string,\n\t\t\t\t\tvalidator: TypeCheck<any>,\n\t\t\t\t\tvalue: unknown\n\t\t\t  ) => string | void)\n\t}\n}\n\n/**\n * A Boolean string\n *\n * Will be parse to Boolean\n */\nt.BooleanString = ElysiaType.BooleanString\n\nt.ObjectString = ElysiaType.ObjectString\n\n/**\n * A Numeric string\n *\n * Will be parse to Number\n */\nt.Numeric = ElysiaType.Numeric\n\nt.File = (arg = {}) =>\n\tElysiaType.File({\n\t\tdefault: 'File',\n\t\t...arg,\n\t\textension: arg?.type,\n\t\ttype: 'string',\n\t\tformat: 'binary'\n\t})\n\nt.Files = (arg = {}) =>\n\tElysiaType.Files({\n\t\t...arg,\n\t\telysiaMeta: 'Files',\n\t\tdefault: 'Files',\n\t\textension: arg?.type,\n\t\ttype: 'array',\n\t\titems: {\n\t\t\t...arg,\n\t\t\tdefault: 'Files',\n\t\t\ttype: 'string',\n\t\t\tformat: 'binary'\n\t\t}\n\t})\n\nt.Nullable = (schema) => ElysiaType.Nullable(schema)\nt.MaybeEmpty = ElysiaType.MaybeEmpty\n\nt.Cookie = ElysiaType.Cookie\n\nexport { t }\n\nexport {\n\tTypeSystemPolicy,\n\tTypeSystem,\n\tTypeSystemDuplicateFormat,\n\tTypeSystemDuplicateTypeKind\n} from '@sinclair/typebox/system'\nexport { TypeCompiler, TypeCheck } from '@sinclair/typebox/compiler'\n\n// type Template =\n// \t| string\n// \t| number\n// \t| bigint\n// \t| boolean\n// \t| StringConstructor\n// \t| NumberConstructor\n// \t| undefined\n\n// type Join<A> = A extends Readonly<[infer First, ...infer Rest]>\n// \t? (\n// \t\t\tFirst extends Readonly<Template[]>\n// \t\t\t\t? First[number]\n// \t\t\t\t: First extends StringConstructor\n// \t\t\t\t? string\n// \t\t\t\t: First extends NumberConstructor\n// \t\t\t\t? `${number}`\n// \t\t\t\t: First\n// \t  ) extends infer A\n// \t\t? Rest extends []\n// \t\t\t? A extends undefined\n// \t\t\t\t? NonNullable<A> | ''\n// \t\t\t\t: A\n// \t\t\t: // @ts-ignore\n// \t\t\tA extends undefined\n// \t\t\t? `${NonNullable<A>}${Join<Rest>}` | ''\n// \t\t\t: // @ts-ignore\n// \t\t\t  `${A}${Join<Rest>}`\n// \t\t: ''\n// \t: ''\n\n// const template = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): Join<T> => {\n// \treturn a as any\n// }\n\n// const create =\n// \t<const T extends string>(t: T): ((t: T) => void) =>\n// \t(t) =>\n// \t\tt\n\n// const optional = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): T | undefined => {\n// \treturn undefined\n// }\n\n// template.optional = optional\n\n// const hi = create(\n// \ttemplate(\n// \t\t['seminar', 'millennium'],\n// \t\t':',\n// \t\t['Rio', 'Yuuka', 'Noa', 'Koyuki'],\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki']))\n// \t)\n// )\n\n// hi(`seminar:Noa,Koyuki,Yuuka`)\n\n// const a = TypeCompiler.Compile(t.String())\n\n// console.log(v.Decode.toString())\n\n// const T = t.Transform(v.schema)\n// \t.Decode((value) => new Date(value)) // required: number to Date\n// \t.Encode((value) => value.getTime()) // required: Date to number\n\n// const decoded = Value.Decode(T, 0) // const decoded = Date(1970-01-01T00:00:00.000Z)\n// const encoded = Value.Encode(T, decoded)\n",
  "import { NumberOptions } from '@sinclair/typebox'\nimport { TypeSystem } from '@sinclair/typebox/system'\nimport {\n\tType,\n\ttype SchemaOptions,\n\ttype TNull,\n\ttype TUnion,\n\ttype TSchema,\n\ttype TUndefined,\n\tTProperties,\n\tObjectOptions,\n\tTObject,\n\tTNumber,\n\tTBoolean,\n\tFormatRegistry\n} from '@sinclair/typebox'\nimport { type TypeCheck } from '@sinclair/typebox/compiler'\nimport { CookieOptions } from './cookie'\nimport { Value } from '@sinclair/typebox/value'\nimport { ValidationError } from './error'\n\nconst t = Object.assign({}, Type)\n\ntry {\n\tTypeSystem.Format('email', (value) =>\n\t\t/^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format('uuid', (value) =>\n\t\t/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(\n\t\t\tvalue\n\t\t)\n\t)\n\n\tTypeSystem.Format(\n\t\t'date',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n\n\tTypeSystem.Format(\n\t\t'date-time',\n\t\t(value) => !Number.isNaN(new Date(value).getTime())\n\t)\n} catch {\n\t// Not empty\n}\n\ntype MaybeArray<T> = T | T[]\n\nexport namespace ElysiaTypeOptions {\n\texport type Numeric = NumberOptions\n\n\texport type FileUnit = number | `${number}${'k' | 'm'}`\n\n\texport interface File extends SchemaOptions {\n\t\ttype?: MaybeArray<\n\t\t\t| (string & {})\n\t\t\t| 'image'\n\t\t\t| 'image/jpeg'\n\t\t\t| 'image/png'\n\t\t\t| 'image/gif'\n\t\t\t| 'image/tiff'\n\t\t\t| 'image/x-icon'\n\t\t\t| 'image/svg'\n\t\t\t| 'image/webp'\n\t\t\t| 'image/avif'\n\t\t\t| 'audio'\n\t\t\t| 'audio/mpeg'\n\t\t\t| 'audio/x-ms-wma'\n\t\t\t| 'audio/vnd.rn-realaudio'\n\t\t\t| 'audio/x-wav'\n\t\t\t| 'video'\n\t\t\t| 'video/mpeg'\n\t\t\t| 'video/mp4'\n\t\t\t| 'video/quicktime'\n\t\t\t| 'video/x-ms-wmv'\n\t\t\t| 'video/x-msvideo'\n\t\t\t| 'video/x-flv'\n\t\t\t| 'video/webm'\n\t\t\t| 'text'\n\t\t\t| 'text/css'\n\t\t\t| 'text/csv'\n\t\t\t| 'text/html'\n\t\t\t| 'text/javascript'\n\t\t\t| 'text/plain'\n\t\t\t| 'text/xml'\n\t\t\t| 'application'\n\t\t\t| 'application/ogg'\n\t\t\t| 'application/pdf'\n\t\t\t| 'application/xhtml'\n\t\t\t| 'application/html'\n\t\t\t| 'application/json'\n\t\t\t| 'application/ld+json'\n\t\t\t| 'application/xml'\n\t\t\t| 'application/zip'\n\t\t\t| 'font'\n\t\t\t| 'font/woff2'\n\t\t\t| 'font/woff'\n\t\t\t| 'font/ttf'\n\t\t\t| 'font/otf'\n\t\t>\n\t\tminSize?: FileUnit\n\t\tmaxSize?: FileUnit\n\t}\n\n\texport interface Files extends File {\n\t\tminItems?: number\n\t\tmaxItems?: number\n\t}\n}\n\nconst parseFileUnit = (size: ElysiaTypeOptions.FileUnit) => {\n\tif (typeof size === 'string')\n\t\tswitch (size.slice(-1)) {\n\t\t\tcase 'k':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1024\n\n\t\t\tcase 'm':\n\t\t\t\treturn +size.slice(0, size.length - 1) * 1048576\n\n\t\t\tdefault:\n\t\t\t\treturn +size\n\t\t}\n\n\treturn size\n}\n\nconst validateFile = (options: ElysiaTypeOptions.File, value: any) => {\n\tif (!(value instanceof Blob)) return false\n\n\tif (options.minSize && value.size < parseFileUnit(options.minSize))\n\t\treturn false\n\n\tif (options.maxSize && value.size > parseFileUnit(options.maxSize))\n\t\treturn false\n\n\tif (options.extension)\n\t\tif (typeof options.extension === 'string') {\n\t\t\tif (!value.type.startsWith(options.extension)) return false\n\t\t} else {\n\t\t\tfor (let i = 0; i < options.extension.length; i++)\n\t\t\t\tif (value.type.startsWith(options.extension[i])) return true\n\n\t\t\treturn false\n\t\t}\n\n\treturn true\n}\n\nconst Files = TypeSystem.Type<File[], ElysiaTypeOptions.Files>(\n\t'Files',\n\t(options, value) => {\n\t\tif (!Array.isArray(value)) return validateFile(options, value)\n\n\t\tif (options.minItems && value.length < options.minItems) return false\n\n\t\tif (options.maxItems && value.length > options.maxItems) return false\n\n\t\tfor (let i = 0; i < value.length; i++)\n\t\t\tif (!validateFile(options, value[i])) return false\n\n\t\treturn true\n\t}\n)\n\nFormatRegistry.Set('numeric', (value) => !!value && !isNaN(+value))\nFormatRegistry.Set('boolean', (value) => value === 'true' || value === 'false')\nFormatRegistry.Set('ObjectString', (value) => {\n\tlet start = value.charCodeAt(0)\n\n\t// If starts with ' ', '\\t', '\\n', then trim first\n\tif (start === 9 || start === 10 || start === 32)\n\t\tstart = value.trimStart().charCodeAt(0)\n\n\tif (start !== 123 && start !== 91) return false\n\n\ttry {\n\t\tJSON.parse(value)\n\n\t\treturn true\n\t} catch {\n\t\treturn false\n\t}\n})\n\nexport const ElysiaType = {\n\tNumeric: (property?: NumberOptions) => {\n\t\tconst schema = Type.Number(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'numeric',\n\t\t\t\t\t\t\tdefault: 0\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Number(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tconst number = +value\n\t\t\t\tif (isNaN(number)) return value\n\n\t\t\t\tif (property && !Value.Check(schema, number))\n\t\t\t\t\tthrow new ValidationError('property', schema, number)\n\n\t\t\t\treturn number\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TNumber\n\t},\n\tBooleanString: (property?: SchemaOptions) => {\n\t\tconst schema = Type.Boolean(property)\n\n\t\treturn t\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'boolean',\n\t\t\t\t\t\t\tdefault: false\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Boolean(property)\n\t\t\t\t\t],\n\t\t\t\t\tproperty\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string') return value === 'true'\n\n\t\t\t\tif (property && !Value.Check(schema, value))\n\t\t\t\t\tthrow new ValidationError('property', schema, value)\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => value) as any as TBoolean\n\t},\n\tObjectString: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions\n\t) =>\n\t\tt\n\t\t\t.Transform(\n\t\t\t\tt.Union(\n\t\t\t\t\t[\n\t\t\t\t\t\tt.String({\n\t\t\t\t\t\t\tformat: 'ObjectString',\n\t\t\t\t\t\t\tdefault: ''\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tt.Object(properties, options)\n\t\t\t\t\t],\n\t\t\t\t\toptions\n\t\t\t\t)\n\t\t\t)\n\t\t\t.Decode((value) => {\n\t\t\t\tif (typeof value === 'string')\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn JSON.parse(value as string)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\treturn value\n\t\t\t\t\t}\n\n\t\t\t\treturn value\n\t\t\t})\n\t\t\t.Encode((value) => JSON.stringify(value)) as any as TObject<T>,\n\tFile: TypeSystem.Type<File, ElysiaTypeOptions.File>('File', validateFile),\n\tFiles: (options: ElysiaTypeOptions.Files = {}) =>\n\t\tt\n\t\t\t.Transform(t.Union([Files(options)]))\n\t\t\t.Decode((value) => {\n\t\t\t\tif (Array.isArray(value)) return value\n\t\t\t\treturn [value]\n\t\t\t})\n\t\t\t.Encode((value) => value),\n\tNullable: <T extends TSchema>(schema: T): TUnion<[T, TNull]> =>\n\t\tt.Union([t.Null(), schema]) as any,\n\t/**\n\t * Allow Optional, Nullable and Undefined\n\t */\n\tMaybeEmpty: <T extends TSchema>(schema: T): TUnion<[T, TUndefined]> =>\n\t\tt.Union([t.Null(), t.Undefined(), schema]) as any,\n\tCookie: <T extends TProperties>(\n\t\tproperties: T,\n\t\toptions?: ObjectOptions &\n\t\t\tCookieOptions & {\n\t\t\t\t/**\n\t\t\t\t * Secret key for signing cookie\n\t\t\t\t *\n\t\t\t\t * If array is passed, will use Key Rotation.\n\t\t\t\t *\n\t\t\t\t * Key rotation is when an encryption key is retired\n\t\t\t\t * and replaced by generating a new cryptographic key.\n\t\t\t\t */\n\t\t\t\tsecrets?: string | string[]\n\t\t\t\t/**\n\t\t\t\t * Specified cookie name to be signed globally\n\t\t\t\t */\n\t\t\t\tsign?: Readonly<(keyof T | (string & {}))[]>\n\t\t\t}\n\t): TObject<T> => t.Object(properties, options)\n} as const\n\nexport type TCookie = (typeof ElysiaType)['Cookie']\n\ndeclare module '@sinclair/typebox' {\n\tinterface JavaScriptTypeBuilder {\n\t\tBooleanString: typeof ElysiaType.BooleanString\n\t\tObjectString: typeof ElysiaType.ObjectString\n\t\t// @ts-ignore\n\t\tNumeric: typeof ElysiaType.Numeric\n\t\t// @ts-ignore\n\t\tFile: typeof ElysiaType.File\n\t\t// @ts-ignore\n\t\tFiles: typeof ElysiaType.Files\n\t\tNullable: typeof ElysiaType.Nullable\n\t\tMaybeEmpty: typeof ElysiaType.MaybeEmpty\n\t\tCookie: typeof ElysiaType.Cookie\n\t}\n\n\tinterface SchemaOptions {\n\t\terror?:\n\t\t\t| string\n\t\t\t| ((\n\t\t\t\t\ttype: string,\n\t\t\t\t\tvalidator: TypeCheck<any>,\n\t\t\t\t\tvalue: unknown\n\t\t\t  ) => string | void)\n\t}\n}\n\n/**\n * A Boolean string\n *\n * Will be parse to Boolean\n */\nt.BooleanString = ElysiaType.BooleanString\n\nt.ObjectString = ElysiaType.ObjectString\n\n/**\n * A Numeric string\n *\n * Will be parse to Number\n */\nt.Numeric = ElysiaType.Numeric\n\nt.File = (arg = {}) =>\n\tElysiaType.File({\n\t\tdefault: 'File',\n\t\t...arg,\n\t\textension: arg?.type,\n\t\ttype: 'string',\n\t\tformat: 'binary'\n\t})\n\nt.Files = (arg = {}) =>\n\tElysiaType.Files({\n\t\t...arg,\n\t\telysiaMeta: 'Files',\n\t\tdefault: 'Files',\n\t\textension: arg?.type,\n\t\ttype: 'array',\n\t\titems: {\n\t\t\t...arg,\n\t\t\tdefault: 'Files',\n\t\t\ttype: 'string',\n\t\t\tformat: 'binary'\n\t\t}\n\t})\n\nt.Nullable = (schema) => ElysiaType.Nullable(schema)\nt.MaybeEmpty = ElysiaType.MaybeEmpty\n\nt.Cookie = ElysiaType.Cookie\n\nexport { t }\n\nexport {\n\tTypeSystemPolicy,\n\tTypeSystem,\n\tTypeSystemDuplicateFormat,\n\tTypeSystemDuplicateTypeKind\n} from '@sinclair/typebox/system'\nexport { TypeCompiler, TypeCheck } from '@sinclair/typebox/compiler'\n\n// type Template =\n// \t| string\n// \t| number\n// \t| bigint\n// \t| boolean\n// \t| StringConstructor\n// \t| NumberConstructor\n// \t| undefined\n\n// type Join<A> = A extends Readonly<[infer First, ...infer Rest]>\n// \t? (\n// \t\t\tFirst extends Readonly<Template[]>\n// \t\t\t\t? First[number]\n// \t\t\t\t: First extends StringConstructor\n// \t\t\t\t? string\n// \t\t\t\t: First extends NumberConstructor\n// \t\t\t\t? `${number}`\n// \t\t\t\t: First\n// \t  ) extends infer A\n// \t\t? Rest extends []\n// \t\t\t? A extends undefined\n// \t\t\t\t? NonNullable<A> | ''\n// \t\t\t\t: A\n// \t\t\t: // @ts-ignore\n// \t\t\tA extends undefined\n// \t\t\t? `${NonNullable<A>}${Join<Rest>}` | ''\n// \t\t\t: // @ts-ignore\n// \t\t\t  `${A}${Join<Rest>}`\n// \t\t: ''\n// \t: ''\n\n// const template = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): Join<T> => {\n// \treturn a as any\n// }\n\n// const create =\n// \t<const T extends string>(t: T): ((t: T) => void) =>\n// \t(t) =>\n// \t\tt\n\n// const optional = <\n// \tconst T extends Readonly<(Template | Readonly<Template[]>)[]>\n// >(\n// \t...p: T\n// ): T | undefined => {\n// \treturn undefined\n// }\n\n// template.optional = optional\n\n// const hi = create(\n// \ttemplate(\n// \t\t['seminar', 'millennium'],\n// \t\t':',\n// \t\t['Rio', 'Yuuka', 'Noa', 'Koyuki'],\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki'])),\n// \t\ttemplate.optional(template(',', ['Rio', 'Yuuka', 'Noa', 'Koyuki']))\n// \t)\n// )\n\n// hi(`seminar:Noa,Koyuki,Yuuka`)\n\n// const a = TypeCompiler.Compile(t.String())\n\n// console.log(v.Decode.toString())\n\n// const T = t.Transform(v.schema)\n// \t.Decode((value) => new Date(value)) // required: number to Date\n// \t.Encode((value) => value.getTime()) // required: Date to number\n\n// const decoded = Value.Decode(T, 0) // const decoded = Date(1970-01-01T00:00:00.000Z)\n// const encoded = Value.Encode(T, decoded)\n",
  "import type { Serve, Server, ServerWebSocket } from 'bun'\n\nimport { Memoirist } from 'memoirist'\nimport EventEmitter from 'eventemitter3'\nimport type { Static, TSchema } from '@sinclair/typebox'\n\nimport { createTraceListener } from './trace'\nimport type { Context } from './context'\n\nimport { ElysiaWS, websocket } from './ws'\nimport type { WS } from './ws/types'\n\nimport { isNotEmpty, mapEarlyResponse } from './handler'\nimport {\n\tcomposeHandler,\n\tcomposeGeneralHandler,\n\tcomposeErrorHandler\n} from './compose'\nimport {\n\tmergeHook,\n\tgetSchemaValidator,\n\tgetResponseSchemaValidator,\n\tmergeDeep,\n\tmergeCookie,\n\tchecksum,\n\tmergeLifeCycle,\n\tfilterGlobalHook,\n\tasGlobal,\n\ttraceBackMacro,\n\treplaceUrlPath,\n\tisNumericString\n} from './utils'\n\nimport {\n\tcreateDynamicErrorHandler,\n\tcreateDynamicHandler,\n\ttype DynamicHandler\n} from './dynamic-handle'\n\nimport {\n\tisProduction,\n\tERROR_CODE,\n\tELYSIA_RESPONSE,\n\tValidationError,\n\ttype ParseError,\n\ttype NotFoundError,\n\ttype InternalServerError\n} from './error'\n\nimport type {\n\tElysiaConfig,\n\tDecoratorBase,\n\tDefinitionBase,\n\tRouteBase,\n\tHandler,\n\tComposedHandler,\n\tInputSchema,\n\tLocalHook,\n\tMergeSchema,\n\tRouteSchema,\n\tUnwrapRoute,\n\tInternalRoute,\n\tHTTPMethod,\n\tSchemaValidator,\n\tVoidHandler,\n\tPreHandler,\n\tBodyHandler,\n\tOptionalHandler,\n\tAfterHandler,\n\tErrorHandler,\n\tLifeCycleStore,\n\tMaybePromise,\n\tPrettify,\n\tListenCallback,\n\tAddPrefix,\n\tAddSuffix,\n\tAddPrefixCapitalize,\n\tAddSuffixCapitalize,\n\tTraceReporter,\n\tTraceHandler,\n\tMaybeArray,\n\tGracefulHandler,\n\tGetPathParameter,\n\tMapResponse,\n\tChecksum,\n\tMacroManager,\n\tBaseMacro,\n\tMacroToProperty,\n\tTransformHandler\n} from './types'\nimport { t } from './type-system'\n\n/**\n * ### Elysia Server\n * Main instance to create web server using Elysia\n *\n * ---\n * @example\n * ```typescript\n * import { Elysia } from 'elysia'\n *\n * new Elysia()\n *     .get(\"/\", () => \"Hello\")\n *     .listen(8080)\n * ```\n */\nexport default class Elysia<\n\tBasePath extends string = '',\n\tDecorators extends DecoratorBase = {\n\t\trequest: {}\n\t\tstore: {}\n\t\tderive: {}\n\t\tresolve: {}\n\t},\n\tDefinitions extends DefinitionBase = {\n\t\ttype: {}\n\t\terror: {}\n\t},\n\tParentSchema extends RouteSchema = {},\n\tMacro extends Record<string, unknown> = {},\n\tRoutes extends RouteBase = {},\n\tScoped extends boolean = false\n> {\n\tconfig: ElysiaConfig<BasePath>\n\tprivate dependencies: Record<string, Checksum[]> = {}\n\n\tstore: Decorators['store'] = {}\n\tprivate decorators = {} as Decorators['request']\n\tprivate definitions = {\n\t\ttype: {},\n\t\terror: {}\n\t} as {\n\t\ttype: Definitions['type']\n\t\terror: Definitions['error']\n\t}\n\n\tschema = {} as Routes\n\n\tprivate macros: ((manager: MacroManager<any, any, any>) => Macro)[] =\n\t\t[] as any\n\n\tevent: LifeCycleStore = {\n\t\tstart: [],\n\t\trequest: [],\n\t\tparse: [],\n\t\ttransform: [],\n\t\tbeforeHandle: [],\n\t\tafterHandle: [],\n\t\tmapResponse: [],\n\t\tonResponse: [],\n\t\ttrace: [],\n\t\terror: [],\n\t\tstop: []\n\t}\n\n\treporter: TraceReporter = new EventEmitter()\n\n\tserver: Server | null = null\n\tprivate getServer() {\n\t\treturn this.server\n\t}\n\tprivate validator: SchemaValidator | null = null\n\n\tprivate router = new Memoirist<ComposedHandler>()\n\tprivate wsRouter = new Memoirist<ComposedHandler>()\n\troutes: InternalRoute[] = []\n\n\tprivate staticRouter = {\n\t\thandlers: [] as ComposedHandler[],\n\t\tvariables: '',\n\t\tmap: {} as Record<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tcode: string\n\t\t\t\tall?: string\n\t\t\t}\n\t\t>,\n\t\tall: ''\n\t}\n\n\tprivate wsPaths: Record<string, number> = {}\n\tprivate dynamicRouter = new Memoirist<DynamicHandler>()\n\tprivate lazyLoadModules: Promise<Elysia<any, any>>[] = []\n\tpath: BasePath = '' as any\n\tstack: string | undefined = undefined\n\n\tconstructor(config?: Partial<ElysiaConfig<BasePath, Scoped>>) {\n\t\tthis.config = {\n\t\t\tforceErrorEncapsulation: true,\n\t\t\tprefix: '',\n\t\t\taot: true,\n\t\t\tstrictPath: false,\n\t\t\tscoped: false,\n\t\t\tcookie: {},\n\t\t\tanalytic: false,\n\t\t\t...(config || {}),\n\t\t\tseed: config?.seed === undefined ? '' : config?.seed\n\t\t} as any\n\n\t\tif (config?.analytic && (config?.name || config?.seed !== undefined))\n\t\t\tthis.stack = new Error().stack\n\t}\n\n\tprivate add(\n\t\tmethod: HTTPMethod,\n\t\tpaths: string | Readonly<string[]>,\n\t\thandle: Handler<any, any, any> | any,\n\t\tlocalHook?: LocalHook<any, any, any, any, any>,\n\t\t{ allowMeta = false, skipPrefix = false } = {\n\t\t\tallowMeta: false as boolean | undefined,\n\t\t\tskipPrefix: false as boolean | undefined\n\t\t}\n\t) {\n\t\tif (typeof paths === 'string') paths = [paths]\n\n\t\tfor (let path of paths) {\n\t\t\tpath =\n\t\t\t\tpath === ''\n\t\t\t\t\t? path\n\t\t\t\t\t: path.charCodeAt(0) === 47\n\t\t\t\t\t? path\n\t\t\t\t\t: `/${path}`\n\n\t\t\tif (this.config.prefix && !skipPrefix && !this.config.scoped)\n\t\t\t\tpath = this.config.prefix + path\n\n\t\t\tif (localHook?.type)\n\t\t\t\tswitch (localHook.type) {\n\t\t\t\t\tcase 'text':\n\t\t\t\t\t\tlocalHook.type = 'text/plain'\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tlocalHook.type = 'application/json'\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'formdata':\n\t\t\t\t\t\tlocalHook.type = 'multipart/form-data'\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\tlocalHook.type = 'application/x-www-form-urlencoded'\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tcase 'arrayBuffer':\n\t\t\t\t\t\tlocalHook.type = 'application/octet-stream'\n\t\t\t\t\t\tbreak\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\tconst models = this.definitions.type as Record<string, TSchema>\n\n\t\t\tlet cookieValidator = getSchemaValidator(\n\t\t\t\tlocalHook?.cookie ?? (this.validator?.cookie as any),\n\t\t\t\t{\n\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\tmodels,\n\t\t\t\t\tadditionalProperties: true\n\t\t\t\t}\n\t\t\t)\n\n\t\t\tif (isNotEmpty(this.config.cookie ?? {})) {\n\t\t\t\tif (cookieValidator) {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tcookieValidator.schema = mergeCookie(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tcookieValidator.schema,\n\t\t\t\t\t\tthis.config.cookie ?? {}\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tcookieValidator = getSchemaValidator(\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tt.Cookie({}, this.config.cookie),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\t\tmodels,\n\t\t\t\t\t\t\tadditionalProperties: true\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst validator = {\n\t\t\t\tbody: getSchemaValidator(\n\t\t\t\t\tlocalHook?.body ?? (this.validator?.body as any),\n\t\t\t\t\t{\n\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\tmodels\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\theaders: getSchemaValidator(\n\t\t\t\t\tlocalHook?.headers ?? (this.validator?.headers as any),\n\t\t\t\t\t{\n\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\tmodels,\n\t\t\t\t\t\tadditionalProperties: true\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tparams: getSchemaValidator(\n\t\t\t\t\tlocalHook?.params ?? (this.validator?.params as any),\n\t\t\t\t\t{\n\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\tmodels\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tquery: getSchemaValidator(\n\t\t\t\t\tlocalHook?.query ?? (this.validator?.query as any),\n\t\t\t\t\t{\n\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\tmodels\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tcookie: cookieValidator,\n\t\t\t\tresponse: getResponseSchemaValidator(\n\t\t\t\t\tlocalHook?.response ?? (this.validator?.response as any),\n\t\t\t\t\t{\n\t\t\t\t\t\tdynamic: !this.config.aot,\n\t\t\t\t\t\tmodels\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t} as any\n\n\t\t\tconst globalHook = this.event\n\n\t\t\tconst loosePath = path.endsWith('/')\n\t\t\t\t? path.slice(0, path.length - 1)\n\t\t\t\t: path + '/'\n\n\t\t\tif (this.macros.length) {\n\t\t\t\tconst createManager =\n\t\t\t\t\t(stackName: keyof LifeCycleStore) =>\n\t\t\t\t\t(\n\t\t\t\t\t\ttype:\n\t\t\t\t\t\t\t| {\n\t\t\t\t\t\t\t\t\tinsert?: 'before' | 'after'\n\t\t\t\t\t\t\t\t\tstack?: 'global' | 'local'\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t| MaybeArray<Function>,\n\t\t\t\t\t\tfn?: MaybeArray<Function>\n\t\t\t\t\t) => {\n\t\t\t\t\t\tif (typeof type === 'function' || Array.isArray(type)) {\n\t\t\t\t\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\t\t\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\t\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\t\t\t\t\tif (Array.isArray(type))\n\t\t\t\t\t\t\t\tlocalHook[stackName] = (\n\t\t\t\t\t\t\t\t\tlocalHook[stackName] as unknown[]\n\t\t\t\t\t\t\t\t).concat(type) as any\n\t\t\t\t\t\t\telse localHook[stackName].push(type)\n\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { insert = 'after', stack = 'local' } = type\n\n\t\t\t\t\t\tif (stack === 'global') {\n\t\t\t\t\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\t\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t\t\t\t\t;(globalHook[stackName] as any[]).unshift(\n\t\t\t\t\t\t\t\t\t\tfn\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t;(globalHook[stackName] as any[]).push(fn)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t\t\t\t\tglobalHook[stackName] = fn.concat(\n\t\t\t\t\t\t\t\t\t\tglobalHook[stackName] as any\n\t\t\t\t\t\t\t\t\t) as any\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tglobalHook[stackName] = (\n\t\t\t\t\t\t\t\t\t\tglobalHook[stackName] as any[]\n\t\t\t\t\t\t\t\t\t).concat(fn)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (!localHook[stackName]) localHook[stackName] = []\n\t\t\t\t\t\t\tif (typeof localHook[stackName] === 'function')\n\t\t\t\t\t\t\t\tlocalHook[stackName] = [localHook[stackName]]\n\n\t\t\t\t\t\t\tif (!Array.isArray(fn)) {\n\t\t\t\t\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t\t\t\t\t;(localHook[stackName] as any[]).unshift(fn)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t;(localHook[stackName] as any[]).push(fn)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (insert === 'before') {\n\t\t\t\t\t\t\t\t\tlocalHook[stackName] = fn.concat(\n\t\t\t\t\t\t\t\t\t\tlocalHook[stackName]\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tlocalHook[stackName] =\n\t\t\t\t\t\t\t\t\t\tlocalHook[stackName].concat(fn)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\tconst manager: MacroManager = {\n\t\t\t\t\tevents: {\n\t\t\t\t\t\tglobal: globalHook,\n\t\t\t\t\t\tlocal: localHook\n\t\t\t\t\t},\n\t\t\t\t\tonParse: createManager('parse'),\n\t\t\t\t\tonTransform: createManager('transform'),\n\t\t\t\t\tonBeforeHandle: createManager('beforeHandle'),\n\t\t\t\t\tonAfterHandle: createManager('afterHandle'),\n\t\t\t\t\tonResponse: createManager('onResponse'),\n\t\t\t\t\tonError: createManager('error')\n\t\t\t\t}\n\n\t\t\t\tfor (const macro of this.macros)\n\t\t\t\t\ttraceBackMacro(macro(manager), localHook as any)\n\t\t\t}\n\n\t\t\tconst hooks = mergeHook(globalHook, localHook)\n\t\t\tconst isFn = typeof handle === 'function'\n\n\t\t\tif (this.config.aot === false) {\n\t\t\t\tthis.dynamicRouter.add(method, path, {\n\t\t\t\t\tvalidator,\n\t\t\t\t\thooks,\n\t\t\t\t\tcontent: localHook?.type as string,\n\t\t\t\t\thandle\n\t\t\t\t})\n\n\t\t\t\tif (this.config.strictPath === false) {\n\t\t\t\t\tthis.dynamicRouter.add(method, loosePath, {\n\t\t\t\t\t\tvalidator,\n\t\t\t\t\t\thooks,\n\t\t\t\t\t\tcontent: localHook?.type as string,\n\t\t\t\t\t\thandle\n\t\t\t\t\t})\n\t\t\t\t}\n\n\t\t\t\tthis.routes.push({\n\t\t\t\t\tmethod,\n\t\t\t\t\tpath,\n\t\t\t\t\tcomposed: null,\n\t\t\t\t\thandler: handle,\n\t\t\t\t\thooks: hooks as any\n\t\t\t\t})\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tconst mainHandler = composeHandler({\n\t\t\t\tpath,\n\t\t\t\tmethod,\n\t\t\t\thooks,\n\t\t\t\tvalidator,\n\t\t\t\thandler: handle,\n\t\t\t\thandleError: this.handleError,\n\t\t\t\tonRequest: this.event.request,\n\t\t\t\tconfig: this.config,\n\t\t\t\tdefinitions: allowMeta ? this.definitions.type : undefined,\n\t\t\t\tschema: allowMeta ? this.schema : undefined,\n\t\t\t\tgetReporter: () => this.reporter,\n\t\t\t\tsetHeader: this.setHeaders\n\t\t\t})\n\n\t\t\t// @ts-ignore\n\t\t\tif (!isFn) {\n\t\t\t\tconst context = Object.assign(\n\t\t\t\t\t{\n\t\t\t\t\t\theaders: {},\n\t\t\t\t\t\tquery: {},\n\t\t\t\t\t\tparams: {} as never,\n\t\t\t\t\t\tbody: undefined,\n\t\t\t\t\t\trequest: new Request(`http://localhost${path}`),\n\t\t\t\t\t\tstore: this.store,\n\t\t\t\t\t\tpath: path,\n\t\t\t\t\t\tset: {\n\t\t\t\t\t\t\theaders: this.setHeaders ?? {},\n\t\t\t\t\t\t\tstatus: 200\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tthis.decorators as any\n\t\t\t\t)\n\n\t\t\t\tlet response\n\n\t\t\t\tfor (const onRequest of Object.values(hooks.request)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst inner = mapEarlyResponse(\n\t\t\t\t\t\t\tonRequest(context),\n\t\t\t\t\t\t\tcontext.set\n\t\t\t\t\t\t)\n\t\t\t\t\t\tif (inner !== undefined) {\n\t\t\t\t\t\t\tresponse = inner\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tresponse = this.handleError(context, error as Error)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (response) mainHandler.response = response\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tmainHandler.response = mainHandler(context)\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tmainHandler.response = this.handleError(\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\terror as Error\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst existingRouteIndex = this.routes.findIndex(\n\t\t\t\t(route) => route.path === path && route.method === method\n\t\t\t)\n\n\t\t\tif (existingRouteIndex !== -1) {\n\t\t\t\t// remove route previously defined\n\t\t\t\tthis.routes.splice(existingRouteIndex, 1)\n\t\t\t}\n\n\t\t\tthis.routes.push({\n\t\t\t\tmethod,\n\t\t\t\tpath,\n\t\t\t\tcomposed: mainHandler,\n\t\t\t\thandler: handle,\n\t\t\t\thooks: hooks as any\n\t\t\t})\n\n\t\t\tif (method === '$INTERNALWS') {\n\t\t\t\tconst loose = this.config.strictPath\n\t\t\t\t\t? undefined\n\t\t\t\t\t: path.endsWith('/')\n\t\t\t\t\t? path.slice(0, path.length - 1)\n\t\t\t\t\t: path + '/'\n\n\t\t\t\tif (path.indexOf(':') === -1 && path.indexOf('*') === -1) {\n\t\t\t\t\tconst index = this.staticRouter.handlers.length\n\t\t\t\t\tthis.staticRouter.handlers.push(mainHandler)\n\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (mainHandler.response instanceof Response)\n\t\t\t\t\t\tthis.staticRouter.variables += `const st${index} = staticRouter.handlers[${index}].response\\n`\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.staticRouter.variables += `const st${index} = staticRouter.handlers[${index}]\\n`\n\n\t\t\t\t\tthis.wsPaths[path] = index\n\t\t\t\t\tif (loose) this.wsPaths[loose] = index\n\t\t\t\t} else {\n\t\t\t\t\tthis.wsRouter.add('ws', path, mainHandler)\n\t\t\t\t\tif (loose) this.wsRouter.add('ws', loose, mainHandler)\n\t\t\t\t}\n\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tif (path.indexOf(':') === -1 && path.indexOf('*') === -1) {\n\t\t\t\tconst index = this.staticRouter.handlers.length\n\t\t\t\tthis.staticRouter.handlers.push(mainHandler)\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tif (mainHandler.response instanceof Response)\n\t\t\t\t\tthis.staticRouter.variables += `const st${index} = staticRouter.handlers[${index}].response\\n`\n\t\t\t\telse\n\t\t\t\t\tthis.staticRouter.variables += `const st${index} = staticRouter.handlers[${index}]\\n`\n\n\t\t\t\tif (!this.staticRouter.map[path])\n\t\t\t\t\tthis.staticRouter.map[path] = {\n\t\t\t\t\t\tcode: ''\n\t\t\t\t\t}\n\n\t\t\t\tif (method === 'ALL')\n\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\tpath\n\t\t\t\t\t].all = `default: return st${index}(ctx)\\n`\n\t\t\t\telse {\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (mainHandler.response instanceof Response)\n\t\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t].code = `case '${method}': return st${index}.clone()\\n${this.staticRouter.map[path].code}`\n\t\t\t\t\telse\n\t\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\t\tpath\n\t\t\t\t\t\t].code = `case '${method}': return st${index}(ctx)\\n${this.staticRouter.map[path].code}`\n\t\t\t\t}\n\n\t\t\t\tif (!this.config.strictPath) {\n\t\t\t\t\tif (!this.staticRouter.map[loosePath])\n\t\t\t\t\t\tthis.staticRouter.map[loosePath] = {\n\t\t\t\t\t\t\tcode: ''\n\t\t\t\t\t\t}\n\n\t\t\t\t\tif (method === 'ALL')\n\t\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\t\tloosePath\n\t\t\t\t\t\t].all = `default: return st${index}(ctx)\\n`\n\t\t\t\t\telse {\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tif (mainHandler.response instanceof Response)\n\t\t\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\t\t\tloosePath\n\t\t\t\t\t\t\t].code = `case '${method}': return st${index}.clone()\\n${this.staticRouter.map[loosePath].code}`\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tthis.staticRouter.map[\n\t\t\t\t\t\t\t\tloosePath\n\t\t\t\t\t\t\t].code = `case '${method}': return st${index}(ctx)\\n${this.staticRouter.map[loosePath].code}`\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.router.add(method, path, mainHandler)\n\t\t\t\tif (!this.config.strictPath)\n\t\t\t\t\tthis.router.add(\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tpath.endsWith('/')\n\t\t\t\t\t\t\t? path.slice(0, path.length - 1)\n\t\t\t\t\t\t\t: path + '/',\n\t\t\t\t\t\tmainHandler\n\t\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setHeaders?: Context['set']['headers']\n\theaders(header: Context['set']['headers'] | undefined) {\n\t\tif (!header) return this\n\n\t\tif (!this.setHeaders) this.setHeaders = {}\n\n\t\tthis.setHeaders = mergeDeep(this.setHeaders, header)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### start | Life cycle event\n\t * Called after server is ready for serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onStart(({ url, port }) => {\n\t *         console.log(\"Running at ${url}:${port}\")\n\t *     })\n\t *     .listen(8080)\n\t * ```\n\t */\n\tonStart(handler: MaybeArray<GracefulHandler<this>>) {\n\t\tthis.on('start', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### request | Life cycle event\n\t * Called on every new request is accepted\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onRequest(({ method, url }) => {\n\t *         saveToAnalytic({ method, url })\n\t *     })\n\t * ```\n\t */\n\tonRequest<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tPreHandler<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('request', handler)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### parse | Life cycle event\n\t * Callback function to handle body parsing\n\t *\n\t * If truthy value is returned, will be assigned to `context.body`\n\t * Otherwise will skip the callback and look for the next one.\n\t *\n\t * Equivalent to Express's body parser\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onParse((request, contentType) => {\n\t *         if(contentType === \"application/json\")\n\t *             return request.json()\n\t *     })\n\t * ```\n\t */\n\tonParse(parser: MaybeArray<BodyHandler<ParentSchema, Decorators>>) {\n\t\tthis.on('parse', parser)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### transform | Life cycle event\n\t * Assign or transform anything related to context before validation.\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onTransform(({ params }) => {\n\t *         if(params.id)\n\t *             params.id = +params.id\n\t *     })\n\t * ```\n\t */\n\tonTransform<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tTransformHandler<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('transform', handler)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tresolve<Resolver extends Object>(\n\t\tresolver: (\n\t\t\tcontext: Prettify<Context<ParentSchema, Decorators>>\n\t\t) => MaybePromise<Resolver> extends { store: any } ? never : Resolver\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: Decorators['store']\n\t\t\tderive: Decorators['resolve']\n\t\t\tresolve: Prettify<Decorators['resolve'] & Awaited<Resolver>>\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t> {\n\t\t// @ts-ignore\n\t\tresolver.$elysia = 'resolve'\n\n\t\treturn this.onBeforeHandle(resolver as any) as any\n\t}\n\n\t/**\n\t * ### Before Handle | Life cycle event\n\t * Intercept request **before(()) main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response` and skip the main handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onBeforeHandle(({ params: { id }, status }) => {\n\t *         if(id && !isExisted(id)) {\n\t * \t           status(401)\n\t *\n\t *             return \"Unauthorized\"\n\t * \t       }\n\t *     })\n\t * ```\n\t */\n\tonBeforeHandle<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tOptionalHandler<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('beforeHandle', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tonAfterHandle<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tAfterHandler<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('afterHandle', handler as AfterHandler<any, any>)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .mapResponse((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\tmapResponse<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tMapResponse<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('mapResponse', handler as MapResponse<any, any>)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### response | Life cycle event\n\t * Called when handler is executed\n\t * Good for analytic metrics\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\n\tonResponse<Schema extends RouteSchema = {}>(\n\t\thandler: MaybeArray<\n\t\t\tVoidHandler<MergeSchema<Schema, ParentSchema>, Decorators>\n\t\t>\n\t) {\n\t\tthis.on('response', handler)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### After Handle | Life cycle event\n\t * Intercept request **after** main handler is called.\n\t *\n\t * If truthy value is returned, will be assigned as `Response`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onAfterHandle((context, response) => {\n\t *         if(typeof response === \"object\")\n\t *             return JSON.stringify(response)\n\t *     })\n\t * ```\n\t */\n\ttrace<Route extends RouteSchema = {}>(\n\t\thandler: TraceHandler<Route, Decorators>\n\t) {\n\t\tthis.reporter.on(\n\t\t\t'event',\n\t\t\tcreateTraceListener(\n\t\t\t\t() => this.reporter,\n\t\t\t\tthis.event.trace.length,\n\t\t\t\thandler\n\t\t\t)\n\t\t)\n\n\t\tthis.on('trace', handler)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error('CUSTOM_ERROR', CustomError)\n\t * ```\n\t */\n\terror<\n\t\tconst Errors extends Record<\n\t\t\tstring,\n\t\t\t{\n\t\t\t\tprototype: Error\n\t\t\t}\n\t\t>\n\t>(\n\t\terrors: Errors\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: Definitions['error'] & {\n\t\t\t\t[K in keyof Errors]: Errors[K] extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: Errors[K]\n\t\t\t}\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error({\n\t *         CUSTOM_ERROR: CustomError\n\t *     })\n\t * ```\n\t */\n\terror<\n\t\tName extends string,\n\t\tconst CustomError extends {\n\t\t\tprototype: Error\n\t\t}\n\t>(\n\t\tname: Name,\n\t\terrors: CustomError\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: Definitions['error'] & {\n\t\t\t\t[name in Name]: CustomError extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: CustomError\n\t\t\t}\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * Register errors\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * class CustomError extends Error {\n\t *     constructor() {\n\t *         super()\n\t *     }\n\t * }\n\t *\n\t * new Elysia()\n\t *     .error('CUSTOM_ERROR', CustomError)\n\t * ```\n\t */\n\terror<const NewErrors extends Record<string, Error>>(\n\t\tmapper: (decorators: Definitions['error']) => NewErrors\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: Definitions['type']\n\t\t\terror: {\n\t\t\t\t[K in keyof NewErrors]: NewErrors[K] extends {\n\t\t\t\t\tprototype: infer LiteralError extends Error\n\t\t\t\t}\n\t\t\t\t\t? LiteralError\n\t\t\t\t\t: never\n\t\t\t}\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\terror(\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\tname:\n\t\t\t| string\n\t\t\t| Record<\n\t\t\t\t\tstring,\n\t\t\t\t\t{\n\t\t\t\t\t\tprototype: Error\n\t\t\t\t\t}\n\t\t\t  >\n\t\t\t| Function,\n\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\terror?: {\n\t\t\tprototype: Error\n\t\t}\n\t): Elysia<any, any, any, any, any, any, any> {\n\t\tswitch (typeof name) {\n\t\t\tcase 'string':\n\t\t\t\t// @ts-ignore\n\t\t\t\terror.prototype[ERROR_CODE] = name\n\n\t\t\t\t// @ts-ignore\n\t\t\t\tthis.definitions.error[name] = error\n\n\t\t\t\treturn this\n\n\t\t\tcase 'function':\n\t\t\t\tthis.definitions.error = name(this.definitions.error)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\tfor (const [code, error] of Object.entries(name)) {\n\t\t\t// @ts-ignore\n\t\t\terror.prototype[ERROR_CODE] = code\n\n\t\t\t// @ts-ignore\n\t\t\tthis.definitions.error[code] = error\n\t\t}\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### Error | Life cycle event\n\t * Called when error is thrown during processing request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onError(({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\tonError<Schema extends RouteSchema = {}>(\n\t\thandler: ErrorHandler<\n\t\t\tDefinitions['error'],\n\t\t\tMergeSchema<Schema, ParentSchema>,\n\t\t\tDecorators\n\t\t>\n\t) {\n\t\tthis.on('error', handler as ErrorHandler<any, any, any>)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### stop | Life cycle event\n\t * Called after server stop serving request\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .onStop((app) => {\n\t *         cleanup()\n\t *     })\n\t * ```\n\t */\n\tonStop(handler: MaybeArray<GracefulHandler<this>>) {\n\t\tthis.on('stop', handler as any)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### on\n\t * Syntax sugar for attaching life cycle event by name\n\t *\n\t * Does the exact same thing as `.on[Event]()`\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .on('error', ({ code }) => {\n\t *         if(code === \"NOT_FOUND\")\n\t *             return \"Path not found :(\"\n\t *     })\n\t * ```\n\t */\n\ton<Event extends keyof LifeCycleStore>(\n\t\ttype: Exclude<Event, 'onResponse'> | 'response',\n\t\thandlers: MaybeArray<Extract<LifeCycleStore[Event], Function[]>[0]>\n\t) {\n\t\tfor (let handler of Array.isArray(handlers) ? handlers : [handlers]) {\n\t\t\thandler = asGlobal(handler)\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'start':\n\t\t\t\t\tthis.event.start.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'request':\n\t\t\t\t\tthis.event.request.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'parse':\n\t\t\t\t\tthis.event.parse.splice(\n\t\t\t\t\t\tthis.event.parse.length - 1,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\thandler as any\n\t\t\t\t\t)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'transform':\n\t\t\t\t\tthis.event.transform.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'beforeHandle':\n\t\t\t\t\tthis.event.beforeHandle.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'afterHandle':\n\t\t\t\t\tthis.event.afterHandle.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'mapResponse':\n\t\t\t\t\tthis.event.mapResponse.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'response':\n\t\t\t\t\tthis.event.onResponse.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'trace':\n\t\t\t\t\tthis.event.trace.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'error':\n\t\t\t\t\tthis.event.error.push(handler as any)\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'stop':\n\t\t\t\t\tthis.event.stop.push(handler as any)\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn this\n\t}\n\n\tgroup<\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any>,\n\t\tconst Prefix extends string\n\t>(\n\t\tprefix: Prefix,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\t`${BasePath}${Prefix}`,\n\t\t\t\tDecorators,\n\t\t\t\tDefinitions,\n\t\t\t\tParentSchema,\n\t\t\t\tMacro,\n\t\t\t\t{}\n\t\t\t>\n\t\t) => NewElysia\n\t): NewElysia extends Elysia<\n\t\tany,\n\t\tinfer PluginDecorators,\n\t\tinfer PluginDefinitions,\n\t\tinfer PluginSchema,\n\t\tany,\n\t\tany\n\t>\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tPluginDecorators,\n\t\t\t\tPluginDefinitions,\n\t\t\t\tPluginSchema,\n\t\t\t\tMacro,\n\t\t\t\tPrettify<Routes & NewElysia['schema']>\n\t\t  >\n\t\t: this\n\n\tgroup<\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any>,\n\t\tconst Prefix extends string,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>\n\t>(\n\t\tprefix: Prefix,\n\t\tschema: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Prefix}`\n\t\t>,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\t`${BasePath}${Prefix}`,\n\t\t\t\tDecorators,\n\t\t\t\tDefinitions,\n\t\t\t\tSchema,\n\t\t\t\tMacro,\n\t\t\t\t{}\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<Routes & NewElysia['schema']>\n\t>\n\n\t/**\n\t * ### group\n\t * Encapsulate and group path with prefix\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .group('/v1', app => app\n\t *         .get('/', () => 'Hi')\n\t *         .get('/name', () => 'Elysia')\n\t *     })\n\t * ```\n\t */\n\tgroup(\n\t\tprefix: string,\n\t\tschemaOrRun:\n\t\t\t| LocalHook<any, any, any, any, any>\n\t\t\t| ((\n\t\t\t\t\tgroup: Elysia<any, any, any, any, any, any, any>\n\t\t\t  ) => Elysia<any, any, any, any, any, any, any>),\n\t\trun?: (\n\t\t\tgroup: Elysia<any, any, any, any, any, any, any>\n\t\t) => Elysia<any, any, any, any, any, any, any>\n\t): this {\n\t\tconst instance = new Elysia({\n\t\t\t...(this.config || {}),\n\t\t\tprefix: ''\n\t\t})\n\t\tinstance.store = this.store\n\t\tinstance.definitions = this.definitions\n\t\tinstance.getServer = () => this.server\n\n\t\tconst isSchema = typeof schemaOrRun === 'object'\n\n\t\tconst sandbox = (isSchema ? run! : schemaOrRun)(instance)\n\t\tthis.decorators = mergeDeep(this.decorators, instance.decorators)\n\n\t\tif (sandbox.event.request.length)\n\t\t\tthis.event.request = [\n\t\t\t\t...(this.event.request || []),\n\t\t\t\t...((sandbox.event.request || []) as any)\n\t\t\t]\n\n\t\tif (sandbox.event.onResponse.length)\n\t\t\tthis.event.onResponse = [\n\t\t\t\t...(this.event.onResponse || []),\n\t\t\t\t...((sandbox.event.onResponse || []) as any)\n\t\t\t]\n\n\t\tthis.model(sandbox.definitions.type)\n\n\t\tObject.values(instance.routes).forEach(\n\t\t\t({ method, path, handler, hooks }) => {\n\t\t\t\tpath = (isSchema ? '' : this.config.prefix) + prefix + path\n\n\t\t\t\tif (isSchema) {\n\t\t\t\t\tconst hook = schemaOrRun\n\t\t\t\t\tconst localHook = hooks as LocalHook<\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany,\n\t\t\t\t\t\tany\n\t\t\t\t\t>\n\n\t\t\t\t\tthis.add(\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\thandler,\n\t\t\t\t\t\tmergeHook(hook, {\n\t\t\t\t\t\t\t...(localHook || {}),\n\t\t\t\t\t\t\terror: !localHook.error\n\t\t\t\t\t\t\t\t? sandbox.event.error\n\t\t\t\t\t\t\t\t: Array.isArray(localHook.error)\n\t\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t\t...(localHook.error || {}),\n\t\t\t\t\t\t\t\t\t\t...(sandbox.event.error || {})\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t\t: [\n\t\t\t\t\t\t\t\t\t\tlocalHook.error,\n\t\t\t\t\t\t\t\t\t\t...(sandbox.event.error || {})\n\t\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t})\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tthis.add(\n\t\t\t\t\t\tmethod,\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\thandler,\n\t\t\t\t\t\tmergeHook(hooks as LocalHook<any, any, any, any, any>, {\n\t\t\t\t\t\t\terror: sandbox.event.error\n\t\t\t\t\t\t}),\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tskipPrefix: true\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\tguard<\n\t\tconst LocalSchema extends InputSchema,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>\n\t>(\n\t\thook: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\tBasePath\n\t\t>\n\t): Elysia<BasePath, Decorators, Definitions, Route, Macro, Routes, Scoped>\n\n\tguard<\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst NewElysia extends Elysia<any, any, any, any, any, any, any>,\n\t\tconst Schema extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>\n\t>(\n\t\tschema: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tSchema,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro\n\t\t>,\n\t\trun: (\n\t\t\tgroup: Elysia<\n\t\t\t\tBasePath,\n\t\t\t\tDecorators,\n\t\t\t\tDefinitions,\n\t\t\t\tSchema,\n\t\t\t\tMacro,\n\t\t\t\t{},\n\t\t\t\tScoped\n\t\t\t>\n\t\t) => NewElysia\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<Routes & NewElysia['schema']>\n\t>\n\n\t/**\n\t * ### guard\n\t * Encapsulate and pass hook into all child handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .guard({\n\t *          schema: {\n\t *              body: t.Object({\n\t *                  username: t.String(),\n\t *                  password: t.String()\n\t *              })\n\t *          }\n\t *     }, app => app\n\t *         .get(\"/\", () => 'Hi')\n\t *         .get(\"/name\", () => 'Elysia')\n\t *     })\n\t * ```\n\t */\n\tguard(\n\t\thook: LocalHook<any, any, any, any, any>,\n\t\trun?: (\n\t\t\tgroup: Elysia<any, any, any, any, any, any, any>\n\t\t) => Elysia<any, any, any, any, any, any, any>\n\t): Elysia<any, any, any, any, any, any, any> {\n\t\tif (!run) {\n\t\t\tthis.event = mergeLifeCycle(this.event, hook)\n\t\t\tthis.validator = {\n\t\t\t\tbody: hook.body,\n\t\t\t\theaders: hook.headers,\n\t\t\t\tparams: hook.params,\n\t\t\t\tquery: hook.query,\n\t\t\t\tresponse: hook.response\n\t\t\t}\n\n\t\t\treturn this\n\t\t}\n\n\t\tconst instance = new Elysia<any>({\n\t\t\t...(this.config || {}),\n\t\t\tprefix: ''\n\t\t})\n\t\tinstance.store = this.store\n\t\tinstance.definitions = this.definitions\n\n\t\tconst sandbox = run(instance)\n\t\tthis.decorators = mergeDeep(this.decorators, instance.decorators)\n\n\t\tif (sandbox.event.request.length)\n\t\t\tthis.event.request = [\n\t\t\t\t...(this.event.request || []),\n\t\t\t\t...(sandbox.event.request || [])\n\t\t\t]\n\n\t\tif (sandbox.event.onResponse.length)\n\t\t\tthis.event.onResponse = [\n\t\t\t\t...(this.event.onResponse || []),\n\t\t\t\t...(sandbox.event.onResponse || [])\n\t\t\t]\n\n\t\tthis.model(sandbox.definitions.type)\n\n\t\tObject.values(instance.routes).forEach(\n\t\t\t({ method, path, handler, hooks: localHook }) => {\n\t\t\t\tthis.add(\n\t\t\t\t\tmethod,\n\t\t\t\t\tpath,\n\t\t\t\t\thandler,\n\t\t\t\t\tmergeHook(hook as LocalHook<any, any, any, any, any>, {\n\t\t\t\t\t\t...((localHook || {}) as LocalHook<\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\tany\n\t\t\t\t\t\t>),\n\t\t\t\t\t\terror: !localHook.error\n\t\t\t\t\t\t\t? sandbox.event.error\n\t\t\t\t\t\t\t: Array.isArray(localHook.error)\n\t\t\t\t\t\t\t? [\n\t\t\t\t\t\t\t\t\t...(localHook.error || {}),\n\t\t\t\t\t\t\t\t\t...(sandbox.event.error || [])\n\t\t\t\t\t\t\t  ]\n\t\t\t\t\t\t\t: [localHook.error, ...(sandbox.event.error || [])]\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t}\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\t// Inline Fn\n\tuse<NewElysia extends Elysia<any, any, any, any, any, any, any> = this>(\n\t\tplugin: MaybePromise<(app: NewElysia) => MaybePromise<NewElysia>>\n\t): NewElysia extends Elysia<\n\t\tany,\n\t\tinfer PluginDecorators,\n\t\tinfer PluginDefinitions,\n\t\tinfer PluginSchema,\n\t\tinfer PluginMacro,\n\t\tany\n\t>\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\t{\n\t\t\t\t\trequest: Prettify<\n\t\t\t\t\t\tDecorators['request'] & PluginDecorators['request']\n\t\t\t\t\t>\n\t\t\t\t\tstore: Prettify<\n\t\t\t\t\t\tDecorators['store'] & PluginDecorators['store']\n\t\t\t\t\t>\n\t\t\t\t\tderive: Prettify<\n\t\t\t\t\t\tDecorators['derive'] & PluginDecorators['derive']\n\t\t\t\t\t>\n\t\t\t\t\tresolve: Prettify<\n\t\t\t\t\t\tDecorators['resolve'] & PluginDecorators['resolve']\n\t\t\t\t\t>\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: Prettify<\n\t\t\t\t\t\tDefinitions['type'] & PluginDefinitions['type']\n\t\t\t\t\t>\n\t\t\t\t\terror: Prettify<\n\t\t\t\t\t\tDefinitions['error'] & PluginDefinitions['error']\n\t\t\t\t\t>\n\t\t\t\t},\n\t\t\t\tPrettify<MergeSchema<ParentSchema, PluginSchema>>,\n\t\t\t\tPrettify<Macro & PluginMacro>,\n\t\t\t\tRoutes & NewElysia['schema'],\n\t\t\t\tScoped\n\t\t  >\n\t\t: this\n\n\t// Entire Instance\n\tuse<NewElysia extends Elysia<any, any, any, any, any, any, any>>(\n\t\tinstance: MaybePromise<NewElysia>\n\t): NewElysia extends Elysia<\n\t\tany,\n\t\tinfer PluginDecorators,\n\t\tinfer PluginDefinitions,\n\t\tinfer PluginSchema,\n\t\tinfer PluginMacro,\n\t\tany,\n\t\tinfer IsScoped\n\t>\n\t\t? IsScoped extends true\n\t\t\t? Elysia<\n\t\t\t\t\tBasePath,\n\t\t\t\t\tDecorators,\n\t\t\t\t\tDefinitions,\n\t\t\t\t\tParentSchema,\n\t\t\t\t\tMacro,\n\t\t\t\t\tBasePath extends ``\n\t\t\t\t\t\t? Routes & NewElysia['schema']\n\t\t\t\t\t\t: Routes & AddPrefix<BasePath, NewElysia['schema']>,\n\t\t\t\t\tScoped\n\t\t\t  >\n\t\t\t: Elysia<\n\t\t\t\t\tBasePath,\n\t\t\t\t\t{\n\t\t\t\t\t\trequest: Prettify<\n\t\t\t\t\t\t\tDecorators['request'] & PluginDecorators['request']\n\t\t\t\t\t\t>\n\t\t\t\t\t\tstore: Prettify<\n\t\t\t\t\t\t\tDecorators['store'] & PluginDecorators['store']\n\t\t\t\t\t\t>\n\t\t\t\t\t\tderive: Prettify<\n\t\t\t\t\t\t\tDecorators['derive'] & PluginDecorators['derive']\n\t\t\t\t\t\t>\n\t\t\t\t\t\tresolve: Prettify<\n\t\t\t\t\t\t\tDecorators['resolve'] & PluginDecorators['resolve']\n\t\t\t\t\t\t>\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: Prettify<\n\t\t\t\t\t\t\tDefinitions['type'] & PluginDefinitions['type']\n\t\t\t\t\t\t>\n\t\t\t\t\t\terror: Prettify<\n\t\t\t\t\t\t\tDefinitions['error'] & PluginDefinitions['error']\n\t\t\t\t\t\t>\n\t\t\t\t\t},\n\t\t\t\t\tPrettify<MergeSchema<ParentSchema, PluginSchema>>,\n\t\t\t\t\tPrettify<Macro & PluginMacro>,\n\t\t\t\t\tBasePath extends ``\n\t\t\t\t\t\t? Routes & NewElysia['schema']\n\t\t\t\t\t\t: Routes & AddPrefix<BasePath, NewElysia['schema']>,\n\t\t\t\t\tScoped\n\t\t\t  >\n\t\t: this\n\n\t// Import Fn\n\tuse<NewElysia extends Elysia<any, any, any, any, any, any, any>>(\n\t\tplugin: Promise<{\n\t\t\tdefault: (\n\t\t\t\telysia: Elysia<any, any, any, any, any, any, any>\n\t\t\t) => MaybePromise<NewElysia>\n\t\t}>\n\t): NewElysia extends Elysia<\n\t\tany,\n\t\tinfer PluginDecorators,\n\t\tinfer PluginDefinitions,\n\t\tinfer PluginSchema,\n\t\tinfer PluginMacro,\n\t\tany\n\t>\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\t{\n\t\t\t\t\trequest: Decorators['request'] & PluginDecorators['request']\n\t\t\t\t\tstore: Decorators['store'] & PluginDecorators['store']\n\t\t\t\t\tderive: Decorators['derive'] & PluginDecorators['derive']\n\t\t\t\t\tresolve: Decorators['resolve'] & PluginDecorators['resolve']\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: Definitions['type'] & PluginDefinitions['type']\n\t\t\t\t\terror: Definitions['error'] & PluginDefinitions['error']\n\t\t\t\t},\n\t\t\t\tMergeSchema<ParentSchema, PluginSchema>,\n\t\t\t\tPrettify<Macro & PluginMacro>,\n\t\t\t\tBasePath extends ``\n\t\t\t\t\t? Routes & NewElysia['schema']\n\t\t\t\t\t: Routes & AddPrefix<BasePath, NewElysia['schema']>,\n\t\t\t\tScoped\n\t\t  >\n\t\t: this\n\n\t// Import entire instance\n\tuse<LazyLoadElysia extends Elysia<any, any, any, any, any, any, any>>(\n\t\tplugin: Promise<{\n\t\t\tdefault: LazyLoadElysia\n\t\t}>\n\t): LazyLoadElysia extends Elysia<\n\t\tany,\n\t\tinfer PluginDecorators,\n\t\tinfer PluginDefinitions,\n\t\tinfer PluginSchema,\n\t\tinfer PluginMacro,\n\t\tany\n\t>\n\t\t? Elysia<\n\t\t\t\tBasePath,\n\t\t\t\t{\n\t\t\t\t\trequest: PluginDecorators['request'] & Decorators['request']\n\t\t\t\t\tstore: PluginDecorators['store'] & Decorators['store']\n\t\t\t\t\tderive: Decorators['derive'] & PluginDecorators['derive']\n\t\t\t\t\tresolve: Decorators['resolve'] & PluginDecorators['resolve']\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: PluginDefinitions['type'] & Definitions['type']\n\n\t\t\t\t\terror: PluginDefinitions['error'] & Definitions['error']\n\t\t\t\t},\n\t\t\t\tMergeSchema<PluginSchema, ParentSchema>,\n\t\t\t\tPrettify<Macro & PluginMacro>,\n\t\t\t\tBasePath extends ``\n\t\t\t\t\t? Routes & LazyLoadElysia['schema']\n\t\t\t\t\t: Routes & AddPrefix<BasePath, LazyLoadElysia['schema']>\n\t\t  >\n\t\t: this\n\n\t/**\n\t * ### use\n\t * Merge separate logic of Elysia with current\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * const plugin = (app: Elysia) => app\n\t *     .get('/plugin', () => 'hi')\n\t *\n\t * new Elysia()\n\t *     .use(plugin)\n\t * ```\n\t */\n\tuse(\n\t\tplugin:\n\t\t\t| Elysia<any, any, any, any, any, any, any>\n\t\t\t| MaybePromise<\n\t\t\t\t\t(\n\t\t\t\t\t\tapp: Elysia<any, any, any, any, any, any, any>\n\t\t\t\t\t) => MaybePromise<Elysia<any, any, any, any, any, any, any>>\n\t\t\t  >\n\t\t\t| Promise<{\n\t\t\t\t\tdefault: Elysia<any, any, any, any, any, any, any>\n\t\t\t  }>\n\t\t\t| Promise<{\n\t\t\t\t\tdefault: (\n\t\t\t\t\t\telysia: Elysia<any, any, any, any, any, any, any>\n\t\t\t\t\t) => MaybePromise<Elysia<any, any, any, any, any, any, any>>\n\t\t\t  }>\n\t): Elysia<any, any, any, any, any, any, any> {\n\t\tif (plugin instanceof Promise) {\n\t\t\tthis.lazyLoadModules.push(\n\t\t\t\tplugin\n\t\t\t\t\t.then((plugin) => {\n\t\t\t\t\t\tif (typeof plugin === 'function') {\n\t\t\t\t\t\t\treturn plugin(\n\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t) as unknown as Elysia\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof plugin.default === 'function')\n\t\t\t\t\t\t\treturn plugin.default(\n\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\treturn this._use(plugin as any)\n\t\t\t\t\t})\n\t\t\t\t\t.then((x) => x.compile())\n\t\t\t)\n\n\t\t\treturn this as unknown as any\n\t\t} else return this._use(plugin)\n\n\t\treturn this\n\t}\n\n\tprivate _use(\n\t\tplugin:\n\t\t\t| Elysia<any, any, any, any, any, any, any>\n\t\t\t| ((\n\t\t\t\t\tapp: Elysia<any, any, any, any, any, any, any>\n\t\t\t  ) => MaybePromise<Elysia<any, any, any, any, any, any, any>>)\n\t) {\n\t\tif (typeof plugin === 'function') {\n\t\t\tconst instance = plugin(this as unknown as any) as unknown as any\n\t\t\tif (instance instanceof Promise) {\n\t\t\t\tthis.lazyLoadModules.push(\n\t\t\t\t\tinstance\n\t\t\t\t\t\t.then((plugin) => {\n\t\t\t\t\t\t\tif (plugin instanceof Elysia) {\n\t\t\t\t\t\t\t\tthis.compile()\n\n\t\t\t\t\t\t\t\t// Recompile async plugin routes\n\t\t\t\t\t\t\t\tfor (const {\n\t\t\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\thooks\n\t\t\t\t\t\t\t\t} of Object.values(plugin.routes)) {\n\t\t\t\t\t\t\t\t\tthis.add(\n\t\t\t\t\t\t\t\t\t\tmethod,\n\t\t\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\t\t\thandler,\n\t\t\t\t\t\t\t\t\t\tmergeHook(\n\t\t\t\t\t\t\t\t\t\t\thooks as LocalHook<\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany,\n\t\t\t\t\t\t\t\t\t\t\t\tany\n\t\t\t\t\t\t\t\t\t\t\t>,\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\terror: plugin.event.error\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn plugin\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (typeof plugin === 'function')\n\t\t\t\t\t\t\t\treturn plugin(\n\t\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\t\tif (typeof plugin.default === 'function')\n\t\t\t\t\t\t\t\treturn plugin.default(\n\t\t\t\t\t\t\t\t\tthis as unknown as any\n\t\t\t\t\t\t\t\t) as unknown as Elysia\n\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn this._use(plugin)\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((x) => x.compile())\n\t\t\t\t)\n\t\t\t\treturn this as unknown as any\n\t\t\t}\n\n\t\t\treturn instance\n\t\t}\n\n\t\tconst { name, seed } = plugin.config\n\n\t\tplugin.getServer = () => this.getServer()\n\t\tthis.headers(plugin.setHeaders)\n\n\t\tconst isScoped = plugin.config.scoped\n\t\tif (isScoped) {\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\tthis.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn this\n\n\t\t\t\tthis.dependencies[name].push(\n\t\t\t\t\t!this.config?.analytic\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies,\n\t\t\t\t\t\t\t\tstack: plugin.stack,\n\t\t\t\t\t\t\t\troutes: plugin.routes,\n\t\t\t\t\t\t\t\tdecorators: plugin.decorators,\n\t\t\t\t\t\t\t\tstore: plugin.store,\n\t\t\t\t\t\t\t\ttype: plugin.definitions.type,\n\t\t\t\t\t\t\t\terror: plugin.definitions.error,\n\t\t\t\t\t\t\t\tderive: plugin.event.transform\n\t\t\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\t\t\t.filter((x) => x.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tresolve: plugin.event.transform\n\t\t\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\t\t\t.filter((x) => x.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t  }\n\t\t\t\t)\n\t\t\t}\n\n\t\t\tplugin.model(this.definitions.type as any)\n\t\t\tplugin.error(this.definitions.error as any)\n\t\t\tplugin.macros = [...(this.macros || []), ...(plugin.macros || [])]\n\n\t\t\tplugin.onRequest((context) => {\n\t\t\t\tObject.assign(context, this.decorators)\n\t\t\t\tObject.assign(context.store, this.store)\n\t\t\t})\n\n\t\t\tplugin.event.trace = [\n\t\t\t\t...(this.event.trace || []),\n\t\t\t\t...(plugin.event.trace || [])\n\t\t\t]\n\n\t\t\tif (plugin.config.aot) plugin.compile()\n\n\t\t\tif (isScoped && !plugin.config.prefix)\n\t\t\t\tconsole.warn(\n\t\t\t\t\t'When using scoped plugins it is recommended to use a prefix, else routing may not work correctly for the second scoped instance'\n\t\t\t\t)\n\n\t\t\tlet instance\n\n\t\t\tif (isScoped && plugin.config.prefix)\n\t\t\t\tinstance = this.mount(plugin.config.prefix + '/', plugin.fetch)\n\t\t\telse instance = this.mount(plugin.fetch)\n\n\t\t\tthis.routes = this.routes.concat(instance.routes)\n\n\t\t\treturn this\n\t\t} else {\n\t\t\tplugin.reporter = this.reporter\n\t\t\tfor (const trace of plugin.event.trace) this.trace(trace)\n\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\t!this.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\tthis.macros.push(...(plugin.macros || []))\n\n\t\t\t\tconst macroHashes: string[] = []\n\n\t\t\t\tfor (let i = 0; i < this.macros.length; i++) {\n\t\t\t\t\tconst macro = this.macros[i]\n\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tif (macroHashes.includes(macro.$elysiaChecksum)) {\n\t\t\t\t\t\tthis.macros.splice(i, 1)\n\t\t\t\t\t\ti--\n\t\t\t\t\t}\n\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tmacroHashes.push(macro.$elysiaChecksum)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.decorate(plugin.decorators)\n\t\tthis.state(plugin.store)\n\t\tthis.model(plugin.definitions.type)\n\t\tthis.error(plugin.definitions.error)\n\n\t\tfor (const { method, path, handler, hooks } of Object.values(\n\t\t\tplugin.routes\n\t\t)) {\n\t\t\tthis.add(\n\t\t\t\tmethod,\n\t\t\t\tpath,\n\t\t\t\thandler,\n\t\t\t\tmergeHook(\n\t\t\t\t\thooks as LocalHook<any, any, any, any, any, any, any>,\n\t\t\t\t\t{\n\t\t\t\t\t\terror: plugin.event.error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\n\t\tif (!isScoped)\n\t\t\tif (name) {\n\t\t\t\tif (!(name in this.dependencies)) this.dependencies[name] = []\n\n\t\t\t\tconst current =\n\t\t\t\t\tseed !== undefined\n\t\t\t\t\t\t? checksum(name + JSON.stringify(seed))\n\t\t\t\t\t\t: 0\n\n\t\t\t\tif (\n\t\t\t\t\tthis.dependencies[name].some(\n\t\t\t\t\t\t({ checksum }) => current === checksum\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t\t\treturn this\n\n\t\t\t\tthis.dependencies[name].push(\n\t\t\t\t\t!this.config?.analytic\n\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\tname: plugin.config.name,\n\t\t\t\t\t\t\t\tseed: plugin.config.seed,\n\t\t\t\t\t\t\t\tchecksum: current,\n\t\t\t\t\t\t\t\tdependencies: plugin.dependencies,\n\t\t\t\t\t\t\t\tstack: plugin.stack,\n\t\t\t\t\t\t\t\troutes: plugin.routes,\n\t\t\t\t\t\t\t\tdecorators: plugin.decorators,\n\t\t\t\t\t\t\t\tstore: plugin.store,\n\t\t\t\t\t\t\t\ttype: plugin.definitions.type,\n\t\t\t\t\t\t\t\terror: plugin.definitions.error,\n\t\t\t\t\t\t\t\tderive: plugin.event.transform\n\t\t\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\t\t\t.filter((x) => x?.$elysia === 'derive')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t\tresolve: plugin.event.transform\n\t\t\t\t\t\t\t\t\t// @ts-expect-error\n\t\t\t\t\t\t\t\t\t.filter((x) => x?.$elysia === 'resolve')\n\t\t\t\t\t\t\t\t\t.map((x) => ({\n\t\t\t\t\t\t\t\t\t\tfn: x.toString(),\n\t\t\t\t\t\t\t\t\t\tstack: new Error().stack ?? ''\n\t\t\t\t\t\t\t\t\t}))\n\t\t\t\t\t\t  }\n\t\t\t\t)\n\t\t\t\tthis.event = mergeLifeCycle(\n\t\t\t\t\tthis.event,\n\t\t\t\t\tfilterGlobalHook(plugin.event),\n\t\t\t\t\tcurrent\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tthis.event = mergeLifeCycle(\n\t\t\t\t\tthis.event,\n\t\t\t\t\tfilterGlobalHook(plugin.event)\n\t\t\t\t)\n\t\t\t}\n\n\t\treturn this\n\t}\n\n\tmacro<const NewMacro extends BaseMacro>(\n\t\tmacro: (\n\t\t\troute: MacroManager<Routes, Decorators, Definitions['error']>\n\t\t) => NewMacro\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro & Partial<MacroToProperty<NewMacro>>,\n\t\tRoutes,\n\t\tScoped\n\t> {\n\t\t// @ts-ignore\n\t\tmacro.$elysiaChecksum = checksum(\n\t\t\tJSON.stringify({\n\t\t\t\tname: this.config.name,\n\t\t\t\tseed: this.config.seed,\n\t\t\t\tcontent: macro.toString()\n\t\t\t})\n\t\t)\n\n\t\tthis.macros.push(macro as any)\n\n\t\treturn this as any\n\t}\n\n\tmount(\n\t\thandle:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any>\n\t): this\n\tmount(\n\t\tpath: string,\n\t\thandle:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any>\n\t): this\n\n\tmount(\n\t\tpath:\n\t\t\t| string\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any>,\n\t\thandle?:\n\t\t\t| ((request: Request) => MaybePromise<Response>)\n\t\t\t| Elysia<any, any, any, any, any, any, any>\n\t) {\n\t\tif (\n\t\t\tpath instanceof Elysia ||\n\t\t\ttypeof path === 'function' ||\n\t\t\tpath.length === 0 ||\n\t\t\tpath === '/'\n\t\t) {\n\t\t\tconst run =\n\t\t\t\ttypeof path === 'function'\n\t\t\t\t\t? path\n\t\t\t\t\t: path instanceof Elysia\n\t\t\t\t\t? path.compile().fetch\n\t\t\t\t\t: handle instanceof Elysia\n\t\t\t\t\t? handle.compile().fetch\n\t\t\t\t\t: handle!\n\n\t\t\tconst handler: Handler<any, any> = async ({ request, path }) =>\n\t\t\t\trun(\n\t\t\t\t\tnew Request(\n\t\t\t\t\t\treplaceUrlPath(request.url, path || '/'),\n\t\t\t\t\t\trequest\n\t\t\t\t\t)\n\t\t\t\t)\n\n\t\t\tthis.all(\n\t\t\t\t'/',\n\t\t\t\thandler as any,\n\t\t\t\t{\n\t\t\t\t\ttype: 'none'\n\t\t\t\t} as any\n\t\t\t)\n\t\t\tthis.all(\n\t\t\t\t'/*',\n\t\t\t\thandler as any,\n\t\t\t\t{\n\t\t\t\t\ttype: 'none'\n\t\t\t\t} as any\n\t\t\t)\n\n\t\t\treturn this\n\t\t}\n\n\t\tconst length = path.length\n\n\t\tif (handle instanceof Elysia) handle = handle.compile().fetch\n\n\t\tconst handler: Handler<any, any> = async ({ request, path }) =>\n\t\t\t(handle as Function)!(\n\t\t\t\tnew Request(\n\t\t\t\t\treplaceUrlPath(request.url, path.slice(length) || '/'),\n\t\t\t\t\trequest\n\t\t\t\t)\n\t\t\t)\n\n\t\tthis.all(\n\t\t\tpath,\n\t\t\thandler as any,\n\t\t\t{\n\t\t\t\ttype: 'none'\n\t\t\t} as any\n\t\t)\n\n\t\tthis.all(\n\t\t\tpath + (path.endsWith('/') ? '*' : '/*'),\n\t\t\thandler as any,\n\t\t\t{\n\t\t\t\ttype: 'none'\n\t\t\t} as any\n\t\t)\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### get\n\t * Register handler for path with method [GET]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .get('/', () => 'hi')\n\t *     .get('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tget<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tget: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('GET', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### post\n\t * Register handler for path with method [POST]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .post('/', () => 'hi')\n\t *     .post('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tpost<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tpost: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('POST', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### put\n\t * Register handler for path with method [PUT]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .put('/', () => 'hi')\n\t *     .put('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tput<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tput: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('PUT', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### patch\n\t * Register handler for path with method [PATCH]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .patch('/', () => 'hi')\n\t *     .patch('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tpatch<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tpatch: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('PATCH', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### delete\n\t * Register handler for path with method [DELETE]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .delete('/', () => 'hi')\n\t *     .delete('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tdelete<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tdelete: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('DELETE', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### options\n\t * Register handler for path with method [OPTIONS]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .options('/', () => 'hi')\n\t *     .options('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\toptions<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tget: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('OPTIONS', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### all\n\t * Register handler for path with any method\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .all('/', () => 'hi')\n\t * ```\n\t */\n\tall<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\t[method in string]: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('ALL', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### head\n\t * Register handler for path with method [HEAD]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .head('/', () => 'hi')\n\t *     .head('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\thead<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\thead: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('HEAD', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### connect\n\t * Register handler for path with method [CONNECT]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .connect('/', () => 'hi')\n\t *     .connect('/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tconnect<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>\n\t>(\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\thook?: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tconnect: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add('CONNECT', path, handler as any, hook)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### ws\n\t * Register handler for path with method [ws]\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .ws('/', {\n\t *         message(ws, message) {\n\t *             ws.send(message)\n\t *         }\n\t *     })\n\t * ```\n\t */\n\tws<\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tkeyof Definitions['type'] & string\n\t\t>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>\n\t>(\n\t\tpath: Path,\n\t\toptions: WS.LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\t`${BasePath}${Path}`\n\t\t>\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\tsubscribe: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: Route['response']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tconst transform = options.transformMessage\n\t\t\t? Array.isArray(options.transformMessage)\n\t\t\t\t? options.transformMessage\n\t\t\t\t: [options.transformMessage]\n\t\t\t: undefined\n\n\t\tlet server: Server | null = null\n\n\t\tconst validateMessage = getSchemaValidator(options?.body, {\n\t\t\tmodels: this.definitions.type as Record<string, TSchema>\n\t\t})\n\n\t\tconst validateResponse = getSchemaValidator(options?.response as any, {\n\t\t\tmodels: this.definitions.type as Record<string, TSchema>\n\t\t})\n\n\t\tconst parseMessage = (message: any) => {\n\t\t\tif (typeof message === 'string') {\n\t\t\t\tconst start = message?.charCodeAt(0)\n\n\t\t\t\tif (start === 47 || start === 123)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tmessage = JSON.parse(message)\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Not empty\n\t\t\t\t\t}\n\t\t\t\telse if (isNumericString(message)) message = +message\n\t\t\t}\n\n\t\t\tif (transform?.length)\n\t\t\t\tfor (let i = 0; i < transform.length; i++) {\n\t\t\t\t\tconst temp = transform[i](message)\n\n\t\t\t\t\tif (temp !== undefined) message = temp\n\t\t\t\t}\n\n\t\t\treturn message\n\t\t}\n\n\t\tthis.route(\n\t\t\t'$INTERNALWS',\n\t\t\tpath as any,\n\t\t\t// @ts-ignore\n\t\t\t(context) => {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\t\t\t\tconst { set, path, qi, headers, query, params } = context\n\n\t\t\t\tif (server === null) server = this.getServer()\n\n\t\t\t\tif (\n\t\t\t\t\tserver?.upgrade<any>(context.request, {\n\t\t\t\t\t\theaders: (typeof options.upgrade === 'function'\n\t\t\t\t\t\t\t? options.upgrade(context as any as Context)\n\t\t\t\t\t\t\t: options.upgrade) as Bun.HeadersInit,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\tvalidator: validateResponse,\n\t\t\t\t\t\t\topen(ws: ServerWebSocket<any>) {\n\t\t\t\t\t\t\t\toptions.open?.(new ElysiaWS(ws, context as any))\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmessage: (ws: ServerWebSocket<any>, msg: any) => {\n\t\t\t\t\t\t\t\tconst message = parseMessage(msg)\n\n\t\t\t\t\t\t\t\tif (validateMessage?.Check(message) === false)\n\t\t\t\t\t\t\t\t\treturn void ws.send(\n\t\t\t\t\t\t\t\t\t\tnew ValidationError(\n\t\t\t\t\t\t\t\t\t\t\t'message',\n\t\t\t\t\t\t\t\t\t\t\tvalidateMessage,\n\t\t\t\t\t\t\t\t\t\t\tmessage\n\t\t\t\t\t\t\t\t\t\t).message as string\n\t\t\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t\toptions.message?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any),\n\t\t\t\t\t\t\t\t\tmessage as any\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdrain(ws: ServerWebSocket<any>) {\n\t\t\t\t\t\t\t\toptions.drain?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any)\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tclose(\n\t\t\t\t\t\t\t\tws: ServerWebSocket<any>,\n\t\t\t\t\t\t\t\tcode: number,\n\t\t\t\t\t\t\t\treason: string\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\toptions.close?.(\n\t\t\t\t\t\t\t\t\tnew ElysiaWS(ws, context as any),\n\t\t\t\t\t\t\t\t\tcode,\n\t\t\t\t\t\t\t\t\treason\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\t\treturn\n\n\t\t\t\tset.status = 400\n\n\t\t\t\treturn 'Expected a websocket connection'\n\t\t\t},\n\t\t\t{\n\t\t\t\tbeforeHandle: options.beforeHandle,\n\t\t\t\ttransform: options.transform,\n\t\t\t\theaders: options.headers,\n\t\t\t\tparams: options.params,\n\t\t\t\tquery: options.query\n\t\t\t} as any\n\t\t)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### route\n\t * Register handler for path with custom method\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * import { Elysia, t } from 'elysia'\n\t *\n\t * new Elysia()\n\t *     .route('CUSTOM', '/', () => 'hi')\n\t *     .route('CUSTOM', '/with-hook', () => 'hi', {\n\t *         schema: {\n\t *             response: t.String()\n\t *         }\n\t *     })\n\t * ```\n\t */\n\n\troute<\n\t\tconst Method extends HTTPMethod,\n\t\tconst Path extends string,\n\t\tconst LocalSchema extends InputSchema<\n\t\t\tExtract<keyof Definitions['type'], string>\n\t\t>,\n\t\tconst Handle extends\n\t\t\t| Exclude<Route['response'], Handle>\n\t\t\t| Handler<Route, Decorators, `${BasePath}${Path}`>,\n\t\tconst Route extends MergeSchema<\n\t\t\tUnwrapRoute<LocalSchema, Definitions['type']>,\n\t\t\tParentSchema\n\t\t>\n\t>(\n\t\tmethod: Method,\n\t\tpath: Path,\n\t\thandler: Handle,\n\t\t{\n\t\t\tconfig,\n\t\t\t...hook\n\t\t}: LocalHook<\n\t\t\tLocalSchema,\n\t\t\tRoute,\n\t\t\tDecorators,\n\t\t\tDefinitions['error'],\n\t\t\tMacro,\n\t\t\t`${BasePath}${Path}`\n\t\t> & {\n\t\t\tconfig: {\n\t\t\t\tallowMeta?: boolean\n\t\t\t}\n\t\t} = {\n\t\t\tconfig: {\n\t\t\t\tallowMeta: false\n\t\t\t}\n\t\t} as any\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tPrettify<\n\t\t\tRoutes & {\n\t\t\t\t[path in `${BasePath}${Path}`]: {\n\t\t\t\t\t[method in Lowercase<Method>]: {\n\t\t\t\t\t\tbody: Route['body']\n\t\t\t\t\t\tparams: undefined extends Route['params']\n\t\t\t\t\t\t\t? Path extends `${string}/${':' | '*'}${string}`\n\t\t\t\t\t\t\t\t? Record<GetPathParameter<Path>, string>\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['params']\n\t\t\t\t\t\tquery: Route['query']\n\t\t\t\t\t\theaders: Route['headers']\n\t\t\t\t\t\tresponse: unknown extends Route['response']\n\t\t\t\t\t\t\t? (\n\t\t\t\t\t\t\t\t\tHandle extends (...a: any) => infer Returned\n\t\t\t\t\t\t\t\t\t\t? Returned\n\t\t\t\t\t\t\t\t\t\t: Handle\n\t\t\t\t\t\t\t  ) extends infer Res\n\t\t\t\t\t\t\t\t? keyof Res extends typeof ELYSIA_RESPONSE\n\t\t\t\t\t\t\t\t\t? Prettify<\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t200: Exclude<\n\t\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t} & (Extract<\n\t\t\t\t\t\t\t\t\t\t\t\tRes,\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t> extends infer ErrorResponse extends {\n\t\t\t\t\t\t\t\t\t\t\t\t[ELYSIA_RESPONSE]: number\n\t\t\t\t\t\t\t\t\t\t\t\tresponse: any\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t[status in ErrorResponse[typeof ELYSIA_RESPONSE]]: ErrorResponse['response']\n\t\t\t\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t\t\t\t\t: {})\n\t\t\t\t\t\t\t\t\t  >\n\t\t\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t\t\t200: Res\n\t\t\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t\t: never\n\t\t\t\t\t\t\t: Route['response'] extends { 200: any }\n\t\t\t\t\t\t\t? Route['response']\n\t\t\t\t\t\t\t: {\n\t\t\t\t\t\t\t\t\t200: Route['response']\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t>,\n\t\tScoped\n\t> {\n\t\tthis.add(method, path, handler as any, hook, config)\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state({ counter: 0 })\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate<Name extends string | number | symbol, Value>(\n\t\tname: Name,\n\t\tvalue: Value\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: Prettify<\n\t\t\t\tDecorators['store'] & {\n\t\t\t\t\t[name in Name]: Value\n\t\t\t\t}\n\t\t\t>\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state('counter', 0)\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate<Store extends Record<string, unknown>>(\n\t\tstore: Store\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: Prettify<Decorators['store'] & Store>\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\tstate<const NewStore extends Record<string, unknown>>(\n\t\tmapper: (decorators: Decorators['store']) => NewStore\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: NewStore\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * ### state\n\t * Assign global mutatable state accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .state('counter', 0)\n\t *     .get('/', (({ counter }) => ++counter)\n\t * ```\n\t */\n\tstate(\n\t\tname: string | number | symbol | Record<string, unknown> | Function,\n\t\tvalue?: unknown\n\t) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tthis.store = mergeDeep(this.store, name)\n\n\t\t\t\treturn this as any\n\n\t\t\tcase 'function':\n\t\t\t\tthis.store = name(this.store)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\tif (!(name in this.store)) {\n\t\t\t// eslint-disable-next-line no-extra-semi\n\t\t\t;(this.store as Record<string | number | symbol, unknown>)[name] =\n\t\t\t\tvalue\n\t\t}\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate<const Name extends string, const Value>(\n\t\tname: Name,\n\t\tvalue: Value\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Prettify<\n\t\t\t\tDecorators['request'] & {\n\t\t\t\t\t[name in Name]: Value\n\t\t\t\t}\n\t\t\t>\n\t\t\tstore: Decorators['store']\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate<const NewDecorators extends Record<string, unknown>>(\n\t\tdecorators: NewDecorators\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Prettify<Decorators['request'] & NewDecorators>\n\t\t\tstore: Decorators['store']\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\tdecorate<const NewDecorators extends Record<string, unknown>>(\n\t\tmapper: (decorators: Decorators['request']) => NewDecorators\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: NewDecorators\n\t\t\tstore: Decorators['store']\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\t/**\n\t * ### decorate\n\t * Define custom method to `Context` accessible for all handler\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .decorate('getDate', () => Date.now())\n\t *     .get('/', (({ getDate }) => getDate())\n\t * ```\n\t */\n\tdecorate(\n\t\tname: string | Record<string, unknown> | Function,\n\t\tvalue?: unknown\n\t) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tthis.decorators = mergeDeep(this.decorators, name)\n\n\t\t\t\treturn this as any\n\n\t\t\tcase 'function':\n\t\t\t\tthis.decorators = name(this.decorators)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\t// @ts-ignore\n\t\tif (!(name in this.decorators)) this.decorators[name] = value\n\n\t\treturn this as any\n\t}\n\n\t/**\n\t * Derive new property for each request with access to `Context`.\n\t *\n\t * If error is thrown, the scope will skip to handling error instead.\n\t *\n\t * ---\n\t * @example\n\t * new Elysia()\n\t *     .state('counter', 1)\n\t *     .derive(({ store }) => ({\n\t *         increase() {\n\t *             store.counter++\n\t *         }\n\t *     }))\n\t */\n\tderive<Derivative extends Object>(\n\t\ttransform: (\n\t\t\tcontext: Prettify<Context<ParentSchema, Decorators>>\n\t\t) => MaybePromise<Derivative> extends { store: any }\n\t\t\t? never\n\t\t\t: Derivative\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: Decorators['store']\n\t\t\tderive: Prettify<Decorators['derive'] & Awaited<Derivative>>\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t> {\n\t\t// @ts-ignore\n\t\ttransform.$elysia = 'derive'\n\n\t\treturn this.onTransform(transform as any) as any\n\t}\n\n\tmodel<Name extends string, Model extends TSchema>(\n\t\tname: Name,\n\t\tmodel: Model\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: Prettify<\n\t\t\t\tDefinitions['type'] & { [name in Name]: Static<Model> }\n\t\t\t>\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\tmodel<Recorder extends Record<string, TSchema>>(\n\t\trecord: Recorder\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: Prettify<\n\t\t\t\tDefinitions['type'] & {\n\t\t\t\t\t[key in keyof Recorder]: Static<Recorder[key]>\n\t\t\t\t}\n\t\t\t>\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\tmodel<const NewType extends Record<string, TSchema>>(\n\t\tmapper: (decorators: {\n\t\t\t[type in keyof Definitions['type']]: ReturnType<\n\t\t\t\ttypeof t.Unsafe<Definitions['type'][type]>\n\t\t\t>\n\t\t}) => NewType\n\t): Elysia<\n\t\tBasePath,\n\t\tDecorators,\n\t\t{\n\t\t\ttype: { [x in keyof NewType]: Static<NewType[x]> }\n\t\t\terror: Definitions['error']\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t>\n\n\tmodel(name: string | Record<string, TSchema> | Function, model?: TSchema) {\n\t\tswitch (typeof name) {\n\t\t\tcase 'object':\n\t\t\t\tObject.entries(name).forEach(([key, value]) => {\n\t\t\t\t\tif (!(key in this.definitions.type))\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tthis.definitions.type[key] = value as TSchema\n\t\t\t\t})\n\n\t\t\t\treturn this\n\n\t\t\tcase 'function':\n\t\t\t\tthis.definitions.type = name(this.definitions.type)\n\n\t\t\t\treturn this as any\n\t\t}\n\n\t\t;(this.definitions.type as Record<string, TSchema>)[name] = model!\n\n\t\treturn this as any\n\t}\n\n\tmapDerive<const NewStore extends Record<string, unknown>>(\n\t\tmapper: (decorators: Decorators['request']) => MaybePromise<NewStore>\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Decorators['request']\n\t\t\tstore: NewStore\n\t\t\tderive: Decorators['derive']\n\t\t\tresolve: Decorators['resolve']\n\t\t},\n\t\tDefinitions,\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t> {\n\t\t// @ts-ignore\n\t\tmapper.$elysia = 'derive'\n\n\t\treturn this.onTransform(mapper as any) as any\n\t}\n\n\taffix<\n\t\tconst Base extends 'prefix' | 'suffix',\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(\n\t\tbase: Base,\n\t\ttype: Type,\n\t\tword: Word\n\t): Elysia<\n\t\tBasePath,\n\t\t{\n\t\t\trequest: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Decorators['request']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Decorators['request']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Decorators['request']>\n\t\t\t\t: Decorators['request']\n\t\t\tstore: Type extends 'state' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Decorators['store']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Decorators['store']>\n\t\t\t\t\t: AddSuffix<Word, Decorators['store']>\n\t\t\t\t: Decorators['store']\n\t\t\tderive: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Decorators['derive']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Decorators['derive']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Decorators['derive']>\n\t\t\t\t: Decorators['derive']\n\t\t\tresolve: Type extends 'decorator' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Decorators['resolve']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Decorators['resolve']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Decorators['resolve']>\n\t\t\t\t: Decorators['resolve']\n\t\t},\n\t\t{\n\t\t\ttype: Type extends 'model' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Definitions['type']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Definitions['type']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Definitions['type']>\n\t\t\t\t: Definitions['type']\n\t\t\terror: Type extends 'error' | 'all'\n\t\t\t\t? 'prefix' extends Base\n\t\t\t\t\t? Word extends `${string}${'_' | '-' | ' '}`\n\t\t\t\t\t\t? AddPrefix<Word, Definitions['error']>\n\t\t\t\t\t\t: AddPrefixCapitalize<Word, Definitions['error']>\n\t\t\t\t\t: AddSuffixCapitalize<Word, Definitions['error']>\n\t\t\t\t: Definitions['error']\n\t\t},\n\t\tParentSchema,\n\t\tMacro,\n\t\tRoutes,\n\t\tScoped\n\t> {\n\t\tif (word === '') return this as any\n\n\t\tconst delimieter = ['_', '-', ' ']\n\t\tconst capitalize = (word: string) =>\n\t\t\tword[0].toUpperCase() + word.slice(1)\n\n\t\tconst joinKey =\n\t\t\tbase === 'prefix'\n\t\t\t\t? (prefix: string, word: string) =>\n\t\t\t\t\t\tdelimieter.includes(prefix.at(-1) ?? '')\n\t\t\t\t\t\t\t? prefix + word\n\t\t\t\t\t\t\t: prefix + capitalize(word)\n\t\t\t\t: delimieter.includes(word.at(-1) ?? '')\n\t\t\t\t? (suffix: string, word: string) => word + suffix\n\t\t\t\t: (suffix: string, word: string) => word + capitalize(suffix)\n\n\t\tconst remap = (type: 'decorator' | 'state' | 'model' | 'error') => {\n\t\t\tconst store: Record<string, any> = {}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase 'decorator':\n\t\t\t\t\tfor (const key in this.decorators)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.decorators[key]\n\n\t\t\t\t\tthis.decorators = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'state':\n\t\t\t\t\tfor (const key in this.store)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.store[key]\n\n\t\t\t\t\tthis.store = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'model':\n\t\t\t\t\tfor (const key in this.definitions.type)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.definitions.type[key]\n\n\t\t\t\t\tthis.definitions.type = store\n\t\t\t\t\tbreak\n\n\t\t\t\tcase 'error':\n\t\t\t\t\tfor (const key in this.definitions.error)\n\t\t\t\t\t\tstore[joinKey(word, key)] = this.definitions.error[key]\n\n\t\t\t\t\tthis.definitions.error = store\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst types = Array.isArray(type) ? type : [type]\n\n\t\tfor (const type of types.some((x) => x === 'all')\n\t\t\t? ['decorator', 'state', 'model', 'error']\n\t\t\t: types)\n\t\t\tremap(type as 'decorator')\n\n\t\treturn this as any\n\t}\n\n\tprefix<\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(type: Type, word: Word) {\n\t\treturn this.affix('prefix', type, word)\n\t}\n\n\tsuffix<\n\t\tconst Type extends 'all' | 'decorator' | 'state' | 'model' | 'error',\n\t\tconst Word extends string\n\t>(type: Type, word: Word) {\n\t\treturn this.affix('suffix', type, word)\n\t}\n\n\tcompile() {\n\t\tthis.fetch = this.config.aot\n\t\t\t? composeGeneralHandler(this)\n\t\t\t: createDynamicHandler(this)\n\n\t\tif (typeof this.server?.reload === 'function')\n\t\t\tthis.server.reload({\n\t\t\t\t...(this.server || {}),\n\t\t\t\tfetch: this.fetch\n\t\t\t})\n\n\t\treturn this\n\t}\n\n\thandle = async (request: Request) => this.fetch(request)\n\n\t/**\n\t * Use handle can be either sync or async to save performance.\n\t *\n\t * Beside benchmark purpose, please use 'handle' instead.\n\t */\n\tfetch = (request: Request): MaybePromise<Response> => {\n\t\tif (process.env.NODE_ENV === 'production')\n\t\t\tconsole.warn(\n\t\t\t\t\"Performance degradation found. Please call Elysia.compile() before using 'fetch'\"\n\t\t\t)\n\n\t\treturn (this.fetch = this.config.aot\n\t\t\t? composeGeneralHandler(this)\n\t\t\t: createDynamicHandler(this))(request)\n\t}\n\n\tprivate handleError = async (\n\t\tcontext: Context,\n\t\terror:\n\t\t\t| Error\n\t\t\t| ValidationError\n\t\t\t| ParseError\n\t\t\t| NotFoundError\n\t\t\t| InternalServerError\n\t) =>\n\t\t(this.handleError = this.config.aot\n\t\t\t? composeErrorHandler(this)\n\t\t\t: createDynamicErrorHandler(this))(context, error)\n\n\tprivate outerErrorHandler = (error: Error) =>\n\t\tnew Response(error.message || error.name || 'Error', {\n\t\t\t// @ts-ignore\n\t\t\tstatus: error?.status ?? 500\n\t\t})\n\n\t/**\n\t * ### listen\n\t * Assign current instance to port and start serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * new Elysia()\n\t *     .get(\"/\", () => 'hi')\n\t *     .listen(8080)\n\t * ```\n\t */\n\tlisten = (\n\t\toptions: string | number | Partial<Serve>,\n\t\tcallback?: ListenCallback\n\t) => {\n\t\tif (typeof Bun === 'undefined')\n\t\t\tthrow new Error(\n\t\t\t\t'.listen() is designed to run on Bun only. If you are running Elysia in other environment please use a dedicated plugin or export the handler via Elysia.fetch'\n\t\t\t)\n\n\t\tthis.compile()\n\n\t\tif (typeof options === 'string') {\n\t\t\toptions = +options.trim()\n\n\t\t\tif (Number.isNaN(options))\n\t\t\t\tthrow new Error('Port must be a numeric value')\n\t\t}\n\n\t\tconst fetch = this.fetch\n\n\t\tconst serve =\n\t\t\ttypeof options === 'object'\n\t\t\t\t? ({\n\t\t\t\t\t\tdevelopment: !isProduction,\n\t\t\t\t\t\treusePort: true,\n\t\t\t\t\t\t...(this.config.serve || {}),\n\t\t\t\t\t\t...(options || {}),\n\t\t\t\t\t\twebsocket: {\n\t\t\t\t\t\t\t...(this.config.websocket || {}),\n\t\t\t\t\t\t\t...(websocket || {})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfetch,\n\t\t\t\t\t\terror: this.outerErrorHandler\n\t\t\t\t  } as Serve)\n\t\t\t\t: ({\n\t\t\t\t\t\tdevelopment: !isProduction,\n\t\t\t\t\t\treusePort: true,\n\t\t\t\t\t\t...(this.config.serve || {}),\n\t\t\t\t\t\twebsocket: {\n\t\t\t\t\t\t\t...(this.config.websocket || {}),\n\t\t\t\t\t\t\t...(websocket || {})\n\t\t\t\t\t\t},\n\t\t\t\t\t\tport: options,\n\t\t\t\t\t\tfetch,\n\t\t\t\t\t\terror: this.outerErrorHandler\n\t\t\t\t  } as Serve)\n\n\t\tthis.server = Bun?.serve(serve)\n\n\t\tif (this.event.start.length)\n\t\t\tfor (let i = 0; i < this.event.start.length; i++)\n\t\t\t\tthis.event.start[i](this)\n\n\t\tif (callback) callback(this.server!)\n\n\t\tprocess.on('beforeExit', () => {\n\t\t\tfor (let i = 0; i < this.event.stop.length; i++)\n\t\t\t\tthis.event.stop[i](this)\n\t\t})\n\n\t\tPromise.all(this.lazyLoadModules).then(() => {\n\t\t\tBun?.gc(false)\n\t\t})\n\n\t\treturn this\n\t}\n\n\t/**\n\t * ### stop\n\t * Stop server from serving\n\t *\n\t * ---\n\t * @example\n\t * ```typescript\n\t * const app = new Elysia()\n\t *     .get(\"/\", () => 'hi')\n\t *     .listen(8080)\n\t *\n\t * // Sometime later\n\t * app.stop()\n\t * ```\n\t */\n\tstop = async () => {\n\t\tif (!this.server)\n\t\t\tthrow new Error(\n\t\t\t\t\"Elysia isn't running. Call `app.listen` to start the server.\"\n\t\t\t)\n\n\t\tthis.server.stop()\n\n\t\tif (this.event.stop.length)\n\t\t\tfor (let i = 0; i < this.event.stop.length; i++)\n\t\t\t\tthis.event.stop[i](this)\n\t}\n\n\t/**\n\t * Wait until all lazy loaded modules all load is fully\n\t */\n\tget modules() {\n\t\treturn Promise.all(this.lazyLoadModules)\n\t}\n}\n\nexport { Elysia }\n\nexport { mapResponse, mapCompactResponse, mapEarlyResponse } from './handler'\nexport { t } from './type-system'\nexport { Cookie, type CookieOptions } from './cookie'\n\nexport {\n\tgetSchemaValidator,\n\tmergeDeep,\n\tmergeHook,\n\tmergeObjectArray,\n\tgetResponseSchemaValidator\n} from './utils'\n\nexport {\n\terror,\n\tParseError,\n\tNotFoundError,\n\tValidationError,\n\tInternalServerError,\n\tInvalidCookieSignature\n} from './error'\n\nexport type { Context, PreContext } from './context'\n\nexport type {\n\tElysiaConfig,\n\tDecoratorBase,\n\tDefinitionBase,\n\tRouteBase,\n\tHandler,\n\tComposedHandler,\n\tInputSchema,\n\tLocalHook,\n\tMergeSchema,\n\tRouteSchema,\n\tUnwrapRoute,\n\tInternalRoute,\n\tHTTPMethod,\n\tSchemaValidator,\n\tVoidHandler,\n\tPreHandler,\n\tBodyHandler,\n\tOptionalHandler,\n\tErrorHandler,\n\tAfterHandler,\n\tLifeCycleEvent,\n\tTraceEvent,\n\tLifeCycleStore,\n\tMaybePromise,\n\tListenCallback,\n\tUnwrapSchema,\n\tTraceHandler,\n\tTraceProcess,\n\tTraceReporter,\n\tTraceStream,\n\tChecksum\n} from './types'\n\nexport type { Static, TSchema } from '@sinclair/typebox'\n"
  ],
  "mappings": "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",
  "debugId": "457194C2CAFFFE4F64756e2164756e21",
  "names": []
}